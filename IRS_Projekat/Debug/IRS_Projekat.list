
IRS_Projekat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e20  08008564  08008564  00009564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009384  08009384  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  08009384  08009384  0000a384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800938c  0800938c  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800938c  0800938c  0000a38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009390  08009390  0000a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009394  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  2000005c  080093f0  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  080093f0  0000b87c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015988  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d12  00000000  00000000  00020a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00023728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e06  00000000  00000000  00024930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b0d  00000000  00000000  00025736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d14  00000000  00000000  0004e243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fec83  00000000  00000000  00064f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163bda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005238  00000000  00000000  00163c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00168e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800854c 	.word	0x0800854c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800854c 	.word	0x0800854c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <Login_Write>:
Status_Uart_t uart_error_status = NO_ERROR;
Status_Logging_t logging = NO_LOGGING_ERROR;
HAL_StatusTypeDef moj_status;


Status_Logging_t Login_Write(const char* message) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
    /*  We will send via UART4 for logging messages  */
    moj_status = HAL_UART_Transmit(&huart4, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff fa3b 	bl	80001d0 <strlen>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <Login_Write+0x34>)
 8000d66:	f005 fa05 	bl	8006174 <HAL_UART_Transmit>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <Login_Write+0x38>)
 8000d70:	701a      	strb	r2, [r3, #0]

    return logging;
 8000d72:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <Login_Write+0x3c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000240 	.word	0x20000240
 8000d84:	200002f2 	.word	0x200002f2
 8000d88:	200002f1 	.word	0x200002f1

08000d8c <main>:
  */

uint8_t rx_data2[10], rx_data3[10];
uint8_t tx_data2[10], tx_data3[10];
int main(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d90:	f001 f966 	bl	8002060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f95c 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d98:	f000 fb50 	bl	800143c <MX_GPIO_Init>
  MX_UART4_Init();
 8000d9c:	f000 fb14 	bl	80013c8 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000da0:	f000 fa9e 	bl	80012e0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000da4:	f000 fad6 	bl	8001354 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8000da8:	f000 f9a4 	bl	80010f4 <MX_I2C2_Init>
  MX_ADC1_Init();
 8000dac:	f000 fa00 	bl	80011b0 <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */

  if (ssd1306_Init()!= INITIALIZED_OLED_INIT_SUCCESSFULLY){
 8000db0:	f000 ff54 	bl	8001c5c <ssd1306_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d005      	beq.n	8000dc6 <main+0x3a>
	  Login_Write("Unaible to initialize ssd1306 Init! \r\n");
 8000dba:	481b      	ldr	r0, [pc, #108]	@ (8000e28 <main+0x9c>)
 8000dbc:	f7ff ffc6 	bl	8000d4c <Login_Write>
	  Error_Handler();
 8000dc0:	f000 fbd2 	bl	8001568 <Error_Handler>
 8000dc4:	e002      	b.n	8000dcc <main+0x40>
  }
  else{
	  Login_Write("Successfully initialized ssd1306 Init! \r\n");
 8000dc6:	4819      	ldr	r0, [pc, #100]	@ (8000e2c <main+0xa0>)
 8000dc8:	f7ff ffc0 	bl	8000d4c <Login_Write>
  }


  /*  Enabling communications  */
  if (HAL_UART_Receive_IT(&huart2, uart2_data.rx_buffer, UART_EXPECT_DATA_SIZE) != HAL_OK){
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4918      	ldr	r1, [pc, #96]	@ (8000e30 <main+0xa4>)
 8000dd0:	4818      	ldr	r0, [pc, #96]	@ (8000e34 <main+0xa8>)
 8000dd2:	f005 fab7 	bl	8006344 <HAL_UART_Receive_IT>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d005      	beq.n	8000de8 <main+0x5c>
	  Login_Write("Unaible to start UART2 receive IT MODE! \r\n");
 8000ddc:	4816      	ldr	r0, [pc, #88]	@ (8000e38 <main+0xac>)
 8000dde:	f7ff ffb5 	bl	8000d4c <Login_Write>
	  Error_Handler();
 8000de2:	f000 fbc1 	bl	8001568 <Error_Handler>
 8000de6:	e002      	b.n	8000dee <main+0x62>
  }
  else{
	  Login_Write("Successfully started UART2 receive IT MODE! \r\n");
 8000de8:	4814      	ldr	r0, [pc, #80]	@ (8000e3c <main+0xb0>)
 8000dea:	f7ff ffaf 	bl	8000d4c <Login_Write>
  }
  if(HAL_UART_Receive_IT(&huart3, uart3_data.rx_buffer, UART_EXPECT_DATA_SIZE) != HAL_OK){
 8000dee:	2201      	movs	r2, #1
 8000df0:	4913      	ldr	r1, [pc, #76]	@ (8000e40 <main+0xb4>)
 8000df2:	4814      	ldr	r0, [pc, #80]	@ (8000e44 <main+0xb8>)
 8000df4:	f005 faa6 	bl	8006344 <HAL_UART_Receive_IT>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <main+0x7e>
	  Login_Write("Unaible to start UART3 receive IT MODE! \r\n");
 8000dfe:	4812      	ldr	r0, [pc, #72]	@ (8000e48 <main+0xbc>)
 8000e00:	f7ff ffa4 	bl	8000d4c <Login_Write>
	  Error_Handler();
 8000e04:	f000 fbb0 	bl	8001568 <Error_Handler>
 8000e08:	e002      	b.n	8000e10 <main+0x84>
  }
  else{
	  Login_Write("Successfully started UART3 receive IT MODE! \r\n");
 8000e0a:	4810      	ldr	r0, [pc, #64]	@ (8000e4c <main+0xc0>)
 8000e0c:	f7ff ff9e 	bl	8000d4c <Login_Write>
  }

  HAL_UART_Receive_IT(&huart2, rx_data2, 1);
 8000e10:	2201      	movs	r2, #1
 8000e12:	490f      	ldr	r1, [pc, #60]	@ (8000e50 <main+0xc4>)
 8000e14:	4807      	ldr	r0, [pc, #28]	@ (8000e34 <main+0xa8>)
 8000e16:	f005 fa95 	bl	8006344 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, rx_data3, 1);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	490d      	ldr	r1, [pc, #52]	@ (8000e54 <main+0xc8>)
 8000e1e:	4809      	ldr	r0, [pc, #36]	@ (8000e44 <main+0xb8>)
 8000e20:	f005 fa90 	bl	8006344 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <main+0x98>
 8000e28:	08008564 	.word	0x08008564
 8000e2c:	0800858c 	.word	0x0800858c
 8000e30:	200002c8 	.word	0x200002c8
 8000e34:	20000130 	.word	0x20000130
 8000e38:	080085b8 	.word	0x080085b8
 8000e3c:	080085e4 	.word	0x080085e4
 8000e40:	200002dc 	.word	0x200002dc
 8000e44:	200001b8 	.word	0x200001b8
 8000e48:	08008614 	.word	0x08008614
 8000e4c:	08008640 	.word	0x08008640
 8000e50:	200002f4 	.word	0x200002f4
 8000e54:	20000300 	.word	0x20000300

08000e58 <HAL_GPIO_EXTI_Callback>:
	/* Callback function for EXTI13
	   This will start conversion for ADC1_IN9
   	   and end of that will display Temp on OLED
   	*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]

    if(GPIO_Pin == BUTTON_PIN) {
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e68:	d108      	bne.n	8000e7c <HAL_GPIO_EXTI_Callback+0x24>
    	/* Inicijalizacija ADC-a */
    	if (HAL_ADC_Start_IT(&hadc1) != HAL_OK){ // Starts ADC -> we will catch the complete
 8000e6a:	4808      	ldr	r0, [pc, #32]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0x34>)
 8000e6c:	f001 fcd6 	bl	800281c <HAL_ADC_Start_IT>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d005      	beq.n	8000e82 <HAL_GPIO_EXTI_Callback+0x2a>
    		Error_Handler();
 8000e76:	f000 fb77 	bl	8001568 <Error_Handler>
    	}
    }
    else{
    	Login_Write("Not expected another interrupt only PC13! \r\n");
    }
}
 8000e7a:	e002      	b.n	8000e82 <HAL_GPIO_EXTI_Callback+0x2a>
    	Login_Write("Not expected another interrupt only PC13! \r\n");
 8000e7c:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <HAL_GPIO_EXTI_Callback+0x38>)
 8000e7e:	f7ff ff65 	bl	8000d4c <Login_Write>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200000cc 	.word	0x200000cc
 8000e90:	08008670 	.word	0x08008670
 8000e94:	00000000 	.word	0x00000000

08000e98 <HAL_ADC_ConvCpltCallback>:

/*  This function will get the temp value and send on display via I2C  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	@ 0x30
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8000f98 <HAL_ADC_ConvCpltCallback+0x100>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d165      	bne.n	8000f76 <HAL_ADC_ConvCpltCallback+0xde>
    {
        		/*  Catching the adc_value  */
    	uint32_t adc_value = HAL_ADC_GetValue(hadc);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f001 fde4 	bl	8002a78 <HAL_ADC_GetValue>
 8000eb0:	6278      	str	r0, [r7, #36]	@ 0x24
    	ADC_Value_Temperature_t value;
    	value.temperature = (adc_value * 3.3 / 4095) * 100; // Example for a temperature sensor
 8000eb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000eb4:	f7ff fb26 	bl	8000504 <__aeabi_ui2d>
 8000eb8:	a333      	add	r3, pc, #204	@ (adr r3, 8000f88 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebe:	f7ff fb9b 	bl	80005f8 <__aeabi_dmul>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4610      	mov	r0, r2
 8000ec8:	4619      	mov	r1, r3
 8000eca:	a331      	add	r3, pc, #196	@ (adr r3, 8000f90 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed0:	f7ff fcbc 	bl	800084c <__aeabi_ddiv>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f9c <HAL_ADC_ConvCpltCallback+0x104>)
 8000ee2:	f7ff fb89 	bl	80005f8 <__aeabi_dmul>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4610      	mov	r0, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	f7ff fd95 	bl	8000a1c <__aeabi_d2uiz>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	843b      	strh	r3, [r7, #32]
    	char temp_str[20];
    	sprintf(temp_str, "Temp: %d C", value.temperature); // @suppress("Float formatting support")
 8000ef8:	8c3b      	ldrh	r3, [r7, #32]
 8000efa:	461a      	mov	r2, r3
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4927      	ldr	r1, [pc, #156]	@ (8000fa0 <HAL_ADC_ConvCpltCallback+0x108>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f006 fe82 	bl	8007c0c <siprintf>
    	//ssd1306_Clear();
    	if (ssd1306_SetCursor(0,0)!= INITIALIZED_OLED_CURSOR_SUCCESSFULLY){
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f001 f85c 	bl	8001fc8 <ssd1306_SetCursor>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d005      	beq.n	8000f22 <HAL_ADC_ConvCpltCallback+0x8a>
    		Login_Write("Unaible to initialize ssd1306 SetCursor! \r\n");
 8000f16:	4823      	ldr	r0, [pc, #140]	@ (8000fa4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000f18:	f7ff ff18 	bl	8000d4c <Login_Write>
    		Error_Handler();
 8000f1c:	f000 fb24 	bl	8001568 <Error_Handler>
 8000f20:	e002      	b.n	8000f28 <HAL_ADC_ConvCpltCallback+0x90>
    	}
    	else{
    		Login_Write("Successfully initialized ssd1306 SetCursor! \r\n");
 8000f22:	4821      	ldr	r0, [pc, #132]	@ (8000fa8 <HAL_ADC_ConvCpltCallback+0x110>)
 8000f24:	f7ff ff12 	bl	8000d4c <Login_Write>
    	}

    	char result = ssd1306_WriteString(temp_str, Font_7x10, White);
 8000f28:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <HAL_ADC_ConvCpltCallback+0x114>)
 8000f2a:	f107 000c 	add.w	r0, r7, #12
 8000f2e:	2201      	movs	r2, #1
 8000f30:	9200      	str	r2, [sp, #0]
 8000f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f34:	f001 f822 	bl	8001f7c <ssd1306_WriteString>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    	if (result == '\0') {
 8000f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d103      	bne.n	8000f4e <HAL_ADC_ConvCpltCallback+0xb6>
    	    Login_Write("Successfully initialized ssd1306 WriteString!\r\n");
 8000f46:	481a      	ldr	r0, [pc, #104]	@ (8000fb0 <HAL_ADC_ConvCpltCallback+0x118>)
 8000f48:	f7ff ff00 	bl	8000d4c <Login_Write>
 8000f4c:	e004      	b.n	8000f58 <HAL_ADC_ConvCpltCallback+0xc0>
    	}
    	else {
    	    Login_Write("Unable to initialize ssd1306 WriteString!\r\n");
 8000f4e:	4819      	ldr	r0, [pc, #100]	@ (8000fb4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000f50:	f7ff fefc 	bl	8000d4c <Login_Write>
    	    Error_Handler();
 8000f54:	f000 fb08 	bl	8001568 <Error_Handler>
    	}
    	if (ssd1306_UpdateScreen()!= INITIALIZED_OLED_UPDATE_SCREEN_SUCCESSFULLY){
 8000f58:	f000 ff04 	bl	8001d64 <ssd1306_UpdateScreen>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d005      	beq.n	8000f6e <HAL_ADC_ConvCpltCallback+0xd6>
    		Login_Write("Unaible to initialize ssd1306 UpdateScreen! \r\n");
 8000f62:	4815      	ldr	r0, [pc, #84]	@ (8000fb8 <HAL_ADC_ConvCpltCallback+0x120>)
 8000f64:	f7ff fef2 	bl	8000d4c <Login_Write>
    		Error_Handler();
 8000f68:	f000 fafe 	bl	8001568 <Error_Handler>
    }
    else{
    	Login_Write("Not hadc->Instance == ADC1! \r\n");
    	Error_Handler();
    }
}
 8000f6c:	e008      	b.n	8000f80 <HAL_ADC_ConvCpltCallback+0xe8>
    		Login_Write("Successfully initialized ssd1306 UpdateScreen! \r\n");
 8000f6e:	4813      	ldr	r0, [pc, #76]	@ (8000fbc <HAL_ADC_ConvCpltCallback+0x124>)
 8000f70:	f7ff feec 	bl	8000d4c <Login_Write>
}
 8000f74:	e004      	b.n	8000f80 <HAL_ADC_ConvCpltCallback+0xe8>
    	Login_Write("Not hadc->Instance == ADC1! \r\n");
 8000f76:	4812      	ldr	r0, [pc, #72]	@ (8000fc0 <HAL_ADC_ConvCpltCallback+0x128>)
 8000f78:	f7ff fee8 	bl	8000d4c <Login_Write>
    	Error_Handler();
 8000f7c:	f000 faf4 	bl	8001568 <Error_Handler>
}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	@ 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	66666666 	.word	0x66666666
 8000f8c:	400a6666 	.word	0x400a6666
 8000f90:	00000000 	.word	0x00000000
 8000f94:	40affe00 	.word	0x40affe00
 8000f98:	50040000 	.word	0x50040000
 8000f9c:	40590000 	.word	0x40590000
 8000fa0:	080086a0 	.word	0x080086a0
 8000fa4:	080086ac 	.word	0x080086ac
 8000fa8:	080086d8 	.word	0x080086d8
 8000fac:	08009344 	.word	0x08009344
 8000fb0:	08008708 	.word	0x08008708
 8000fb4:	08008738 	.word	0x08008738
 8000fb8:	08008764 	.word	0x08008764
 8000fbc:	08008794 	.word	0x08008794
 8000fc0:	080087c8 	.word	0x080087c8

08000fc4 <HAL_UART_RxCpltCallback>:



	/* This is a bridge communication between HOST -> uC -> ESP8226 module */
					/*  This is for internet communication  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a17      	ldr	r2, [pc, #92]	@ (8001030 <HAL_UART_RxCpltCallback+0x6c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d111      	bne.n	8000ffa <HAL_UART_RxCpltCallback+0x36>
		tx_data3[0] = rx_data2[0];
 8000fd6:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <HAL_UART_RxCpltCallback+0x70>)
 8000fd8:	781a      	ldrb	r2, [r3, #0]
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <HAL_UART_RxCpltCallback+0x74>)
 8000fdc:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, rx_data2, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4914      	ldr	r1, [pc, #80]	@ (8001034 <HAL_UART_RxCpltCallback+0x70>)
 8000fe2:	4816      	ldr	r0, [pc, #88]	@ (800103c <HAL_UART_RxCpltCallback+0x78>)
 8000fe4:	f005 f9ae 	bl	8006344 <HAL_UART_Receive_IT>
		HAL_UART_AbortTransmit_IT(&huart3);
 8000fe8:	4815      	ldr	r0, [pc, #84]	@ (8001040 <HAL_UART_RxCpltCallback+0x7c>)
 8000fea:	f005 f9f7 	bl	80063dc <HAL_UART_AbortTransmit_IT>
		HAL_UART_Transmit_IT(&huart3, tx_data3, 1);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4911      	ldr	r1, [pc, #68]	@ (8001038 <HAL_UART_RxCpltCallback+0x74>)
 8000ff2:	4813      	ldr	r0, [pc, #76]	@ (8001040 <HAL_UART_RxCpltCallback+0x7c>)
 8000ff4:	f005 f948 	bl	8006288 <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart3, rx_data3, 1);
		HAL_UART_AbortTransmit_IT(&huart2);
		HAL_UART_Transmit_IT(&huart2, tx_data2, 1);
	}

}
 8000ff8:	e015      	b.n	8001026 <HAL_UART_RxCpltCallback+0x62>
	else if(huart->Instance == USART3){
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <HAL_UART_RxCpltCallback+0x80>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d110      	bne.n	8001026 <HAL_UART_RxCpltCallback+0x62>
		tx_data2[0] = rx_data3[0];
 8001004:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <HAL_UART_RxCpltCallback+0x84>)
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	4b10      	ldr	r3, [pc, #64]	@ (800104c <HAL_UART_RxCpltCallback+0x88>)
 800100a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, rx_data3, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	490e      	ldr	r1, [pc, #56]	@ (8001048 <HAL_UART_RxCpltCallback+0x84>)
 8001010:	480b      	ldr	r0, [pc, #44]	@ (8001040 <HAL_UART_RxCpltCallback+0x7c>)
 8001012:	f005 f997 	bl	8006344 <HAL_UART_Receive_IT>
		HAL_UART_AbortTransmit_IT(&huart2);
 8001016:	4809      	ldr	r0, [pc, #36]	@ (800103c <HAL_UART_RxCpltCallback+0x78>)
 8001018:	f005 f9e0 	bl	80063dc <HAL_UART_AbortTransmit_IT>
		HAL_UART_Transmit_IT(&huart2, tx_data2, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	490b      	ldr	r1, [pc, #44]	@ (800104c <HAL_UART_RxCpltCallback+0x88>)
 8001020:	4806      	ldr	r0, [pc, #24]	@ (800103c <HAL_UART_RxCpltCallback+0x78>)
 8001022:	f005 f931 	bl	8006288 <HAL_UART_Transmit_IT>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40004400 	.word	0x40004400
 8001034:	200002f4 	.word	0x200002f4
 8001038:	20000318 	.word	0x20000318
 800103c:	20000130 	.word	0x20000130
 8001040:	200001b8 	.word	0x200001b8
 8001044:	40004800 	.word	0x40004800
 8001048:	20000300 	.word	0x20000300
 800104c:	2000030c 	.word	0x2000030c

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b096      	sub	sp, #88	@ 0x58
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	2244      	movs	r2, #68	@ 0x44
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f006 fe0e 	bl	8007c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	463b      	mov	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001072:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001076:	f003 fd1d 	bl	8004ab4 <HAL_PWREx_ControlVoltageScaling>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x34>
  {
//	  Login_Write("Unaible to initialize RCC ControlVoltageScaling! \r\n");
	  Error_Handler();
 8001080:	f000 fa72 	bl	8001568 <Error_Handler>


  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001084:	2310      	movs	r3, #16
 8001086:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001090:	2360      	movs	r3, #96	@ 0x60
 8001092:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001094:	2300      	movs	r3, #0
 8001096:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4618      	mov	r0, r3
 800109e:	f003 fd5f 	bl	8004b60 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <SystemClock_Config+0x64>
  {
	  Login_Write("Unaible to initialize RCC OscConfig! \r\n");
 80010a8:	4810      	ldr	r0, [pc, #64]	@ (80010ec <SystemClock_Config+0x9c>)
 80010aa:	f7ff fe4f 	bl	8000d4c <Login_Write>
	  Error_Handler();
 80010ae:	f000 fa5b 	bl	8001568 <Error_Handler>
 80010b2:	e002      	b.n	80010ba <SystemClock_Config+0x6a>
  }
  else{
	  Login_Write("Successfully initialized RCC OscConfig! \r\n");
 80010b4:	480e      	ldr	r0, [pc, #56]	@ (80010f0 <SystemClock_Config+0xa0>)
 80010b6:	f7ff fe49 	bl	8000d4c <Login_Write>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ba:	230f      	movs	r3, #15
 80010bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ce:	463b      	mov	r3, r7
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 f920 	bl	8005318 <HAL_RCC_ClockConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x92>
  {
//	  Login_Write("Unaible to initialize RCC ClockConfig! \r\n");
	  Error_Handler();
 80010de:	f000 fa43 	bl	8001568 <Error_Handler>
  }

}
 80010e2:	bf00      	nop
 80010e4:	3758      	adds	r7, #88	@ 0x58
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	080087e8 	.word	0x080087e8
 80010f0:	08008810 	.word	0x08008810

080010f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010f8:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <MX_I2C2_Init+0x9c>)
 80010fa:	4a26      	ldr	r2, [pc, #152]	@ (8001194 <MX_I2C2_Init+0xa0>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000003;
 80010fe:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <MX_I2C2_Init+0x9c>)
 8001100:	2203      	movs	r2, #3
 8001102:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <MX_I2C2_Init+0x9c>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <MX_I2C2_Init+0x9c>)
 800110c:	2201      	movs	r2, #1
 800110e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001110:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <MX_I2C2_Init+0x9c>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <MX_I2C2_Init+0x9c>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800111c:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <MX_I2C2_Init+0x9c>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <MX_I2C2_Init+0x9c>)
 8001124:	2200      	movs	r2, #0
 8001126:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <MX_I2C2_Init+0x9c>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800112e:	4818      	ldr	r0, [pc, #96]	@ (8001190 <MX_I2C2_Init+0x9c>)
 8001130:	f002 ffe2 	bl	80040f8 <HAL_I2C_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d005      	beq.n	8001146 <MX_I2C2_Init+0x52>
  {
	  Login_Write("Unaible to initialize I2C2 peripherial! \r\n");
 800113a:	4817      	ldr	r0, [pc, #92]	@ (8001198 <MX_I2C2_Init+0xa4>)
 800113c:	f7ff fe06 	bl	8000d4c <Login_Write>
	  Error_Handler();
 8001140:	f000 fa12 	bl	8001568 <Error_Handler>
 8001144:	e002      	b.n	800114c <MX_I2C2_Init+0x58>
  }
  else{
	  Login_Write("Successfully initialized I2C2 peripherial! \r\n");
 8001146:	4815      	ldr	r0, [pc, #84]	@ (800119c <MX_I2C2_Init+0xa8>)
 8001148:	f7ff fe00 	bl	8000d4c <Login_Write>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800114c:	2100      	movs	r1, #0
 800114e:	4810      	ldr	r0, [pc, #64]	@ (8001190 <MX_I2C2_Init+0x9c>)
 8001150:	f003 fc0a 	bl	8004968 <HAL_I2CEx_ConfigAnalogFilter>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <MX_I2C2_Init+0x72>
  {
	  Login_Write("Unaible to initialize I2C2 Analog filter! \r\n");
 800115a:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <MX_I2C2_Init+0xac>)
 800115c:	f7ff fdf6 	bl	8000d4c <Login_Write>
	  Error_Handler();
 8001160:	f000 fa02 	bl	8001568 <Error_Handler>
 8001164:	e002      	b.n	800116c <MX_I2C2_Init+0x78>
  }
  else{
	  Login_Write("Successfully initialized I2C2 Analog filter! \r\n");
 8001166:	480f      	ldr	r0, [pc, #60]	@ (80011a4 <MX_I2C2_Init+0xb0>)
 8001168:	f7ff fdf0 	bl	8000d4c <Login_Write>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800116c:	2100      	movs	r1, #0
 800116e:	4808      	ldr	r0, [pc, #32]	@ (8001190 <MX_I2C2_Init+0x9c>)
 8001170:	f003 fc45 	bl	80049fe <HAL_I2CEx_ConfigDigitalFilter>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <MX_I2C2_Init+0x92>
  {
	  Login_Write("Unaible to initialize I2C2 Digital filter! \r\n");
 800117a:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <MX_I2C2_Init+0xb4>)
 800117c:	f7ff fde6 	bl	8000d4c <Login_Write>
	  Error_Handler();
 8001180:	f000 f9f2 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001184:	e002      	b.n	800118c <MX_I2C2_Init+0x98>
	  Login_Write("Successfully initialized I2C2 Digital filter! \r\n");
 8001186:	4809      	ldr	r0, [pc, #36]	@ (80011ac <MX_I2C2_Init+0xb8>)
 8001188:	f7ff fde0 	bl	8000d4c <Login_Write>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000078 	.word	0x20000078
 8001194:	40005800 	.word	0x40005800
 8001198:	0800883c 	.word	0x0800883c
 800119c:	08008868 	.word	0x08008868
 80011a0:	08008898 	.word	0x08008898
 80011a4:	080088c8 	.word	0x080088c8
 80011a8:	080088f8 	.word	0x080088f8
 80011ac:	08008928 	.word	0x08008928

080011b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011d2:	4b3a      	ldr	r3, [pc, #232]	@ (80012bc <MX_ADC1_Init+0x10c>)
 80011d4:	4a3a      	ldr	r2, [pc, #232]	@ (80012c0 <MX_ADC1_Init+0x110>)
 80011d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011d8:	4b38      	ldr	r3, [pc, #224]	@ (80012bc <MX_ADC1_Init+0x10c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011de:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <MX_ADC1_Init+0x10c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e4:	4b35      	ldr	r3, [pc, #212]	@ (80012bc <MX_ADC1_Init+0x10c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ea:	4b34      	ldr	r3, [pc, #208]	@ (80012bc <MX_ADC1_Init+0x10c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f0:	4b32      	ldr	r3, [pc, #200]	@ (80012bc <MX_ADC1_Init+0x10c>)
 80011f2:	2204      	movs	r2, #4
 80011f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011f6:	4b31      	ldr	r3, [pc, #196]	@ (80012bc <MX_ADC1_Init+0x10c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011fc:	4b2f      	ldr	r3, [pc, #188]	@ (80012bc <MX_ADC1_Init+0x10c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001202:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <MX_ADC1_Init+0x10c>)
 8001204:	2201      	movs	r2, #1
 8001206:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001208:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <MX_ADC1_Init+0x10c>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001210:	4b2a      	ldr	r3, [pc, #168]	@ (80012bc <MX_ADC1_Init+0x10c>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001216:	4b29      	ldr	r3, [pc, #164]	@ (80012bc <MX_ADC1_Init+0x10c>)
 8001218:	2200      	movs	r2, #0
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800121c:	4b27      	ldr	r3, [pc, #156]	@ (80012bc <MX_ADC1_Init+0x10c>)
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001224:	4b25      	ldr	r3, [pc, #148]	@ (80012bc <MX_ADC1_Init+0x10c>)
 8001226:	2200      	movs	r2, #0
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800122a:	4b24      	ldr	r3, [pc, #144]	@ (80012bc <MX_ADC1_Init+0x10c>)
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001232:	4822      	ldr	r0, [pc, #136]	@ (80012bc <MX_ADC1_Init+0x10c>)
 8001234:	f001 f9a2 	bl	800257c <HAL_ADC_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d005      	beq.n	800124a <MX_ADC1_Init+0x9a>
  {
	  Login_Write("Unaible to initialize ADC1 Init! \r\n");
 800123e:	4821      	ldr	r0, [pc, #132]	@ (80012c4 <MX_ADC1_Init+0x114>)
 8001240:	f7ff fd84 	bl	8000d4c <Login_Write>
	  Error_Handler();
 8001244:	f000 f990 	bl	8001568 <Error_Handler>
 8001248:	e002      	b.n	8001250 <MX_ADC1_Init+0xa0>
  }
  else{
	  Login_Write("Successfully initialized ADC1 Init! \r\n");
 800124a:	481f      	ldr	r0, [pc, #124]	@ (80012c8 <MX_ADC1_Init+0x118>)
 800124c:	f7ff fd7e 	bl	8000d4c <Login_Write>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4818      	ldr	r0, [pc, #96]	@ (80012bc <MX_ADC1_Init+0x10c>)
 800125c:	f002 fb18 	bl	8003890 <HAL_ADCEx_MultiModeConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <MX_ADC1_Init+0xc2>
  {
	  Login_Write("Unaible to initialize ADC1 MultiModeConfigChannel! \r\n");
 8001266:	4819      	ldr	r0, [pc, #100]	@ (80012cc <MX_ADC1_Init+0x11c>)
 8001268:	f7ff fd70 	bl	8000d4c <Login_Write>
	  Error_Handler();
 800126c:	f000 f97c 	bl	8001568 <Error_Handler>
 8001270:	e002      	b.n	8001278 <MX_ADC1_Init+0xc8>
  }
  else{
	  Login_Write("Successfully initialized ADC1 MultiModeConfigChannel! \r\n");
 8001272:	4817      	ldr	r0, [pc, #92]	@ (80012d0 <MX_ADC1_Init+0x120>)
 8001274:	f7ff fd6a 	bl	8000d4c <Login_Write>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <MX_ADC1_Init+0x124>)
 800127a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127c:	2306      	movs	r3, #6
 800127e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001284:	237f      	movs	r3, #127	@ 0x7f
 8001286:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001288:	2304      	movs	r3, #4
 800128a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4809      	ldr	r0, [pc, #36]	@ (80012bc <MX_ADC1_Init+0x10c>)
 8001296:	f001 fe2b 	bl	8002ef0 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <MX_ADC1_Init+0xfc>
  {
	  Login_Write("Unaible to initialize ADC1 ConfigChannel! \r\n");
 80012a0:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <MX_ADC1_Init+0x128>)
 80012a2:	f7ff fd53 	bl	8000d4c <Login_Write>
	  Error_Handler();
 80012a6:	f000 f95f 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012aa:	e002      	b.n	80012b2 <MX_ADC1_Init+0x102>
	  Login_Write("Successfully initialized ADC1 ConfigChannel! \r\n");
 80012ac:	480b      	ldr	r0, [pc, #44]	@ (80012dc <MX_ADC1_Init+0x12c>)
 80012ae:	f7ff fd4d 	bl	8000d4c <Login_Write>
}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	@ 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200000cc 	.word	0x200000cc
 80012c0:	50040000 	.word	0x50040000
 80012c4:	0800895c 	.word	0x0800895c
 80012c8:	08008980 	.word	0x08008980
 80012cc:	080089a8 	.word	0x080089a8
 80012d0:	080089e0 	.word	0x080089e0
 80012d4:	25b00200 	.word	0x25b00200
 80012d8:	08008a1c 	.word	0x08008a1c
 80012dc:	08008a4c 	.word	0x08008a4c

080012e0 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_USART2_UART_Init+0x64>)
 80012e6:	4a18      	ldr	r2, [pc, #96]	@ (8001348 <MX_USART2_UART_Init+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <MX_USART2_UART_Init+0x64>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_USART2_UART_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <MX_USART2_UART_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_USART2_UART_Init+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <MX_USART2_UART_Init+0x64>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_USART2_UART_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_USART2_UART_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_USART2_UART_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_USART2_UART_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_UART_Init(&huart2) != HAL_OK){
 8001322:	4808      	ldr	r0, [pc, #32]	@ (8001344 <MX_USART2_UART_Init+0x64>)
 8001324:	f004 fed8 	bl	80060d8 <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <MX_USART2_UART_Init+0x5a>
  	  Login_Write("Unaible to initialize UART2 peripherial! \r\n");
 800132e:	4807      	ldr	r0, [pc, #28]	@ (800134c <MX_USART2_UART_Init+0x6c>)
 8001330:	f7ff fd0c 	bl	8000d4c <Login_Write>
      Error_Handler();
 8001334:	f000 f918 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001338:	e002      	b.n	8001340 <MX_USART2_UART_Init+0x60>
  	  Login_Write("Successfully initialized UART2 peripherial! \r\n");
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_USART2_UART_Init+0x70>)
 800133c:	f7ff fd06 	bl	8000d4c <Login_Write>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000130 	.word	0x20000130
 8001348:	40004400 	.word	0x40004400
 800134c:	08008a7c 	.word	0x08008a7c
 8001350:	08008aa8 	.word	0x08008aa8

08001354 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001358:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <MX_USART3_UART_Init+0x64>)
 800135a:	4a18      	ldr	r2, [pc, #96]	@ (80013bc <MX_USART3_UART_Init+0x68>)
 800135c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800135e:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <MX_USART3_UART_Init+0x64>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <MX_USART3_UART_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_USART3_UART_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_USART3_UART_Init+0x64>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_USART3_UART_Init+0x64>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <MX_USART3_UART_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_USART3_UART_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <MX_USART3_UART_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_USART3_UART_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001396:	4808      	ldr	r0, [pc, #32]	@ (80013b8 <MX_USART3_UART_Init+0x64>)
 8001398:	f004 fe9e 	bl	80060d8 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <MX_USART3_UART_Init+0x5a>
    {
  	  Login_Write("Unaible to initialize UART3 peripherial! \r\n");
 80013a2:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <MX_USART3_UART_Init+0x6c>)
 80013a4:	f7ff fcd2 	bl	8000d4c <Login_Write>
      Error_Handler();
 80013a8:	f000 f8de 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ac:	e002      	b.n	80013b4 <MX_USART3_UART_Init+0x60>
  	  Login_Write("Successfully initialized UART3 peripherial! \r\n");
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_USART3_UART_Init+0x70>)
 80013b0:	f7ff fccc 	bl	8000d4c <Login_Write>
}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200001b8 	.word	0x200001b8
 80013bc:	40004800 	.word	0x40004800
 80013c0:	08008ad8 	.word	0x08008ad8
 80013c4:	08008b04 	.word	0x08008b04

080013c8 <MX_UART4_Init>:
  * @retval None
  */


static void MX_UART4_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013cc:	4b17      	ldr	r3, [pc, #92]	@ (800142c <MX_UART4_Init+0x64>)
 80013ce:	4a18      	ldr	r2, [pc, #96]	@ (8001430 <MX_UART4_Init+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80013d2:	4b16      	ldr	r3, [pc, #88]	@ (800142c <MX_UART4_Init+0x64>)
 80013d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <MX_UART4_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <MX_UART4_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <MX_UART4_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <MX_UART4_Init+0x64>)
 80013ee:	220c      	movs	r2, #12
 80013f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <MX_UART4_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_UART4_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <MX_UART4_Init+0x64>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_UART4_Init+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800140a:	4808      	ldr	r0, [pc, #32]	@ (800142c <MX_UART4_Init+0x64>)
 800140c:	f004 fe64 	bl	80060d8 <HAL_UART_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <MX_UART4_Init+0x5a>
  {
	  Login_Write("Unaible to initialize UART4 peripherial! \r\n");
 8001416:	4807      	ldr	r0, [pc, #28]	@ (8001434 <MX_UART4_Init+0x6c>)
 8001418:	f7ff fc98 	bl	8000d4c <Login_Write>
      Error_Handler();
 800141c:	f000 f8a4 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001420:	e002      	b.n	8001428 <MX_UART4_Init+0x60>
	  Login_Write("Successfully initialized UART4 peripherial! \r\n");
 8001422:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_UART4_Init+0x70>)
 8001424:	f7ff fc92 	bl	8000d4c <Login_Write>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000240 	.word	0x20000240
 8001430:	40004c00 	.word	0x40004c00
 8001434:	08008b34 	.word	0x08008b34
 8001438:	08008b60 	.word	0x08008b60

0800143c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
 8001450:	611a      	str	r2, [r3, #16]
  HAL_StatusTypeDef gpio_status = HAL_ERROR; // Definiši statusnu promenljivu
 8001452:	2301      	movs	r3, #1
 8001454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b40      	ldr	r3, [pc, #256]	@ (800155c <MX_GPIO_Init+0x120>)
 800145a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145c:	4a3f      	ldr	r2, [pc, #252]	@ (800155c <MX_GPIO_Init+0x120>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001464:	4b3d      	ldr	r3, [pc, #244]	@ (800155c <MX_GPIO_Init+0x120>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001470:	4b3a      	ldr	r3, [pc, #232]	@ (800155c <MX_GPIO_Init+0x120>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	4a39      	ldr	r2, [pc, #228]	@ (800155c <MX_GPIO_Init+0x120>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147c:	4b37      	ldr	r3, [pc, #220]	@ (800155c <MX_GPIO_Init+0x120>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001488:	4b34      	ldr	r3, [pc, #208]	@ (800155c <MX_GPIO_Init+0x120>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	4a33      	ldr	r2, [pc, #204]	@ (800155c <MX_GPIO_Init+0x120>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001494:	4b31      	ldr	r3, [pc, #196]	@ (800155c <MX_GPIO_Init+0x120>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_UC_PORT, LED_UC_PIN|LED1_KIT_PIN, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 6102 	mov.w	r1, #2080	@ 0x820
 80014a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014aa:	f002 fddb 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_KIT_PORT, LED2_KIT_PIN, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014b4:	482a      	ldr	r0, [pc, #168]	@ (8001560 <MX_GPIO_Init+0x124>)
 80014b6:	f002 fdd5 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = ADC_PIN;
 80014ba:	2310      	movs	r3, #16
 80014bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80014be:	230b      	movs	r3, #11
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]


  /*Configure GPIO pins : PA5 */
  GPIO_InitStruct.Pin = LED_UC_PIN;
 80014c6:	2320      	movs	r3, #32
 80014c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_UC_PORT, &GPIO_InitStruct);
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e0:	f002 fc16 	bl	8003d10 <HAL_GPIO_Init>


  /*Configure GPIO pins : PA11 */
  GPIO_InitStruct.Pin = LED1_KIT_PIN;
 80014e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_KIT_PORT, &GPIO_InitStruct);
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001500:	f002 fc06 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = LED2_KIT_PIN;
 8001504:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_KIT_PORT, &GPIO_InitStruct);
 8001516:	f107 0310 	add.w	r3, r7, #16
 800151a:	4619      	mov	r1, r3
 800151c:	4810      	ldr	r0, [pc, #64]	@ (8001560 <MX_GPIO_Init+0x124>)
 800151e:	f002 fbf7 	bl	8003d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = BUTTON_PIN;
 8001522:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001528:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	4619      	mov	r1, r3
 8001538:	480a      	ldr	r0, [pc, #40]	@ (8001564 <MX_GPIO_Init+0x128>)
 800153a:	f002 fbe9 	bl	8003d10 <HAL_GPIO_Init>

  gpio_status = HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* Configuration NVIC for EXTI15_10 */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0); // Prioritet i podprioritet
 8001544:	2200      	movs	r2, #0
 8001546:	2105      	movs	r1, #5
 8001548:	2028      	movs	r0, #40	@ 0x28
 800154a:	f002 fb2c 	bl	8003ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn); // Omogući prekid
 800154e:	2028      	movs	r0, #40	@ 0x28
 8001550:	f002 fb45 	bl	8003bde <HAL_NVIC_EnableIRQ>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001554:	bf00      	nop
 8001556:	3728      	adds	r7, #40	@ 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	48000400 	.word	0x48000400
 8001564:	48000800 	.word	0x48000800

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();


  if (uart_error_status == USART3_ERROR) {
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <Error_Handler+0x60>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d10a      	bne.n	800158e <Error_Handler+0x26>
	  for (;;){
		  /* Led1->uC will be set if USART3 fails with sending or receiving */
		  HAL_GPIO_WritePin(LED_UC_PORT, LED_UC_PIN, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2120      	movs	r1, #32
 800157c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001580:	f002 fd70 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8001584:	20c8      	movs	r0, #200	@ 0xc8
 8001586:	f000 fddf 	bl	8002148 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_UC_PORT, LED_UC_PIN, GPIO_PIN_SET);
 800158a:	bf00      	nop
 800158c:	e7f4      	b.n	8001578 <Error_Handler+0x10>
	  }
  }
  else if (uart_error_status == USART2_ERROR){
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <Error_Handler+0x60>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d10a      	bne.n	80015ac <Error_Handler+0x44>
	  for (;;){
		  /* Led2->kit will be set if USART2 fails with sending or receiving */
		  HAL_GPIO_WritePin(LED2_KIT_PORT, LED2_KIT_PIN, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800159c:	480b      	ldr	r0, [pc, #44]	@ (80015cc <Error_Handler+0x64>)
 800159e:	f002 fd61 	bl	8004064 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 80015a2:	20c8      	movs	r0, #200	@ 0xc8
 80015a4:	f000 fdd0 	bl	8002148 <HAL_Delay>
		  HAL_GPIO_WritePin(LED2_KIT_PORT, LED2_KIT_PIN, GPIO_PIN_SET);
 80015a8:	bf00      	nop
 80015aa:	e7f4      	b.n	8001596 <Error_Handler+0x2e>
	  }
  }
  else if (uart_error_status = UART4_ERROR || logging == LOGGING_ERROR){
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <Error_Handler+0x60>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
	  for(;;){
		  HAL_GPIO_TogglePin(LED1_KIT_PORT, LED1_KIT_PIN);
 80015b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ba:	f002 fd6b 	bl	8004094 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 80015be:	20c8      	movs	r0, #200	@ 0xc8
 80015c0:	f000 fdc2 	bl	8002148 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED1_KIT_PORT, LED1_KIT_PIN);
 80015c4:	bf00      	nop
 80015c6:	e7f4      	b.n	80015b2 <Error_Handler+0x4a>
 80015c8:	200002f0 	.word	0x200002f0
 80015cc:	48000400 	.word	0x48000400

080015d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <HAL_MspInit+0x44>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015da:	4a0e      	ldr	r2, [pc, #56]	@ (8001614 <HAL_MspInit+0x44>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <HAL_MspInit+0x44>)
 80015e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_MspInit+0x44>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	4a08      	ldr	r2, [pc, #32]	@ (8001614 <HAL_MspInit+0x44>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_MspInit+0x44>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000

08001618 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b0ac      	sub	sp, #176	@ 0xb0
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2288      	movs	r2, #136	@ 0x88
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f006 fb21 	bl	8007c80 <memset>
  if(hadc->Instance==ADC1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a2b      	ldr	r2, [pc, #172]	@ (80016f0 <HAL_ADC_MspInit+0xd8>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d14f      	bne.n	80016e8 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001648:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800164c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800164e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001656:	2301      	movs	r3, #1
 8001658:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800165a:	2301      	movs	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800165e:	2308      	movs	r3, #8
 8001660:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001662:	2307      	movs	r3, #7
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001666:	2302      	movs	r3, #2
 8001668:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800166a:	2302      	movs	r3, #2
 800166c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800166e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001672:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4618      	mov	r0, r3
 800167a:	f004 f871 	bl	8005760 <HAL_RCCEx_PeriphCLKConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001684:	f7ff ff70 	bl	8001568 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <HAL_ADC_MspInit+0xdc>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168c:	4a19      	ldr	r2, [pc, #100]	@ (80016f4 <HAL_ADC_MspInit+0xdc>)
 800168e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001692:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001694:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <HAL_ADC_MspInit+0xdc>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001698:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <HAL_ADC_MspInit+0xdc>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a4:	4a13      	ldr	r2, [pc, #76]	@ (80016f4 <HAL_ADC_MspInit+0xdc>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <HAL_ADC_MspInit+0xdc>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016b8:	2310      	movs	r3, #16
 80016ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016be:	230b      	movs	r3, #11
 80016c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016ce:	4619      	mov	r1, r3
 80016d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d4:	f002 fb1c 	bl	8003d10 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2012      	movs	r0, #18
 80016de:	f002 fa62 	bl	8003ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016e2:	2012      	movs	r0, #18
 80016e4:	f002 fa7b 	bl	8003bde <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016e8:	bf00      	nop
 80016ea:	37b0      	adds	r7, #176	@ 0xb0
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	50040000 	.word	0x50040000
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0ac      	sub	sp, #176	@ 0xb0
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2288      	movs	r2, #136	@ 0x88
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f006 fab1 	bl	8007c80 <memset>
  if(hi2c->Instance==I2C2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a25      	ldr	r2, [pc, #148]	@ (80017b8 <HAL_I2C_MspInit+0xc0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d143      	bne.n	80017b0 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001728:	2380      	movs	r3, #128	@ 0x80
 800172a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800172c:	2300      	movs	r3, #0
 800172e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4618      	mov	r0, r3
 8001736:	f004 f813 	bl	8005760 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001740:	f7ff ff12 	bl	8001568 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	4b1d      	ldr	r3, [pc, #116]	@ (80017bc <HAL_I2C_MspInit+0xc4>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001748:	4a1c      	ldr	r2, [pc, #112]	@ (80017bc <HAL_I2C_MspInit+0xc4>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001750:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <HAL_I2C_MspInit+0xc4>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800175c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001760:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001764:	2312      	movs	r3, #18
 8001766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001776:	2304      	movs	r3, #4
 8001778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001780:	4619      	mov	r1, r3
 8001782:	480f      	ldr	r0, [pc, #60]	@ (80017c0 <HAL_I2C_MspInit+0xc8>)
 8001784:	f002 fac4 	bl	8003d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <HAL_I2C_MspInit+0xc4>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	4a0b      	ldr	r2, [pc, #44]	@ (80017bc <HAL_I2C_MspInit+0xc4>)
 800178e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001792:	6593      	str	r3, [r2, #88]	@ 0x58
 8001794:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <HAL_I2C_MspInit+0xc4>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2021      	movs	r0, #33	@ 0x21
 80017a6:	f002 f9fe 	bl	8003ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80017aa:	2021      	movs	r0, #33	@ 0x21
 80017ac:	f002 fa17 	bl	8003bde <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80017b0:	bf00      	nop
 80017b2:	37b0      	adds	r7, #176	@ 0xb0
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40005800 	.word	0x40005800
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48000400 	.word	0x48000400

080017c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0b0      	sub	sp, #192	@ 0xc0
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e0:	2288      	movs	r2, #136	@ 0x88
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f006 fa4b 	bl	8007c80 <memset>
  if(huart->Instance==UART4)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a6f      	ldr	r2, [pc, #444]	@ (80019ac <HAL_UART_MspInit+0x1e8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d144      	bne.n	800187e <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80017f4:	2308      	movs	r3, #8
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001800:	4618      	mov	r0, r3
 8001802:	f003 ffad 	bl	8005760 <HAL_RCCEx_PeriphCLKConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800180c:	f7ff feac 	bl	8001568 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001810:	4b67      	ldr	r3, [pc, #412]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	4a66      	ldr	r2, [pc, #408]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 8001816:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800181a:	6593      	str	r3, [r2, #88]	@ 0x58
 800181c:	4b64      	ldr	r3, [pc, #400]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001824:	623b      	str	r3, [r7, #32]
 8001826:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	4b61      	ldr	r3, [pc, #388]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182c:	4a60      	ldr	r2, [pc, #384]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001834:	4b5e      	ldr	r3, [pc, #376]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001840:	2303      	movs	r3, #3
 8001842:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001858:	2308      	movs	r3, #8
 800185a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001862:	4619      	mov	r1, r3
 8001864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001868:	f002 fa52 	bl	8003d10 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2034      	movs	r0, #52	@ 0x34
 8001872:	f002 f998 	bl	8003ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001876:	2034      	movs	r0, #52	@ 0x34
 8001878:	f002 f9b1 	bl	8003bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800187c:	e091      	b.n	80019a2 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a4c      	ldr	r2, [pc, #304]	@ (80019b4 <HAL_UART_MspInit+0x1f0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d144      	bne.n	8001912 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001888:	2302      	movs	r3, #2
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800188c:	2300      	movs	r3, #0
 800188e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001894:	4618      	mov	r0, r3
 8001896:	f003 ff63 	bl	8005760 <HAL_RCCEx_PeriphCLKConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80018a0:	f7ff fe62 	bl	8001568 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018a4:	4b42      	ldr	r3, [pc, #264]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	4a41      	ldr	r2, [pc, #260]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 80018aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80018b0:	4b3f      	ldr	r3, [pc, #252]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 80018b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b8:	61bb      	str	r3, [r7, #24]
 80018ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b3c      	ldr	r3, [pc, #240]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 80018be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c0:	4a3b      	ldr	r2, [pc, #236]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c8:	4b39      	ldr	r3, [pc, #228]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d4:	230c      	movs	r3, #12
 80018d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ec:	2307      	movs	r3, #7
 80018ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fc:	f002 fa08 	bl	8003d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	2026      	movs	r0, #38	@ 0x26
 8001906:	f002 f94e 	bl	8003ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800190a:	2026      	movs	r0, #38	@ 0x26
 800190c:	f002 f967 	bl	8003bde <HAL_NVIC_EnableIRQ>
}
 8001910:	e047      	b.n	80019a2 <HAL_UART_MspInit+0x1de>
  else if(huart->Instance==USART3)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a28      	ldr	r2, [pc, #160]	@ (80019b8 <HAL_UART_MspInit+0x1f4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d142      	bne.n	80019a2 <HAL_UART_MspInit+0x1de>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800191c:	2304      	movs	r3, #4
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001920:	2300      	movs	r3, #0
 8001922:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001928:	4618      	mov	r0, r3
 800192a:	f003 ff19 	bl	8005760 <HAL_RCCEx_PeriphCLKConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_UART_MspInit+0x174>
      Error_Handler();
 8001934:	f7ff fe18 	bl	8001568 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001938:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193c:	4a1c      	ldr	r2, [pc, #112]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 800193e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001942:	6593      	str	r3, [r2, #88]	@ 0x58
 8001944:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001948:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001950:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001954:	4a16      	ldr	r2, [pc, #88]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195c:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <HAL_UART_MspInit+0x1ec>)
 800195e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001968:	2330      	movs	r3, #48	@ 0x30
 800196a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001980:	2307      	movs	r3, #7
 8001982:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001986:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800198a:	4619      	mov	r1, r3
 800198c:	480b      	ldr	r0, [pc, #44]	@ (80019bc <HAL_UART_MspInit+0x1f8>)
 800198e:	f002 f9bf 	bl	8003d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2027      	movs	r0, #39	@ 0x27
 8001998:	f002 f905 	bl	8003ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800199c:	2027      	movs	r0, #39	@ 0x27
 800199e:	f002 f91e 	bl	8003bde <HAL_NVIC_EnableIRQ>
}
 80019a2:	bf00      	nop
 80019a4:	37c0      	adds	r7, #192	@ 0xc0
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40004c00 	.word	0x40004c00
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40004400 	.word	0x40004400
 80019b8:	40004800 	.word	0x40004800
 80019bc:	48000800 	.word	0x48000800

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <NMI_Handler+0x4>

080019c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <HardFault_Handler+0x4>

080019d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <MemManage_Handler+0x4>

080019d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a16:	f000 fb77 	bl	8002108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <ADC1_2_IRQHandler+0x10>)
 8001a26:	f001 f835 	bl	8002a94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200000cc 	.word	0x200000cc

08001a34 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <I2C2_EV_IRQHandler+0x10>)
 8001a3a:	f002 fd0d 	bl	8004458 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000078 	.word	0x20000078

08001a48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <USART2_IRQHandler+0x10>)
 8001a4e:	f004 fd3d 	bl	80064cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000130 	.word	0x20000130

08001a5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <USART3_IRQHandler+0x10>)
 8001a62:	f004 fd33 	bl	80064cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200001b8 	.word	0x200001b8

08001a70 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <UART4_IRQHandler+0x10>)
 8001a76:	f004 fd29 	bl	80064cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000240 	.word	0x20000240

08001a84 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
    // Obrađujemo sve pinove od 10 do 15 na EXTI liniji
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET) {
 8001a88:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <EXTI15_10_IRQHandler+0x80>)
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <EXTI15_10_IRQHandler+0x18>
        // Tvoj kod za pin 10
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);  // Obrada za GPIO_PIN_10
 8001a94:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a98:	f002 fb16 	bl	80040c8 <HAL_GPIO_EXTI_IRQHandler>
    }
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET) {
 8001a9c:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <EXTI15_10_IRQHandler+0x80>)
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <EXTI15_10_IRQHandler+0x2c>
        // Tvoj kod za pin 11
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);  // Obrada za GPIO_PIN_11
 8001aa8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001aac:	f002 fb0c 	bl	80040c8 <HAL_GPIO_EXTI_IRQHandler>
    }
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET) {
 8001ab0:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <EXTI15_10_IRQHandler+0x80>)
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <EXTI15_10_IRQHandler+0x40>
        // Tvoj kod za pin 12
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);  // Obrada za GPIO_PIN_12
 8001abc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001ac0:	f002 fb02 	bl	80040c8 <HAL_GPIO_EXTI_IRQHandler>
    }
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) {
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <EXTI15_10_IRQHandler+0x80>)
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <EXTI15_10_IRQHandler+0x54>
        // Tvoj kod za pin 13
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);  // Obrada za GPIO_PIN_13
 8001ad0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ad4:	f002 faf8 	bl	80040c8 <HAL_GPIO_EXTI_IRQHandler>
    }
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) {
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <EXTI15_10_IRQHandler+0x80>)
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <EXTI15_10_IRQHandler+0x68>
        // Tvoj kod za pin 14
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);  // Obrada za GPIO_PIN_14
 8001ae4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ae8:	f002 faee 	bl	80040c8 <HAL_GPIO_EXTI_IRQHandler>
    }
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET) {
 8001aec:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <EXTI15_10_IRQHandler+0x80>)
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <EXTI15_10_IRQHandler+0x7c>
        // Tvoj kod za pin 15
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);  // Obrada za GPIO_PIN_15
 8001af8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001afc:	f002 fae4 	bl	80040c8 <HAL_GPIO_EXTI_IRQHandler>
    }
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40010400 	.word	0x40010400

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	@ (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	@ (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f006 f8aa 	bl	8007c90 <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	@ (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20018000 	.word	0x20018000
 8001b68:	00000400 	.word	0x00000400
 8001b6c:	20000324 	.word	0x20000324
 8001b70:	20000880 	.word	0x20000880

08001b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b78:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <SystemInit+0x20>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b7e:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <SystemInit+0x20>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b9c:	f7ff ffea 	bl	8001b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba0:	480c      	ldr	r0, [pc, #48]	@ (8001bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba2:	490d      	ldr	r1, [pc, #52]	@ (8001bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <LoopForever+0xe>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba8:	e002      	b.n	8001bb0 <LoopCopyDataInit>

08001baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bae:	3304      	adds	r3, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb4:	d3f9      	bcc.n	8001baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001be4 <LoopForever+0x16>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bbc:	e001      	b.n	8001bc2 <LoopFillZerobss>

08001bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc0:	3204      	adds	r2, #4

08001bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc4:	d3fb      	bcc.n	8001bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f006 f869 	bl	8007c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bca:	f7ff f8df 	bl	8000d8c <main>

08001bce <LoopForever>:

LoopForever:
    b LoopForever
 8001bce:	e7fe      	b.n	8001bce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001bdc:	08009394 	.word	0x08009394
  ldr r2, =_sbss
 8001be0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001be4:	2000087c 	.word	0x2000087c

08001be8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC3_IRQHandler>

08001bea <ssd1306_Reset>:

#if defined(SSD1306_USE_I2C)



void ssd1306_Reset(void) {
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af04      	add	r7, sp, #16
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	1dfb      	adds	r3, r7, #7
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	2301      	movs	r3, #1
 8001c12:	2200      	movs	r2, #0
 8001c14:	2178      	movs	r1, #120	@ 0x78
 8001c16:	4803      	ldr	r0, [pc, #12]	@ (8001c24 <ssd1306_WriteCommand+0x2c>)
 8001c18:	f002 fb0a 	bl	8004230 <HAL_I2C_Mem_Write>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000078 	.word	0x20000078

08001c28 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af04      	add	r7, sp, #16
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3a:	9202      	str	r2, [sp, #8]
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2301      	movs	r3, #1
 8001c44:	2240      	movs	r2, #64	@ 0x40
 8001c46:	2178      	movs	r1, #120	@ 0x78
 8001c48:	4803      	ldr	r0, [pc, #12]	@ (8001c58 <ssd1306_WriteData+0x30>)
 8001c4a:	f002 faf1 	bl	8004230 <HAL_I2C_Mem_Write>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000078 	.word	0x20000078

08001c5c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
OLED_Init_t ssd1306_Init(void) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c60:	f7ff ffc3 	bl	8001bea <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c64:	2064      	movs	r0, #100	@ 0x64
 8001c66:	f000 fa6f 	bl	8002148 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f000 f9da 	bl	8002024 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c70:	2020      	movs	r0, #32
 8001c72:	f7ff ffc1 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff ffbe 	bl	8001bf8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c7c:	20b0      	movs	r0, #176	@ 0xb0
 8001c7e:	f7ff ffbb 	bl	8001bf8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c82:	20c8      	movs	r0, #200	@ 0xc8
 8001c84:	f7ff ffb8 	bl	8001bf8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff ffb5 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c8e:	2010      	movs	r0, #16
 8001c90:	f7ff ffb2 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c94:	2040      	movs	r0, #64	@ 0x40
 8001c96:	f7ff ffaf 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c9a:	20ff      	movs	r0, #255	@ 0xff
 8001c9c:	f000 f9ae 	bl	8001ffc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ca0:	20a1      	movs	r0, #161	@ 0xa1
 8001ca2:	f7ff ffa9 	bl	8001bf8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001ca6:	20a6      	movs	r0, #166	@ 0xa6
 8001ca8:	f7ff ffa6 	bl	8001bf8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001cac:	20a8      	movs	r0, #168	@ 0xa8
 8001cae:	f7ff ffa3 	bl	8001bf8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001cb2:	203f      	movs	r0, #63	@ 0x3f
 8001cb4:	f7ff ffa0 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001cb8:	20a4      	movs	r0, #164	@ 0xa4
 8001cba:	f7ff ff9d 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001cbe:	20d3      	movs	r0, #211	@ 0xd3
 8001cc0:	f7ff ff9a 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7ff ff97 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001cca:	20d5      	movs	r0, #213	@ 0xd5
 8001ccc:	f7ff ff94 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001cd0:	20f0      	movs	r0, #240	@ 0xf0
 8001cd2:	f7ff ff91 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001cd6:	20d9      	movs	r0, #217	@ 0xd9
 8001cd8:	f7ff ff8e 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001cdc:	2022      	movs	r0, #34	@ 0x22
 8001cde:	f7ff ff8b 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001ce2:	20da      	movs	r0, #218	@ 0xda
 8001ce4:	f7ff ff88 	bl	8001bf8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ce8:	2012      	movs	r0, #18
 8001cea:	f7ff ff85 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001cee:	20db      	movs	r0, #219	@ 0xdb
 8001cf0:	f7ff ff82 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001cf4:	2020      	movs	r0, #32
 8001cf6:	f7ff ff7f 	bl	8001bf8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001cfa:	208d      	movs	r0, #141	@ 0x8d
 8001cfc:	f7ff ff7c 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001d00:	2014      	movs	r0, #20
 8001d02:	f7ff ff79 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001d06:	2001      	movs	r0, #1
 8001d08:	f000 f98c 	bl	8002024 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f000 f811 	bl	8001d34 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001d12:	f000 f827 	bl	8001d64 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <ssd1306_Init+0xd4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <ssd1306_Init+0xd4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001d22:	4b03      	ldr	r3, [pc, #12]	@ (8001d30 <ssd1306_Init+0xd4>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	711a      	strb	r2, [r3, #4]


    return INITIALIZED_OLED_INIT_SUCCESSFULLY;
 8001d28:	2302      	movs	r3, #2
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000728 	.word	0x20000728

08001d34 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <ssd1306_Fill+0x14>
 8001d44:	2300      	movs	r3, #0
 8001d46:	e000      	b.n	8001d4a <ssd1306_Fill+0x16>
 8001d48:	23ff      	movs	r3, #255	@ 0xff
 8001d4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4803      	ldr	r0, [pc, #12]	@ (8001d60 <ssd1306_Fill+0x2c>)
 8001d52:	f005 ff95 	bl	8007c80 <memset>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000328 	.word	0x20000328

08001d64 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
OLED_UpdateScreen_t ssd1306_UpdateScreen(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	e016      	b.n	8001d9e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	3b50      	subs	r3, #80	@ 0x50
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff3e 	bl	8001bf8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff ff3b 	bl	8001bf8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d82:	2010      	movs	r0, #16
 8001d84:	f7ff ff38 	bl	8001bf8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	01db      	lsls	r3, r3, #7
 8001d8c:	4a08      	ldr	r2, [pc, #32]	@ (8001db0 <ssd1306_UpdateScreen+0x4c>)
 8001d8e:	4413      	add	r3, r2
 8001d90:	2180      	movs	r1, #128	@ 0x80
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ff48 	bl	8001c28 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	2b07      	cmp	r3, #7
 8001da2:	d9e5      	bls.n	8001d70 <ssd1306_UpdateScreen+0xc>
    }
    return INITIALIZED_OLED_UPDATE_SCREEN_SUCCESSFULLY;
 8001da4:	2302      	movs	r3, #2
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000328 	.word	0x20000328

08001db4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	71bb      	strb	r3, [r7, #6]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db3d      	blt.n	8001e4a <ssd1306_DrawPixel+0x96>
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001dd2:	d83a      	bhi.n	8001e4a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001dd4:	797b      	ldrb	r3, [r7, #5]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d11a      	bne.n	8001e10 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dda:	79fa      	ldrb	r2, [r7, #7]
 8001ddc:	79bb      	ldrb	r3, [r7, #6]
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	b2d8      	uxtb	r0, r3
 8001de2:	4603      	mov	r3, r0
 8001de4:	01db      	lsls	r3, r3, #7
 8001de6:	4413      	add	r3, r2
 8001de8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e58 <ssd1306_DrawPixel+0xa4>)
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
 8001dec:	b25a      	sxtb	r2, r3
 8001dee:	79bb      	ldrb	r3, [r7, #6]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	2101      	movs	r1, #1
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	b259      	sxtb	r1, r3
 8001e00:	79fa      	ldrb	r2, [r7, #7]
 8001e02:	4603      	mov	r3, r0
 8001e04:	01db      	lsls	r3, r3, #7
 8001e06:	4413      	add	r3, r2
 8001e08:	b2c9      	uxtb	r1, r1
 8001e0a:	4a13      	ldr	r2, [pc, #76]	@ (8001e58 <ssd1306_DrawPixel+0xa4>)
 8001e0c:	54d1      	strb	r1, [r2, r3]
 8001e0e:	e01d      	b.n	8001e4c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e10:	79fa      	ldrb	r2, [r7, #7]
 8001e12:	79bb      	ldrb	r3, [r7, #6]
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	b2d8      	uxtb	r0, r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	01db      	lsls	r3, r3, #7
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e58 <ssd1306_DrawPixel+0xa4>)
 8001e20:	5cd3      	ldrb	r3, [r2, r3]
 8001e22:	b25a      	sxtb	r2, r3
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	b25b      	sxtb	r3, r3
 8001e36:	4013      	ands	r3, r2
 8001e38:	b259      	sxtb	r1, r3
 8001e3a:	79fa      	ldrb	r2, [r7, #7]
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	01db      	lsls	r3, r3, #7
 8001e40:	4413      	add	r3, r2
 8001e42:	b2c9      	uxtb	r1, r1
 8001e44:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <ssd1306_DrawPixel+0xa4>)
 8001e46:	54d1      	strb	r1, [r2, r3]
 8001e48:	e000      	b.n	8001e4c <ssd1306_DrawPixel+0x98>
        return;
 8001e4a:	bf00      	nop
    }
}
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000328 	.word	0x20000328

08001e5c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b089      	sub	sp, #36	@ 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4604      	mov	r4, r0
 8001e64:	4638      	mov	r0, r7
 8001e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	2b1f      	cmp	r3, #31
 8001e72:	d902      	bls.n	8001e7a <ssd1306_WriteChar+0x1e>
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	2b7e      	cmp	r3, #126	@ 0x7e
 8001e78:	d901      	bls.n	8001e7e <ssd1306_WriteChar+0x22>
        return 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	e077      	b.n	8001f6e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f78 <ssd1306_WriteChar+0x11c>)
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	783b      	ldrb	r3, [r7, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	2b80      	cmp	r3, #128	@ 0x80
 8001e8a:	dc06      	bgt.n	8001e9a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f78 <ssd1306_WriteChar+0x11c>)
 8001e8e:	885b      	ldrh	r3, [r3, #2]
 8001e90:	461a      	mov	r2, r3
 8001e92:	787b      	ldrb	r3, [r7, #1]
 8001e94:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001e96:	2b40      	cmp	r3, #64	@ 0x40
 8001e98:	dd01      	ble.n	8001e9e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e067      	b.n	8001f6e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	e04e      	b.n	8001f42 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	3b20      	subs	r3, #32
 8001eaa:	7879      	ldrb	r1, [r7, #1]
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	440b      	add	r3, r1
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	e036      	b.n	8001f32 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ed4:	4b28      	ldr	r3, [pc, #160]	@ (8001f78 <ssd1306_WriteChar+0x11c>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2d8      	uxtb	r0, r3
 8001ee2:	4b25      	ldr	r3, [pc, #148]	@ (8001f78 <ssd1306_WriteChar+0x11c>)
 8001ee4:	885b      	ldrh	r3, [r3, #2]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7ff ff5d 	bl	8001db4 <ssd1306_DrawPixel>
 8001efa:	e017      	b.n	8001f2c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001efc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f78 <ssd1306_WriteChar+0x11c>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	b2d8      	uxtb	r0, r3
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f78 <ssd1306_WriteChar+0x11c>)
 8001f0c:	885b      	ldrh	r3, [r3, #2]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	b2d9      	uxtb	r1, r3
 8001f18:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	f7ff ff44 	bl	8001db4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	783b      	ldrb	r3, [r7, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d3c3      	bcc.n	8001ec4 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	787b      	ldrb	r3, [r7, #1]
 8001f44:	461a      	mov	r2, r3
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d3ab      	bcc.n	8001ea4 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <ssd1306_WriteChar+0x11c>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	2a00      	cmp	r2, #0
 8001f54:	d005      	beq.n	8001f62 <ssd1306_WriteChar+0x106>
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	3a20      	subs	r2, #32
 8001f5c:	440a      	add	r2, r1
 8001f5e:	7812      	ldrb	r2, [r2, #0]
 8001f60:	e000      	b.n	8001f64 <ssd1306_WriteChar+0x108>
 8001f62:	783a      	ldrb	r2, [r7, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <ssd1306_WriteChar+0x11c>)
 8001f6a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	@ 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd90      	pop	{r4, r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000728 	.word	0x20000728

08001f7c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	4638      	mov	r0, r7
 8001f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001f8a:	e013      	b.n	8001fb4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	7818      	ldrb	r0, [r3, #0]
 8001f90:	7e3b      	ldrb	r3, [r7, #24]
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	463b      	mov	r3, r7
 8001f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f98:	f7ff ff60 	bl	8001e5c <ssd1306_WriteChar>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d002      	beq.n	8001fae <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	e008      	b.n	8001fc0 <ssd1306_WriteString+0x44>
        }
        str++;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1e7      	bne.n	8001f8c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <ssd1306_SetCursor>:

/* Position the cursor */
OLED_SetCursor_t ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	460a      	mov	r2, r1
 8001fd2:	71fb      	strb	r3, [r7, #7]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <ssd1306_SetCursor+0x30>)
 8001fde:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001fe0:	79bb      	ldrb	r3, [r7, #6]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <ssd1306_SetCursor+0x30>)
 8001fe6:	805a      	strh	r2, [r3, #2]
    return INITIALIZED_OLED_CURSOR_SUCCESSFULLY;
 8001fe8:	2302      	movs	r3, #2
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000728 	.word	0x20000728

08001ffc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002006:	2381      	movs	r3, #129	@ 0x81
 8002008:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fdf3 	bl	8001bf8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fdef 	bl	8001bf8 <ssd1306_WriteCommand>
}
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002034:	23af      	movs	r3, #175	@ 0xaf
 8002036:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002038:	4b08      	ldr	r3, [pc, #32]	@ (800205c <ssd1306_SetDisplayOn+0x38>)
 800203a:	2201      	movs	r2, #1
 800203c:	715a      	strb	r2, [r3, #5]
 800203e:	e004      	b.n	800204a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002040:	23ae      	movs	r3, #174	@ 0xae
 8002042:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <ssd1306_SetDisplayOn+0x38>)
 8002046:	2200      	movs	r2, #0
 8002048:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fdd3 	bl	8001bf8 <ssd1306_WriteCommand>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000728 	.word	0x20000728

08002060 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206a:	2003      	movs	r0, #3
 800206c:	f001 fd90 	bl	8003b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002070:	200f      	movs	r0, #15
 8002072:	f000 f80d 	bl	8002090 <HAL_InitTick>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	e001      	b.n	8002086 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002082:	f7ff faa5 	bl	80015d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002086:	79fb      	ldrb	r3, [r7, #7]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800209c:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <HAL_InitTick+0x6c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d023      	beq.n	80020ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020a4:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <HAL_InitTick+0x70>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <HAL_InitTick+0x6c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 fd9d 	bl	8003bfa <HAL_SYSTICK_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10f      	bne.n	80020e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b0f      	cmp	r3, #15
 80020ca:	d809      	bhi.n	80020e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020cc:	2200      	movs	r2, #0
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f001 fd67 	bl	8003ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <HAL_InitTick+0x74>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e007      	b.n	80020f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e004      	b.n	80020f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	e001      	b.n	80020f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000008 	.word	0x20000008
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004

08002108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <HAL_IncTick+0x20>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	461a      	mov	r2, r3
 8002112:	4b06      	ldr	r3, [pc, #24]	@ (800212c <HAL_IncTick+0x24>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	4a04      	ldr	r2, [pc, #16]	@ (800212c <HAL_IncTick+0x24>)
 800211a:	6013      	str	r3, [r2, #0]
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000008 	.word	0x20000008
 800212c:	20000730 	.word	0x20000730

08002130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return uwTick;
 8002134:	4b03      	ldr	r3, [pc, #12]	@ (8002144 <HAL_GetTick+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000730 	.word	0x20000730

08002148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002150:	f7ff ffee 	bl	8002130 <HAL_GetTick>
 8002154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d005      	beq.n	800216e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002162:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <HAL_Delay+0x44>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800216e:	bf00      	nop
 8002170:	f7ff ffde 	bl	8002130 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d8f7      	bhi.n	8002170 <HAL_Delay+0x28>
  {
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000008 	.word	0x20000008

08002190 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	609a      	str	r2, [r3, #8]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	609a      	str	r2, [r3, #8]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3360      	adds	r3, #96	@ 0x60
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <LL_ADC_SetOffset+0x44>)
 800221a:	4013      	ands	r3, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	4313      	orrs	r3, r2
 8002228:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	03fff000 	.word	0x03fff000

08002240 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3360      	adds	r3, #96	@ 0x60
 800224e:	461a      	mov	r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3360      	adds	r3, #96	@ 0x60
 800227c:	461a      	mov	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	431a      	orrs	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3330      	adds	r3, #48	@ 0x30
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	4413      	add	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	211f      	movs	r1, #31
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	401a      	ands	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	0e9b      	lsrs	r3, r3, #26
 8002300:	f003 011f 	and.w	r1, r3, #31
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	431a      	orrs	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002314:	bf00      	nop
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002346:	b480      	push	{r7}
 8002348:	b087      	sub	sp, #28
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	3314      	adds	r3, #20
 8002356:	461a      	mov	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	0e5b      	lsrs	r3, r3, #25
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	4413      	add	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	0d1b      	lsrs	r3, r3, #20
 800236e:	f003 031f 	and.w	r3, r3, #31
 8002372:	2107      	movs	r1, #7
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	401a      	ands	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	0d1b      	lsrs	r3, r3, #20
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	431a      	orrs	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002390:	bf00      	nop
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b4:	43db      	mvns	r3, r3
 80023b6:	401a      	ands	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0318 	and.w	r3, r3, #24
 80023be:	4908      	ldr	r1, [pc, #32]	@ (80023e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023c0:	40d9      	lsrs	r1, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	400b      	ands	r3, r1
 80023c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ca:	431a      	orrs	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	0007ffff 	.word	0x0007ffff

080023e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 031f 	and.w	r3, r3, #31
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800242c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6093      	str	r3, [r2, #8]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002454:	d101      	bne.n	800245a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002478:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800247c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024a4:	d101      	bne.n	80024aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024cc:	f043 0201 	orr.w	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <LL_ADC_IsEnabled+0x18>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <LL_ADC_IsEnabled+0x1a>
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002516:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800251a:	f043 0204 	orr.w	r2, r3, #4
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d101      	bne.n	8002546 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b08      	cmp	r3, #8
 8002566:	d101      	bne.n	800256c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b089      	sub	sp, #36	@ 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e130      	b.n	80027f8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d109      	bne.n	80025b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff f837 	bl	8001618 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff3f 	bl	8002440 <LL_ADC_IsDeepPowerDownEnabled>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff25 	bl	800241c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ff5a 	bl	8002490 <LL_ADC_IsInternalRegulatorEnabled>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d115      	bne.n	800260e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff3e 	bl	8002468 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025ec:	4b84      	ldr	r3, [pc, #528]	@ (8002800 <HAL_ADC_Init+0x284>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	4a84      	ldr	r2, [pc, #528]	@ (8002804 <HAL_ADC_Init+0x288>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002600:	e002      	b.n	8002608 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3b01      	subs	r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f9      	bne.n	8002602 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff3c 	bl	8002490 <LL_ADC_IsInternalRegulatorEnabled>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10d      	bne.n	800263a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002622:	f043 0210 	orr.w	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff75 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002644:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 80c9 	bne.w	80027e6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 80c5 	bne.w	80027e6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002660:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002664:	f043 0202 	orr.w	r2, r3, #2
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff35 	bl	80024e0 <LL_ADC_IsEnabled>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d115      	bne.n	80026a8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800267c:	4862      	ldr	r0, [pc, #392]	@ (8002808 <HAL_ADC_Init+0x28c>)
 800267e:	f7ff ff2f 	bl	80024e0 <LL_ADC_IsEnabled>
 8002682:	4604      	mov	r4, r0
 8002684:	4861      	ldr	r0, [pc, #388]	@ (800280c <HAL_ADC_Init+0x290>)
 8002686:	f7ff ff2b 	bl	80024e0 <LL_ADC_IsEnabled>
 800268a:	4603      	mov	r3, r0
 800268c:	431c      	orrs	r4, r3
 800268e:	4860      	ldr	r0, [pc, #384]	@ (8002810 <HAL_ADC_Init+0x294>)
 8002690:	f7ff ff26 	bl	80024e0 <LL_ADC_IsEnabled>
 8002694:	4603      	mov	r3, r0
 8002696:	4323      	orrs	r3, r4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d105      	bne.n	80026a8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4619      	mov	r1, r3
 80026a2:	485c      	ldr	r0, [pc, #368]	@ (8002814 <HAL_ADC_Init+0x298>)
 80026a4:	f7ff fd74 	bl	8002190 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7e5b      	ldrb	r3, [r3, #25]
 80026ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d106      	bne.n	80026e4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	3b01      	subs	r3, #1
 80026dc:	045b      	lsls	r3, r3, #17
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	4b44      	ldr	r3, [pc, #272]	@ (8002818 <HAL_ADC_Init+0x29c>)
 8002708:	4013      	ands	r3, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	69b9      	ldr	r1, [r7, #24]
 8002710:	430b      	orrs	r3, r1
 8002712:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff1b 	bl	8002554 <LL_ADC_INJ_IsConversionOngoing>
 800271e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d13d      	bne.n	80027a2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d13a      	bne.n	80027a2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002730:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002738:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002748:	f023 0302 	bic.w	r3, r3, #2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	69b9      	ldr	r1, [r7, #24]
 8002752:	430b      	orrs	r3, r1
 8002754:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800275c:	2b01      	cmp	r3, #1
 800275e:	d118      	bne.n	8002792 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800276a:	f023 0304 	bic.w	r3, r3, #4
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002776:	4311      	orrs	r1, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800277c:	4311      	orrs	r1, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002782:	430a      	orrs	r2, r1
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	611a      	str	r2, [r3, #16]
 8002790:	e007      	b.n	80027a2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d10c      	bne.n	80027c4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	f023 010f 	bic.w	r1, r3, #15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	1e5a      	subs	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80027c2:	e007      	b.n	80027d4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 020f 	bic.w	r2, r2, #15
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d8:	f023 0303 	bic.w	r3, r3, #3
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80027e4:	e007      	b.n	80027f6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ea:	f043 0210 	orr.w	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3724      	adds	r7, #36	@ 0x24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd90      	pop	{r4, r7, pc}
 8002800:	20000000 	.word	0x20000000
 8002804:	053e2d63 	.word	0x053e2d63
 8002808:	50040000 	.word	0x50040000
 800280c:	50040100 	.word	0x50040100
 8002810:	50040200 	.word	0x50040200
 8002814:	50040300 	.word	0x50040300
 8002818:	fff0c007 	.word	0xfff0c007

0800281c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002824:	4891      	ldr	r0, [pc, #580]	@ (8002a6c <HAL_ADC_Start_IT+0x250>)
 8002826:	f7ff fddd 	bl	80023e4 <LL_ADC_GetMultimode>
 800282a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fe7c 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	f040 8110 	bne.w	8002a5e <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_ADC_Start_IT+0x30>
 8002848:	2302      	movs	r3, #2
 800284a:	e10b      	b.n	8002a64 <HAL_ADC_Start_IT+0x248>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 ff3d 	bl	80036d4 <ADC_Enable>
 800285a:	4603      	mov	r3, r0
 800285c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f040 80f7 	bne.w	8002a54 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a70 <HAL_ADC_Start_IT+0x254>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d002      	beq.n	800288a <HAL_ADC_Start_IT+0x6e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	e000      	b.n	800288c <HAL_ADC_Start_IT+0x70>
 800288a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a74 <HAL_ADC_Start_IT+0x258>)
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	4293      	cmp	r3, r2
 8002892:	d002      	beq.n	800289a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d006      	beq.n	80028c0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b6:	f023 0206 	bic.w	r2, r3, #6
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80028be:	e002      	b.n	80028c6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	221c      	movs	r2, #28
 80028cc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 021c 	bic.w	r2, r2, #28
 80028e4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d108      	bne.n	8002900 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f042 0208 	orr.w	r2, r2, #8
 80028fc:	605a      	str	r2, [r3, #4]
          break;
 80028fe:	e008      	b.n	8002912 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0204 	orr.w	r2, r2, #4
 800290e:	605a      	str	r2, [r3, #4]
          break;
 8002910:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002916:	2b00      	cmp	r3, #0
 8002918:	d107      	bne.n	800292a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0210 	orr.w	r2, r2, #16
 8002928:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a50      	ldr	r2, [pc, #320]	@ (8002a70 <HAL_ADC_Start_IT+0x254>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d002      	beq.n	800293a <HAL_ADC_Start_IT+0x11e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	e000      	b.n	800293c <HAL_ADC_Start_IT+0x120>
 800293a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a74 <HAL_ADC_Start_IT+0x258>)
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	4293      	cmp	r3, r2
 8002942:	d008      	beq.n	8002956 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	2b05      	cmp	r3, #5
 800294e:	d002      	beq.n	8002956 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b09      	cmp	r3, #9
 8002954:	d13a      	bne.n	80029cc <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d02d      	beq.n	80029c0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002968:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800296c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d110      	bne.n	800299e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0220 	bic.w	r2, r2, #32
 800298a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800299a:	605a      	str	r2, [r3, #4]
              break;
 800299c:	e010      	b.n	80029c0 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0220 	orr.w	r2, r2, #32
 80029bc:	605a      	str	r2, [r3, #4]
              break;
 80029be:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fd9e 	bl	8002506 <LL_ADC_REG_StartConversion>
 80029ca:	e04a      	b.n	8002a62 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a24      	ldr	r2, [pc, #144]	@ (8002a70 <HAL_ADC_Start_IT+0x254>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d002      	beq.n	80029e8 <HAL_ADC_Start_IT+0x1cc>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	e000      	b.n	80029ea <HAL_ADC_Start_IT+0x1ce>
 80029e8:	4b22      	ldr	r3, [pc, #136]	@ (8002a74 <HAL_ADC_Start_IT+0x258>)
 80029ea:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d034      	beq.n	8002a62 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a00:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d110      	bne.n	8002a32 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0220 	bic.w	r2, r2, #32
 8002a1e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a2e:	605a      	str	r2, [r3, #4]
              break;
 8002a30:	e017      	b.n	8002a62 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a40:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0220 	orr.w	r2, r2, #32
 8002a50:	605a      	str	r2, [r3, #4]
              break;
 8002a52:	e006      	b.n	8002a62 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002a5c:	e001      	b.n	8002a62 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	50040300 	.word	0x50040300
 8002a70:	50040100 	.word	0x50040100
 8002a74:	50040000 	.word	0x50040000

08002a78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	@ 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ab0:	4882      	ldr	r0, [pc, #520]	@ (8002cbc <HAL_ADC_IRQHandler+0x228>)
 8002ab2:	f7ff fc97 	bl	80023e4 <LL_ADC_GetMultimode>
 8002ab6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d017      	beq.n	8002af2 <HAL_ADC_IRQHandler+0x5e>
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d012      	beq.n	8002af2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fec9 	bl	800387c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2202      	movs	r2, #2
 8002af0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d004      	beq.n	8002b06 <HAL_ADC_IRQHandler+0x72>
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10a      	bne.n	8002b1c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8083 	beq.w	8002c18 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d07d      	beq.n	8002c18 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fbb2 	bl	80022a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d062      	beq.n	8002c0a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a5d      	ldr	r2, [pc, #372]	@ (8002cc0 <HAL_ADC_IRQHandler+0x22c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d002      	beq.n	8002b54 <HAL_ADC_IRQHandler+0xc0>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	e000      	b.n	8002b56 <HAL_ADC_IRQHandler+0xc2>
 8002b54:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc4 <HAL_ADC_IRQHandler+0x230>)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d008      	beq.n	8002b70 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d002      	beq.n	8002b70 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b09      	cmp	r3, #9
 8002b6e:	d104      	bne.n	8002b7a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	e00c      	b.n	8002b94 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a50      	ldr	r2, [pc, #320]	@ (8002cc0 <HAL_ADC_IRQHandler+0x22c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d002      	beq.n	8002b8a <HAL_ADC_IRQHandler+0xf6>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	e000      	b.n	8002b8c <HAL_ADC_IRQHandler+0xf8>
 8002b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8002cc4 <HAL_ADC_IRQHandler+0x230>)
 8002b8c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d135      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d12e      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fcbc 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d11a      	bne.n	8002bf2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 020c 	bic.w	r2, r2, #12
 8002bca:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d112      	bne.n	8002c0a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be8:	f043 0201 	orr.w	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bf0:	e00b      	b.n	8002c0a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf6:	f043 0210 	orr.w	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe f944 	bl	8000e98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	220c      	movs	r2, #12
 8002c16:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x198>
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10b      	bne.n	8002c44 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 809f 	beq.w	8002d76 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8099 	beq.w	8002d76 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c54:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fb5d 	bl	8002320 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002c66:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fb18 	bl	80022a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c72:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a11      	ldr	r2, [pc, #68]	@ (8002cc0 <HAL_ADC_IRQHandler+0x22c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d002      	beq.n	8002c84 <HAL_ADC_IRQHandler+0x1f0>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	e000      	b.n	8002c86 <HAL_ADC_IRQHandler+0x1f2>
 8002c84:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc4 <HAL_ADC_IRQHandler+0x230>)
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6812      	ldr	r2, [r2, #0]
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d008      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d002      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b07      	cmp	r3, #7
 8002c9e:	d104      	bne.n	8002caa <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	623b      	str	r3, [r7, #32]
 8002ca8:	e013      	b.n	8002cd2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a04      	ldr	r2, [pc, #16]	@ (8002cc0 <HAL_ADC_IRQHandler+0x22c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d009      	beq.n	8002cc8 <HAL_ADC_IRQHandler+0x234>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	e007      	b.n	8002cca <HAL_ADC_IRQHandler+0x236>
 8002cba:	bf00      	nop
 8002cbc:	50040300 	.word	0x50040300
 8002cc0:	50040100 	.word	0x50040100
 8002cc4:	50040000 	.word	0x50040000
 8002cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8002ec0 <HAL_ADC_IRQHandler+0x42c>)
 8002cca:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d047      	beq.n	8002d68 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <HAL_ADC_IRQHandler+0x25e>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d03f      	beq.n	8002d68 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d13a      	bne.n	8002d68 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cfc:	2b40      	cmp	r3, #64	@ 0x40
 8002cfe:	d133      	bne.n	8002d68 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d12e      	bne.n	8002d68 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fc20 	bl	8002554 <LL_ADC_INJ_IsConversionOngoing>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11a      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d28:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d112      	bne.n	8002d68 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	f043 0201 	orr.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d4e:	e00b      	b.n	8002d68 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d54:	f043 0210 	orr.w	r2, r3, #16
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 fd5f 	bl	800382c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2260      	movs	r2, #96	@ 0x60
 8002d74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d011      	beq.n	8002da4 <HAL_ADC_IRQHandler+0x310>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00c      	beq.n	8002da4 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f896 	bl	8002ec8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2280      	movs	r2, #128	@ 0x80
 8002da2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d012      	beq.n	8002dd4 <HAL_ADC_IRQHandler+0x340>
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00d      	beq.n	8002dd4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dbc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fd45 	bl	8003854 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d012      	beq.n	8002e04 <HAL_ADC_IRQHandler+0x370>
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00d      	beq.n	8002e04 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fd37 	bl	8003868 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d036      	beq.n	8002e7c <HAL_ADC_IRQHandler+0x3e8>
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d031      	beq.n	8002e7c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002e20:	2301      	movs	r3, #1
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e24:	e014      	b.n	8002e50 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e2c:	4825      	ldr	r0, [pc, #148]	@ (8002ec4 <HAL_ADC_IRQHandler+0x430>)
 8002e2e:	f7ff fae7 	bl	8002400 <LL_ADC_GetMultiDMATransfer>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3c:	e008      	b.n	8002e50 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d10e      	bne.n	8002e74 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e66:	f043 0202 	orr.w	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f834 	bl	8002edc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2210      	movs	r2, #16
 8002e7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d018      	beq.n	8002eb8 <HAL_ADC_IRQHandler+0x424>
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d013      	beq.n	8002eb8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e94:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea0:	f043 0208 	orr.w	r2, r3, #8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fcc4 	bl	8003840 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002eb8:	bf00      	nop
 8002eba:	3728      	adds	r7, #40	@ 0x28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	50040000 	.word	0x50040000
 8002ec4:	50040300 	.word	0x50040300

08002ec8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b0b6      	sub	sp, #216	@ 0xd8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x22>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e3c9      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x7b6>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fb05 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f040 83aa 	bne.w	8003680 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b05      	cmp	r3, #5
 8002f3a:	d824      	bhi.n	8002f86 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	3b02      	subs	r3, #2
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d81b      	bhi.n	8002f7e <HAL_ADC_ConfigChannel+0x8e>
 8002f46:	a201      	add	r2, pc, #4	@ (adr r2, 8002f4c <HAL_ADC_ConfigChannel+0x5c>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f5d 	.word	0x08002f5d
 8002f50:	08002f65 	.word	0x08002f65
 8002f54:	08002f6d 	.word	0x08002f6d
 8002f58:	08002f75 	.word	0x08002f75
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002f5c:	230c      	movs	r3, #12
 8002f5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f62:	e010      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002f64:	2312      	movs	r3, #18
 8002f66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f6a:	e00c      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002f6c:	2318      	movs	r3, #24
 8002f6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f72:	e008      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002f74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f7c:	e003      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002f7e:	2306      	movs	r3, #6
 8002f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f84:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002f94:	f7ff f998 	bl	80022c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fac6 	bl	800252e <LL_ADC_REG_IsConversionOngoing>
 8002fa2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fad2 	bl	8002554 <LL_ADC_INJ_IsConversionOngoing>
 8002fb0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f040 81a4 	bne.w	8003306 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 819f 	bne.w	8003306 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	6819      	ldr	r1, [r3, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f7ff f9b6 	bl	8002346 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	08db      	lsrs	r3, r3, #3
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d00a      	beq.n	8003012 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6919      	ldr	r1, [r3, #16]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800300c:	f7ff f8f4 	bl	80021f8 <LL_ADC_SetOffset>
 8003010:	e179      	b.n	8003306 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff f911 	bl	8002240 <LL_ADC_GetOffsetChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <HAL_ADC_ConfigChannel+0x14e>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f906 	bl	8002240 <LL_ADC_GetOffsetChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	0e9b      	lsrs	r3, r3, #26
 8003038:	f003 021f 	and.w	r2, r3, #31
 800303c:	e01e      	b.n	800307c <HAL_ADC_ConfigChannel+0x18c>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff f8fb 	bl	8002240 <LL_ADC_GetOffsetChannel>
 800304a:	4603      	mov	r3, r0
 800304c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800305c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003060:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003064:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800306c:	2320      	movs	r3, #32
 800306e:	e004      	b.n	800307a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x1a4>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	0e9b      	lsrs	r3, r3, #26
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	e018      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x1d6>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80030a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80030b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80030b8:	2320      	movs	r3, #32
 80030ba:	e004      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80030bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d106      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2200      	movs	r2, #0
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff f8ca 	bl	800226c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2101      	movs	r1, #1
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff f8ae 	bl	8002240 <LL_ADC_GetOffsetChannel>
 80030e4:	4603      	mov	r3, r0
 80030e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x214>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2101      	movs	r1, #1
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff f8a3 	bl	8002240 <LL_ADC_GetOffsetChannel>
 80030fa:	4603      	mov	r3, r0
 80030fc:	0e9b      	lsrs	r3, r3, #26
 80030fe:	f003 021f 	and.w	r2, r3, #31
 8003102:	e01e      	b.n	8003142 <HAL_ADC_ConfigChannel+0x252>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff f898 	bl	8002240 <LL_ADC_GetOffsetChannel>
 8003110:	4603      	mov	r3, r0
 8003112:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800311a:	fa93 f3a3 	rbit	r3, r3
 800311e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003122:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800312a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003132:	2320      	movs	r3, #32
 8003134:	e004      	b.n	8003140 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003136:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800313a:	fab3 f383 	clz	r3, r3
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <HAL_ADC_ConfigChannel+0x26a>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	0e9b      	lsrs	r3, r3, #26
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	e018      	b.n	800318c <HAL_ADC_ConfigChannel+0x29c>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800316e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003172:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003176:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800317e:	2320      	movs	r3, #32
 8003180:	e004      	b.n	800318c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003182:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800318c:	429a      	cmp	r2, r3
 800318e:	d106      	bne.n	800319e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2200      	movs	r2, #0
 8003196:	2101      	movs	r1, #1
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff f867 	bl	800226c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2102      	movs	r1, #2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff f84b 	bl	8002240 <LL_ADC_GetOffsetChannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x2da>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2102      	movs	r1, #2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f840 	bl	8002240 <LL_ADC_GetOffsetChannel>
 80031c0:	4603      	mov	r3, r0
 80031c2:	0e9b      	lsrs	r3, r3, #26
 80031c4:	f003 021f 	and.w	r2, r3, #31
 80031c8:	e01e      	b.n	8003208 <HAL_ADC_ConfigChannel+0x318>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2102      	movs	r1, #2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff f835 	bl	8002240 <LL_ADC_GetOffsetChannel>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80031e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80031f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e004      	b.n	8003206 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80031fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x330>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0e9b      	lsrs	r3, r3, #26
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	e014      	b.n	800324a <HAL_ADC_ConfigChannel+0x35a>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800322e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003230:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003234:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800323c:	2320      	movs	r3, #32
 800323e:	e004      	b.n	800324a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003240:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800324a:	429a      	cmp	r2, r3
 800324c:	d106      	bne.n	800325c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	2102      	movs	r1, #2
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff f808 	bl	800226c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2103      	movs	r1, #3
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe ffec 	bl	8002240 <LL_ADC_GetOffsetChannel>
 8003268:	4603      	mov	r3, r0
 800326a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x398>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2103      	movs	r1, #3
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe ffe1 	bl	8002240 <LL_ADC_GetOffsetChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	0e9b      	lsrs	r3, r3, #26
 8003282:	f003 021f 	and.w	r2, r3, #31
 8003286:	e017      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x3c8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2103      	movs	r1, #3
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe ffd6 	bl	8002240 <LL_ADC_GetOffsetChannel>
 8003294:	4603      	mov	r3, r0
 8003296:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003298:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80032a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80032a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80032aa:	2320      	movs	r3, #32
 80032ac:	e003      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80032ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x3e0>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	e011      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x404>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80032de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80032e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80032e8:	2320      	movs	r3, #32
 80032ea:	e003      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80032ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d106      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2103      	movs	r1, #3
 8003300:	4618      	mov	r0, r3
 8003302:	f7fe ffb3 	bl	800226c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff f8e8 	bl	80024e0 <LL_ADC_IsEnabled>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 8140 	bne.w	8003598 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	461a      	mov	r2, r3
 8003326:	f7ff f839 	bl	800239c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	4a8f      	ldr	r2, [pc, #572]	@ (800356c <HAL_ADC_ConfigChannel+0x67c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	f040 8131 	bne.w	8003598 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <HAL_ADC_ConfigChannel+0x46e>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	3301      	adds	r3, #1
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2b09      	cmp	r3, #9
 8003354:	bf94      	ite	ls
 8003356:	2301      	movls	r3, #1
 8003358:	2300      	movhi	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	e019      	b.n	8003392 <HAL_ADC_ConfigChannel+0x4a2>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800336c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003376:	2320      	movs	r3, #32
 8003378:	e003      	b.n	8003382 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800337a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	b2db      	uxtb	r3, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2b09      	cmp	r3, #9
 800338a:	bf94      	ite	ls
 800338c:	2301      	movls	r3, #1
 800338e:	2300      	movhi	r3, #0
 8003390:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003392:	2b00      	cmp	r3, #0
 8003394:	d079      	beq.n	800348a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d107      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x4c2>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0e9b      	lsrs	r3, r3, #26
 80033a8:	3301      	adds	r3, #1
 80033aa:	069b      	lsls	r3, r3, #26
 80033ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033b0:	e015      	b.n	80033de <HAL_ADC_ConfigChannel+0x4ee>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80033c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80033c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80033ca:	2320      	movs	r3, #32
 80033cc:	e003      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80033ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033d0:	fab3 f383 	clz	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	3301      	adds	r3, #1
 80033d8:	069b      	lsls	r3, r3, #26
 80033da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x50e>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	0e9b      	lsrs	r3, r3, #26
 80033f0:	3301      	adds	r3, #1
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	2101      	movs	r1, #1
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	e017      	b.n	800342e <HAL_ADC_ConfigChannel+0x53e>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800340c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800340e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003416:	2320      	movs	r3, #32
 8003418:	e003      	b.n	8003422 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800341a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800341c:	fab3 f383 	clz	r3, r3
 8003420:	b2db      	uxtb	r3, r3
 8003422:	3301      	adds	r3, #1
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	2101      	movs	r1, #1
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	ea42 0103 	orr.w	r1, r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x564>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	0e9b      	lsrs	r3, r3, #26
 8003444:	3301      	adds	r3, #1
 8003446:	f003 021f 	and.w	r2, r3, #31
 800344a:	4613      	mov	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4413      	add	r3, r2
 8003450:	051b      	lsls	r3, r3, #20
 8003452:	e018      	b.n	8003486 <HAL_ADC_ConfigChannel+0x596>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003464:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800346c:	2320      	movs	r3, #32
 800346e:	e003      	b.n	8003478 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	3301      	adds	r3, #1
 800347a:	f003 021f 	and.w	r2, r3, #31
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003486:	430b      	orrs	r3, r1
 8003488:	e081      	b.n	800358e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003492:	2b00      	cmp	r3, #0
 8003494:	d107      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x5b6>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	0e9b      	lsrs	r3, r3, #26
 800349c:	3301      	adds	r3, #1
 800349e:	069b      	lsls	r3, r3, #26
 80034a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034a4:	e015      	b.n	80034d2 <HAL_ADC_ConfigChannel+0x5e2>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80034b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80034be:	2320      	movs	r3, #32
 80034c0:	e003      	b.n	80034ca <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80034c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c4:	fab3 f383 	clz	r3, r3
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	069b      	lsls	r3, r3, #26
 80034ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x602>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	0e9b      	lsrs	r3, r3, #26
 80034e4:	3301      	adds	r3, #1
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	e017      	b.n	8003522 <HAL_ADC_ConfigChannel+0x632>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	61bb      	str	r3, [r7, #24]
  return result;
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800350a:	2320      	movs	r3, #32
 800350c:	e003      	b.n	8003516 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	ea42 0103 	orr.w	r1, r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10d      	bne.n	800354e <HAL_ADC_ConfigChannel+0x65e>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	0e9b      	lsrs	r3, r3, #26
 8003538:	3301      	adds	r3, #1
 800353a:	f003 021f 	and.w	r2, r3, #31
 800353e:	4613      	mov	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	3b1e      	subs	r3, #30
 8003546:	051b      	lsls	r3, r3, #20
 8003548:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800354c:	e01e      	b.n	800358c <HAL_ADC_ConfigChannel+0x69c>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	60fb      	str	r3, [r7, #12]
  return result;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003566:	2320      	movs	r3, #32
 8003568:	e006      	b.n	8003578 <HAL_ADC_ConfigChannel+0x688>
 800356a:	bf00      	nop
 800356c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3301      	adds	r3, #1
 800357a:	f003 021f 	and.w	r2, r3, #31
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	3b1e      	subs	r3, #30
 8003586:	051b      	lsls	r3, r3, #20
 8003588:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800358c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003592:	4619      	mov	r1, r3
 8003594:	f7fe fed7 	bl	8002346 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b44      	ldr	r3, [pc, #272]	@ (80036b0 <HAL_ADC_ConfigChannel+0x7c0>)
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d07a      	beq.n	800369a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035a4:	4843      	ldr	r0, [pc, #268]	@ (80036b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80035a6:	f7fe fe19 	bl	80021dc <LL_ADC_GetCommonPathInternalCh>
 80035aa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a41      	ldr	r2, [pc, #260]	@ (80036b8 <HAL_ADC_ConfigChannel+0x7c8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d12c      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d126      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a3c      	ldr	r2, [pc, #240]	@ (80036bc <HAL_ADC_ConfigChannel+0x7cc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_ADC_ConfigChannel+0x6e8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a3b      	ldr	r2, [pc, #236]	@ (80036c0 <HAL_ADC_ConfigChannel+0x7d0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d15d      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035e0:	4619      	mov	r1, r3
 80035e2:	4834      	ldr	r0, [pc, #208]	@ (80036b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80035e4:	f7fe fde7 	bl	80021b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035e8:	4b36      	ldr	r3, [pc, #216]	@ (80036c4 <HAL_ADC_ConfigChannel+0x7d4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	099b      	lsrs	r3, r3, #6
 80035ee:	4a36      	ldr	r2, [pc, #216]	@ (80036c8 <HAL_ADC_ConfigChannel+0x7d8>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	4613      	mov	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003602:	e002      	b.n	800360a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	3b01      	subs	r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f9      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003610:	e040      	b.n	8003694 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2d      	ldr	r2, [pc, #180]	@ (80036cc <HAL_ADC_ConfigChannel+0x7dc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d118      	bne.n	800364e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800361c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003620:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d112      	bne.n	800364e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a23      	ldr	r2, [pc, #140]	@ (80036bc <HAL_ADC_ConfigChannel+0x7cc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d004      	beq.n	800363c <HAL_ADC_ConfigChannel+0x74c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a22      	ldr	r2, [pc, #136]	@ (80036c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d12d      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800363c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003640:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003644:	4619      	mov	r1, r3
 8003646:	481b      	ldr	r0, [pc, #108]	@ (80036b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003648:	f7fe fdb5 	bl	80021b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800364c:	e024      	b.n	8003698 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1f      	ldr	r2, [pc, #124]	@ (80036d0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d120      	bne.n	800369a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800365c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11a      	bne.n	800369a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a14      	ldr	r2, [pc, #80]	@ (80036bc <HAL_ADC_ConfigChannel+0x7cc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d115      	bne.n	800369a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800366e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003672:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003676:	4619      	mov	r1, r3
 8003678:	480e      	ldr	r0, [pc, #56]	@ (80036b4 <HAL_ADC_ConfigChannel+0x7c4>)
 800367a:	f7fe fd9c 	bl	80021b6 <LL_ADC_SetCommonPathInternalCh>
 800367e:	e00c      	b.n	800369a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003684:	f043 0220 	orr.w	r2, r3, #32
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003692:	e002      	b.n	800369a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003694:	bf00      	nop
 8003696:	e000      	b.n	800369a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003698:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80036a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	37d8      	adds	r7, #216	@ 0xd8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	80080000 	.word	0x80080000
 80036b4:	50040300 	.word	0x50040300
 80036b8:	c7520000 	.word	0xc7520000
 80036bc:	50040000 	.word	0x50040000
 80036c0:	50040200 	.word	0x50040200
 80036c4:	20000000 	.word	0x20000000
 80036c8:	053e2d63 	.word	0x053e2d63
 80036cc:	cb840000 	.word	0xcb840000
 80036d0:	80000001 	.word	0x80000001

080036d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036dc:	2300      	movs	r3, #0
 80036de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe fefb 	bl	80024e0 <LL_ADC_IsEnabled>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d169      	bne.n	80037c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	4b36      	ldr	r3, [pc, #216]	@ (80037d0 <ADC_Enable+0xfc>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00d      	beq.n	800371a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003702:	f043 0210 	orr.w	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e055      	b.n	80037c6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe feca 	bl	80024b8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003724:	482b      	ldr	r0, [pc, #172]	@ (80037d4 <ADC_Enable+0x100>)
 8003726:	f7fe fd59 	bl	80021dc <LL_ADC_GetCommonPathInternalCh>
 800372a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800372c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003734:	4b28      	ldr	r3, [pc, #160]	@ (80037d8 <ADC_Enable+0x104>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	099b      	lsrs	r3, r3, #6
 800373a:	4a28      	ldr	r2, [pc, #160]	@ (80037dc <ADC_Enable+0x108>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800374e:	e002      	b.n	8003756 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	3b01      	subs	r3, #1
 8003754:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1f9      	bne.n	8003750 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800375c:	f7fe fce8 	bl	8002130 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003762:	e028      	b.n	80037b6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe feb9 	bl	80024e0 <LL_ADC_IsEnabled>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d104      	bne.n	800377e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe fe9d 	bl	80024b8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800377e:	f7fe fcd7 	bl	8002130 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d914      	bls.n	80037b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	d00d      	beq.n	80037b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379e:	f043 0210 	orr.w	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	f043 0201 	orr.w	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e007      	b.n	80037c6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d1cf      	bne.n	8003764 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	8000003f 	.word	0x8000003f
 80037d4:	50040300 	.word	0x50040300
 80037d8:	20000000 	.word	0x20000000
 80037dc:	053e2d63 	.word	0x053e2d63

080037e0 <LL_ADC_IsEnabled>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <LL_ADC_IsEnabled+0x18>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <LL_ADC_IsEnabled+0x1a>
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_ADC_REG_IsConversionOngoing>:
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b04      	cmp	r3, #4
 8003818:	d101      	bne.n	800381e <LL_ADC_REG_IsConversionOngoing+0x18>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b09f      	sub	sp, #124	@ 0x7c
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e093      	b.n	80039d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038b6:	2300      	movs	r3, #0
 80038b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038ba:	2300      	movs	r3, #0
 80038bc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a47      	ldr	r2, [pc, #284]	@ (80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d102      	bne.n	80038ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038c8:	4b46      	ldr	r3, [pc, #280]	@ (80039e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	e001      	b.n	80038d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10b      	bne.n	80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e072      	b.n	80039d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff87 	bl	8003806 <LL_ADC_REG_IsConversionOngoing>
 80038f8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff81 	bl	8003806 <LL_ADC_REG_IsConversionOngoing>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d154      	bne.n	80039b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800390a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800390c:	2b00      	cmp	r3, #0
 800390e:	d151      	bne.n	80039b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003910:	4b35      	ldr	r3, [pc, #212]	@ (80039e8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003912:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d02c      	beq.n	8003976 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800391c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800392e:	035b      	lsls	r3, r3, #13
 8003930:	430b      	orrs	r3, r1
 8003932:	431a      	orrs	r2, r3
 8003934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003936:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003938:	4829      	ldr	r0, [pc, #164]	@ (80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800393a:	f7ff ff51 	bl	80037e0 <LL_ADC_IsEnabled>
 800393e:	4604      	mov	r4, r0
 8003940:	4828      	ldr	r0, [pc, #160]	@ (80039e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003942:	f7ff ff4d 	bl	80037e0 <LL_ADC_IsEnabled>
 8003946:	4603      	mov	r3, r0
 8003948:	431c      	orrs	r4, r3
 800394a:	4828      	ldr	r0, [pc, #160]	@ (80039ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800394c:	f7ff ff48 	bl	80037e0 <LL_ADC_IsEnabled>
 8003950:	4603      	mov	r3, r0
 8003952:	4323      	orrs	r3, r4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d137      	bne.n	80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003960:	f023 030f 	bic.w	r3, r3, #15
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	6811      	ldr	r1, [r2, #0]
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	6892      	ldr	r2, [r2, #8]
 800396c:	430a      	orrs	r2, r1
 800396e:	431a      	orrs	r2, r3
 8003970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003972:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003974:	e028      	b.n	80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800397e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003980:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003982:	4817      	ldr	r0, [pc, #92]	@ (80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003984:	f7ff ff2c 	bl	80037e0 <LL_ADC_IsEnabled>
 8003988:	4604      	mov	r4, r0
 800398a:	4816      	ldr	r0, [pc, #88]	@ (80039e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800398c:	f7ff ff28 	bl	80037e0 <LL_ADC_IsEnabled>
 8003990:	4603      	mov	r3, r0
 8003992:	431c      	orrs	r4, r3
 8003994:	4815      	ldr	r0, [pc, #84]	@ (80039ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003996:	f7ff ff23 	bl	80037e0 <LL_ADC_IsEnabled>
 800399a:	4603      	mov	r3, r0
 800399c:	4323      	orrs	r3, r4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d112      	bne.n	80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039aa:	f023 030f 	bic.w	r3, r3, #15
 80039ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039b0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039b2:	e009      	b.n	80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80039c6:	e000      	b.n	80039ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80039d2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	377c      	adds	r7, #124	@ 0x7c
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd90      	pop	{r4, r7, pc}
 80039de:	bf00      	nop
 80039e0:	50040000 	.word	0x50040000
 80039e4:	50040100 	.word	0x50040100
 80039e8:	50040300 	.word	0x50040300
 80039ec:	50040200 	.word	0x50040200

080039f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a00:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <__NVIC_SetPriorityGrouping+0x44>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a22:	4a04      	ldr	r2, [pc, #16]	@ (8003a34 <__NVIC_SetPriorityGrouping+0x44>)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	60d3      	str	r3, [r2, #12]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a3c:	4b04      	ldr	r3, [pc, #16]	@ (8003a50 <__NVIC_GetPriorityGrouping+0x18>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	0a1b      	lsrs	r3, r3, #8
 8003a42:	f003 0307 	and.w	r3, r3, #7
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	db0b      	blt.n	8003a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	f003 021f 	and.w	r2, r3, #31
 8003a6c:	4907      	ldr	r1, [pc, #28]	@ (8003a8c <__NVIC_EnableIRQ+0x38>)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	2001      	movs	r0, #1
 8003a76:	fa00 f202 	lsl.w	r2, r0, r2
 8003a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	e000e100 	.word	0xe000e100

08003a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	6039      	str	r1, [r7, #0]
 8003a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	db0a      	blt.n	8003aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	490c      	ldr	r1, [pc, #48]	@ (8003adc <__NVIC_SetPriority+0x4c>)
 8003aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aae:	0112      	lsls	r2, r2, #4
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ab8:	e00a      	b.n	8003ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	4908      	ldr	r1, [pc, #32]	@ (8003ae0 <__NVIC_SetPriority+0x50>)
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	3b04      	subs	r3, #4
 8003ac8:	0112      	lsls	r2, r2, #4
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	440b      	add	r3, r1
 8003ace:	761a      	strb	r2, [r3, #24]
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000e100 	.word	0xe000e100
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	@ 0x24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f1c3 0307 	rsb	r3, r3, #7
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	bf28      	it	cs
 8003b02:	2304      	movcs	r3, #4
 8003b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	2b06      	cmp	r3, #6
 8003b0c:	d902      	bls.n	8003b14 <NVIC_EncodePriority+0x30>
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	3b03      	subs	r3, #3
 8003b12:	e000      	b.n	8003b16 <NVIC_EncodePriority+0x32>
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b18:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43da      	mvns	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	401a      	ands	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	fa01 f303 	lsl.w	r3, r1, r3
 8003b36:	43d9      	mvns	r1, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b3c:	4313      	orrs	r3, r2
         );
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3724      	adds	r7, #36	@ 0x24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
	...

08003b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b5c:	d301      	bcc.n	8003b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e00f      	b.n	8003b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b62:	4a0a      	ldr	r2, [pc, #40]	@ (8003b8c <SysTick_Config+0x40>)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b6a:	210f      	movs	r1, #15
 8003b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b70:	f7ff ff8e 	bl	8003a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <SysTick_Config+0x40>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b7a:	4b04      	ldr	r3, [pc, #16]	@ (8003b8c <SysTick_Config+0x40>)
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	e000e010 	.word	0xe000e010

08003b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff ff29 	bl	80039f0 <__NVIC_SetPriorityGrouping>
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b086      	sub	sp, #24
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	4603      	mov	r3, r0
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
 8003bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bb8:	f7ff ff3e 	bl	8003a38 <__NVIC_GetPriorityGrouping>
 8003bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	6978      	ldr	r0, [r7, #20]
 8003bc4:	f7ff ff8e 	bl	8003ae4 <NVIC_EncodePriority>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ff5d 	bl	8003a90 <__NVIC_SetPriority>
}
 8003bd6:	bf00      	nop
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	4603      	mov	r3, r0
 8003be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff ff31 	bl	8003a54 <__NVIC_EnableIRQ>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff ffa2 	bl	8003b4c <SysTick_Config>
 8003c08:	4603      	mov	r3, r0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d008      	beq.n	8003c3c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e022      	b.n	8003c82 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 020e 	bic.w	r2, r2, #14
 8003c4a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c60:	f003 021c 	and.w	r2, r3, #28
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	2101      	movs	r1, #1
 8003c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d005      	beq.n	8003cb2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2204      	movs	r2, #4
 8003caa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e029      	b.n	8003d06 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 020e 	bic.w	r2, r2, #14
 8003cc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	f003 021c 	and.w	r2, r3, #28
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	2101      	movs	r1, #1
 8003ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	4798      	blx	r3
    }
  }
  return status;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d1e:	e17f      	b.n	8004020 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	2101      	movs	r1, #1
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8171 	beq.w	800401a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d005      	beq.n	8003d50 <HAL_GPIO_Init+0x40>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d130      	bne.n	8003db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	2203      	movs	r2, #3
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4013      	ands	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d86:	2201      	movs	r2, #1
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4013      	ands	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	091b      	lsrs	r3, r3, #4
 8003d9c:	f003 0201 	and.w	r2, r3, #1
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d118      	bne.n	8003df0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	08db      	lsrs	r3, r3, #3
 8003dda:	f003 0201 	and.w	r2, r3, #1
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d017      	beq.n	8003e2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	2203      	movs	r2, #3
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d123      	bne.n	8003e80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	08da      	lsrs	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3208      	adds	r2, #8
 8003e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	220f      	movs	r2, #15
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	08da      	lsrs	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3208      	adds	r2, #8
 8003e7a:	6939      	ldr	r1, [r7, #16]
 8003e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0203 	and.w	r2, r3, #3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80ac 	beq.w	800401a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8004040 <HAL_GPIO_Init+0x330>)
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8004040 <HAL_GPIO_Init+0x330>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ece:	4b5c      	ldr	r3, [pc, #368]	@ (8004040 <HAL_GPIO_Init+0x330>)
 8003ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003eda:	4a5a      	ldr	r2, [pc, #360]	@ (8004044 <HAL_GPIO_Init+0x334>)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	089b      	lsrs	r3, r3, #2
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	220f      	movs	r2, #15
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f04:	d025      	beq.n	8003f52 <HAL_GPIO_Init+0x242>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a4f      	ldr	r2, [pc, #316]	@ (8004048 <HAL_GPIO_Init+0x338>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01f      	beq.n	8003f4e <HAL_GPIO_Init+0x23e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a4e      	ldr	r2, [pc, #312]	@ (800404c <HAL_GPIO_Init+0x33c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d019      	beq.n	8003f4a <HAL_GPIO_Init+0x23a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a4d      	ldr	r2, [pc, #308]	@ (8004050 <HAL_GPIO_Init+0x340>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_GPIO_Init+0x236>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a4c      	ldr	r2, [pc, #304]	@ (8004054 <HAL_GPIO_Init+0x344>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00d      	beq.n	8003f42 <HAL_GPIO_Init+0x232>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a4b      	ldr	r2, [pc, #300]	@ (8004058 <HAL_GPIO_Init+0x348>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d007      	beq.n	8003f3e <HAL_GPIO_Init+0x22e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a4a      	ldr	r2, [pc, #296]	@ (800405c <HAL_GPIO_Init+0x34c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <HAL_GPIO_Init+0x22a>
 8003f36:	2306      	movs	r3, #6
 8003f38:	e00c      	b.n	8003f54 <HAL_GPIO_Init+0x244>
 8003f3a:	2307      	movs	r3, #7
 8003f3c:	e00a      	b.n	8003f54 <HAL_GPIO_Init+0x244>
 8003f3e:	2305      	movs	r3, #5
 8003f40:	e008      	b.n	8003f54 <HAL_GPIO_Init+0x244>
 8003f42:	2304      	movs	r3, #4
 8003f44:	e006      	b.n	8003f54 <HAL_GPIO_Init+0x244>
 8003f46:	2303      	movs	r3, #3
 8003f48:	e004      	b.n	8003f54 <HAL_GPIO_Init+0x244>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e002      	b.n	8003f54 <HAL_GPIO_Init+0x244>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_GPIO_Init+0x244>
 8003f52:	2300      	movs	r3, #0
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	f002 0203 	and.w	r2, r2, #3
 8003f5a:	0092      	lsls	r2, r2, #2
 8003f5c:	4093      	lsls	r3, r2
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f64:	4937      	ldr	r1, [pc, #220]	@ (8004044 <HAL_GPIO_Init+0x334>)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	089b      	lsrs	r3, r3, #2
 8003f6a:	3302      	adds	r3, #2
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f72:	4b3b      	ldr	r3, [pc, #236]	@ (8004060 <HAL_GPIO_Init+0x350>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f96:	4a32      	ldr	r2, [pc, #200]	@ (8004060 <HAL_GPIO_Init+0x350>)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f9c:	4b30      	ldr	r3, [pc, #192]	@ (8004060 <HAL_GPIO_Init+0x350>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fc0:	4a27      	ldr	r2, [pc, #156]	@ (8004060 <HAL_GPIO_Init+0x350>)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fc6:	4b26      	ldr	r3, [pc, #152]	@ (8004060 <HAL_GPIO_Init+0x350>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fea:	4a1d      	ldr	r2, [pc, #116]	@ (8004060 <HAL_GPIO_Init+0x350>)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8004060 <HAL_GPIO_Init+0x350>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004014:	4a12      	ldr	r2, [pc, #72]	@ (8004060 <HAL_GPIO_Init+0x350>)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3301      	adds	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	f47f ae78 	bne.w	8003d20 <HAL_GPIO_Init+0x10>
  }
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000
 8004044:	40010000 	.word	0x40010000
 8004048:	48000400 	.word	0x48000400
 800404c:	48000800 	.word	0x48000800
 8004050:	48000c00 	.word	0x48000c00
 8004054:	48001000 	.word	0x48001000
 8004058:	48001400 	.word	0x48001400
 800405c:	48001800 	.word	0x48001800
 8004060:	40010400 	.word	0x40010400

08004064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
 8004070:	4613      	mov	r3, r2
 8004072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004074:	787b      	ldrb	r3, [r7, #1]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800407a:	887a      	ldrh	r2, [r7, #2]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004080:	e002      	b.n	8004088 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004082:	887a      	ldrh	r2, [r7, #2]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4013      	ands	r3, r2
 80040ac:	041a      	lsls	r2, r3, #16
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	43d9      	mvns	r1, r3
 80040b2:	887b      	ldrh	r3, [r7, #2]
 80040b4:	400b      	ands	r3, r1
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	619a      	str	r2, [r3, #24]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040d2:	4b08      	ldr	r3, [pc, #32]	@ (80040f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	4013      	ands	r3, r2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d006      	beq.n	80040ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040de:	4a05      	ldr	r2, [pc, #20]	@ (80040f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040e4:	88fb      	ldrh	r3, [r7, #6]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc feb6 	bl	8000e58 <HAL_GPIO_EXTI_Callback>
  }
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40010400 	.word	0x40010400

080040f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e08d      	b.n	8004226 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fd faea 	bl	80016f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	@ 0x24
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004148:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004158:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800416e:	609a      	str	r2, [r3, #8]
 8004170:	e006      	b.n	8004180 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800417e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d108      	bne.n	800419a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004196:	605a      	str	r2, [r3, #4]
 8004198:	e007      	b.n	80041aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68da      	ldr	r2, [r3, #12]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69d9      	ldr	r1, [r3, #28]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1a      	ldr	r2, [r3, #32]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0201 	orr.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	4608      	mov	r0, r1
 800423a:	4611      	mov	r1, r2
 800423c:	461a      	mov	r2, r3
 800423e:	4603      	mov	r3, r0
 8004240:	817b      	strh	r3, [r7, #10]
 8004242:	460b      	mov	r3, r1
 8004244:	813b      	strh	r3, [r7, #8]
 8004246:	4613      	mov	r3, r2
 8004248:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b20      	cmp	r3, #32
 8004254:	f040 80f9 	bne.w	800444a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_I2C_Mem_Write+0x34>
 800425e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800426a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0ed      	b.n	800444c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_I2C_Mem_Write+0x4e>
 800427a:	2302      	movs	r3, #2
 800427c:	e0e6      	b.n	800444c <HAL_I2C_Mem_Write+0x21c>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004286:	f7fd ff53 	bl	8002130 <HAL_GetTick>
 800428a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2319      	movs	r3, #25
 8004292:	2201      	movs	r2, #1
 8004294:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f96f 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0d1      	b.n	800444c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2221      	movs	r2, #33	@ 0x21
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2240      	movs	r2, #64	@ 0x40
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042d0:	88f8      	ldrh	r0, [r7, #6]
 80042d2:	893a      	ldrh	r2, [r7, #8]
 80042d4:	8979      	ldrh	r1, [r7, #10]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	4603      	mov	r3, r0
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f8d3 	bl	800448c <I2C_RequestMemoryWrite>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0a9      	b.n	800444c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2bff      	cmp	r3, #255	@ 0xff
 8004300:	d90e      	bls.n	8004320 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	22ff      	movs	r2, #255	@ 0xff
 8004306:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430c:	b2da      	uxtb	r2, r3
 800430e:	8979      	ldrh	r1, [r7, #10]
 8004310:	2300      	movs	r3, #0
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 faf3 	bl	8004904 <I2C_TransferConfig>
 800431e:	e00f      	b.n	8004340 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800432e:	b2da      	uxtb	r2, r3
 8004330:	8979      	ldrh	r1, [r7, #10]
 8004332:	2300      	movs	r3, #0
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fae2 	bl	8004904 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f972 	bl	800462e <I2C_WaitOnTXISFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e07b      	b.n	800444c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d034      	beq.n	80043f8 <HAL_I2C_Mem_Write+0x1c8>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d130      	bne.n	80043f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439c:	2200      	movs	r2, #0
 800439e:	2180      	movs	r1, #128	@ 0x80
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f8eb 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e04d      	b.n	800444c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2bff      	cmp	r3, #255	@ 0xff
 80043b8:	d90e      	bls.n	80043d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	22ff      	movs	r2, #255	@ 0xff
 80043be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	8979      	ldrh	r1, [r7, #10]
 80043c8:	2300      	movs	r3, #0
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fa97 	bl	8004904 <I2C_TransferConfig>
 80043d6:	e00f      	b.n	80043f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	8979      	ldrh	r1, [r7, #10]
 80043ea:	2300      	movs	r3, #0
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fa86 	bl	8004904 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d19e      	bne.n	8004340 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f958 	bl	80046bc <I2C_WaitOnSTOPFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e01a      	b.n	800444c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2220      	movs	r2, #32
 800441c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b0a      	ldr	r3, [pc, #40]	@ (8004454 <HAL_I2C_Mem_Write+0x224>)
 800442a:	400b      	ands	r3, r1
 800442c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e000      	b.n	800444c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800444a:	2302      	movs	r3, #2
  }
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	fe00e800 	.word	0xfe00e800

08004458 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4798      	blx	r3
  }
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	4608      	mov	r0, r1
 8004496:	4611      	mov	r1, r2
 8004498:	461a      	mov	r2, r3
 800449a:	4603      	mov	r3, r0
 800449c:	817b      	strh	r3, [r7, #10]
 800449e:	460b      	mov	r3, r1
 80044a0:	813b      	strh	r3, [r7, #8]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	8979      	ldrh	r1, [r7, #10]
 80044ac:	4b20      	ldr	r3, [pc, #128]	@ (8004530 <I2C_RequestMemoryWrite+0xa4>)
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fa25 	bl	8004904 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	69b9      	ldr	r1, [r7, #24]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f8b5 	bl	800462e <I2C_WaitOnTXISFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e02c      	b.n	8004528 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d105      	bne.n	80044e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044d4:	893b      	ldrh	r3, [r7, #8]
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80044de:	e015      	b.n	800450c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044e0:	893b      	ldrh	r3, [r7, #8]
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	69b9      	ldr	r1, [r7, #24]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f89b 	bl	800462e <I2C_WaitOnTXISFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e012      	b.n	8004528 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004502:	893b      	ldrh	r3, [r7, #8]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2200      	movs	r2, #0
 8004514:	2180      	movs	r1, #128	@ 0x80
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f830 	bl	800457c <I2C_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	80002000 	.word	0x80002000

08004534 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b02      	cmp	r3, #2
 8004548:	d103      	bne.n	8004552 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d007      	beq.n	8004570 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	619a      	str	r2, [r3, #24]
  }
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	603b      	str	r3, [r7, #0]
 8004588:	4613      	mov	r3, r2
 800458a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800458c:	e03b      	b.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	6839      	ldr	r1, [r7, #0]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f8d6 	bl	8004744 <I2C_IsErrorOccurred>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e041      	b.n	8004626 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d02d      	beq.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fd fdc1 	bl	8002130 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d122      	bne.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4013      	ands	r3, r2
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d113      	bne.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e2:	f043 0220 	orr.w	r2, r3, #32
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e00f      	b.n	8004626 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4013      	ands	r3, r2
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	429a      	cmp	r2, r3
 8004622:	d0b4      	beq.n	800458e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800463a:	e033      	b.n	80046a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f87f 	bl	8004744 <I2C_IsErrorOccurred>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e031      	b.n	80046b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d025      	beq.n	80046a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004658:	f7fd fd6a 	bl	8002130 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	d302      	bcc.n	800466e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d11a      	bne.n	80046a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b02      	cmp	r3, #2
 800467a:	d013      	beq.n	80046a4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e007      	b.n	80046b4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d1c4      	bne.n	800463c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046c8:	e02f      	b.n	800472a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f838 	bl	8004744 <I2C_IsErrorOccurred>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e02d      	b.n	800473a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046de:	f7fd fd27 	bl	8002130 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d302      	bcc.n	80046f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d11a      	bne.n	800472a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b20      	cmp	r3, #32
 8004700:	d013      	beq.n	800472a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	f043 0220 	orr.w	r2, r3, #32
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e007      	b.n	800473a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b20      	cmp	r3, #32
 8004736:	d1c8      	bne.n	80046ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b08a      	sub	sp, #40	@ 0x28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	d068      	beq.n	8004842 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2210      	movs	r2, #16
 8004776:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004778:	e049      	b.n	800480e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004780:	d045      	beq.n	800480e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004782:	f7fd fcd5 	bl	8002130 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	429a      	cmp	r2, r3
 8004790:	d302      	bcc.n	8004798 <I2C_IsErrorOccurred+0x54>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d13a      	bne.n	800480e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ba:	d121      	bne.n	8004800 <I2C_IsErrorOccurred+0xbc>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047c2:	d01d      	beq.n	8004800 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d01a      	beq.n	8004800 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047da:	f7fd fca9 	bl	8002130 <HAL_GetTick>
 80047de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047e0:	e00e      	b.n	8004800 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047e2:	f7fd fca5 	bl	8002130 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b19      	cmp	r3, #25
 80047ee:	d907      	bls.n	8004800 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	f043 0320 	orr.w	r3, r3, #32
 80047f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80047fe:	e006      	b.n	800480e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b20      	cmp	r3, #32
 800480c:	d1e9      	bne.n	80047e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f003 0320 	and.w	r3, r3, #32
 8004818:	2b20      	cmp	r3, #32
 800481a:	d003      	beq.n	8004824 <I2C_IsErrorOccurred+0xe0>
 800481c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0aa      	beq.n	800477a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004828:	2b00      	cmp	r3, #0
 800482a:	d103      	bne.n	8004834 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2220      	movs	r2, #32
 8004832:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	f043 0304 	orr.w	r3, r3, #4
 800483a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00b      	beq.n	800486c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004864:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	f043 0308 	orr.w	r3, r3, #8
 800487c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004886:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00b      	beq.n	80048b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	f043 0302 	orr.w	r3, r3, #2
 800489e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80048b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01c      	beq.n	80048f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f7ff fe3b 	bl	8004534 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6859      	ldr	r1, [r3, #4]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004900 <I2C_IsErrorOccurred+0x1bc>)
 80048ca:	400b      	ands	r3, r1
 80048cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80048f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3728      	adds	r7, #40	@ 0x28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	fe00e800 	.word	0xfe00e800

08004904 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	460b      	mov	r3, r1
 8004910:	817b      	strh	r3, [r7, #10]
 8004912:	4613      	mov	r3, r2
 8004914:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004916:	897b      	ldrh	r3, [r7, #10]
 8004918:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800491c:	7a7b      	ldrb	r3, [r7, #9]
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004924:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	4313      	orrs	r3, r2
 800492e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004932:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	0d5b      	lsrs	r3, r3, #21
 800493e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004942:	4b08      	ldr	r3, [pc, #32]	@ (8004964 <I2C_TransferConfig+0x60>)
 8004944:	430b      	orrs	r3, r1
 8004946:	43db      	mvns	r3, r3
 8004948:	ea02 0103 	and.w	r1, r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	03ff63ff 	.word	0x03ff63ff

08004968 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b20      	cmp	r3, #32
 800497c:	d138      	bne.n	80049f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004988:	2302      	movs	r3, #2
 800498a:	e032      	b.n	80049f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2224      	movs	r2, #36	@ 0x24
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6819      	ldr	r1, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e000      	b.n	80049f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049f0:	2302      	movs	r3, #2
  }
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b085      	sub	sp, #20
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d139      	bne.n	8004a88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e033      	b.n	8004a8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2224      	movs	r2, #36	@ 0x24
 8004a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0201 	bic.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e000      	b.n	8004a8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a9c:	4b04      	ldr	r3, [pc, #16]	@ (8004ab0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40007000 	.word	0x40007000

08004ab4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac2:	d130      	bne.n	8004b26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ac4:	4b23      	ldr	r3, [pc, #140]	@ (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad0:	d038      	beq.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ad2:	4b20      	ldr	r3, [pc, #128]	@ (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ada:	4a1e      	ldr	r2, [pc, #120]	@ (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004adc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ae0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2232      	movs	r2, #50	@ 0x32
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	4a1b      	ldr	r2, [pc, #108]	@ (8004b5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	0c9b      	lsrs	r3, r3, #18
 8004af4:	3301      	adds	r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004af8:	e002      	b.n	8004b00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b00:	4b14      	ldr	r3, [pc, #80]	@ (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b0c:	d102      	bne.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f2      	bne.n	8004afa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b14:	4b0f      	ldr	r3, [pc, #60]	@ (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b20:	d110      	bne.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e00f      	b.n	8004b46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b26:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b32:	d007      	beq.n	8004b44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b34:	4b07      	ldr	r3, [pc, #28]	@ (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b3c:	4a05      	ldr	r2, [pc, #20]	@ (8004b54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40007000 	.word	0x40007000
 8004b58:	20000000 	.word	0x20000000
 8004b5c:	431bde83 	.word	0x431bde83

08004b60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e3ca      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b72:	4b97      	ldr	r3, [pc, #604]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b7c:	4b94      	ldr	r3, [pc, #592]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 80e4 	beq.w	8004d5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <HAL_RCC_OscConfig+0x4a>
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	f040 808b 	bne.w	8004cb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	f040 8087 	bne.w	8004cb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004baa:	4b89      	ldr	r3, [pc, #548]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x62>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e3a2      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1a      	ldr	r2, [r3, #32]
 8004bc6:	4b82      	ldr	r3, [pc, #520]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <HAL_RCC_OscConfig+0x7c>
 8004bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bda:	e005      	b.n	8004be8 <HAL_RCC_OscConfig+0x88>
 8004bdc:	4b7c      	ldr	r3, [pc, #496]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d223      	bcs.n	8004c34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fd55 	bl	80056a0 <RCC_SetFlashLatencyFromMSIRange>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e383      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c00:	4b73      	ldr	r3, [pc, #460]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a72      	ldr	r2, [pc, #456]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c06:	f043 0308 	orr.w	r3, r3, #8
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4b70      	ldr	r3, [pc, #448]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	496d      	ldr	r1, [pc, #436]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c1e:	4b6c      	ldr	r3, [pc, #432]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	4968      	ldr	r1, [pc, #416]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	604b      	str	r3, [r1, #4]
 8004c32:	e025      	b.n	8004c80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c34:	4b66      	ldr	r3, [pc, #408]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a65      	ldr	r2, [pc, #404]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c3a:	f043 0308 	orr.w	r3, r3, #8
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	4b63      	ldr	r3, [pc, #396]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	4960      	ldr	r1, [pc, #384]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c52:	4b5f      	ldr	r3, [pc, #380]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	495b      	ldr	r1, [pc, #364]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fd15 	bl	80056a0 <RCC_SetFlashLatencyFromMSIRange>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e343      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c80:	f000 fc4a 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b52      	ldr	r3, [pc, #328]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	091b      	lsrs	r3, r3, #4
 8004c8c:	f003 030f 	and.w	r3, r3, #15
 8004c90:	4950      	ldr	r1, [pc, #320]	@ (8004dd4 <HAL_RCC_OscConfig+0x274>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	f003 031f 	and.w	r3, r3, #31
 8004c98:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9c:	4a4e      	ldr	r2, [pc, #312]	@ (8004dd8 <HAL_RCC_OscConfig+0x278>)
 8004c9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ca0:	4b4e      	ldr	r3, [pc, #312]	@ (8004ddc <HAL_RCC_OscConfig+0x27c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fd f9f3 	bl	8002090 <HAL_InitTick>
 8004caa:	4603      	mov	r3, r0
 8004cac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d052      	beq.n	8004d5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	e327      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d032      	beq.n	8004d26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cc0:	4b43      	ldr	r3, [pc, #268]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a42      	ldr	r2, [pc, #264]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ccc:	f7fd fa30 	bl	8002130 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cd4:	f7fd fa2c 	bl	8002130 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e310      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cf2:	4b37      	ldr	r3, [pc, #220]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a36      	ldr	r2, [pc, #216]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004cf8:	f043 0308 	orr.w	r3, r3, #8
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4b34      	ldr	r3, [pc, #208]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4931      	ldr	r1, [pc, #196]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d10:	4b2f      	ldr	r3, [pc, #188]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	492c      	ldr	r1, [pc, #176]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	604b      	str	r3, [r1, #4]
 8004d24:	e01a      	b.n	8004d5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d26:	4b2a      	ldr	r3, [pc, #168]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a29      	ldr	r2, [pc, #164]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d32:	f7fd f9fd 	bl	8002130 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d3a:	f7fd f9f9 	bl	8002130 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e2dd      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d4c:	4b20      	ldr	r3, [pc, #128]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <HAL_RCC_OscConfig+0x1da>
 8004d58:	e000      	b.n	8004d5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d074      	beq.n	8004e52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d005      	beq.n	8004d7a <HAL_RCC_OscConfig+0x21a>
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	d10e      	bne.n	8004d92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d10b      	bne.n	8004d92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d7a:	4b15      	ldr	r3, [pc, #84]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d064      	beq.n	8004e50 <HAL_RCC_OscConfig+0x2f0>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d160      	bne.n	8004e50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e2ba      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d9a:	d106      	bne.n	8004daa <HAL_RCC_OscConfig+0x24a>
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0b      	ldr	r2, [pc, #44]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da6:	6013      	str	r3, [r2, #0]
 8004da8:	e026      	b.n	8004df8 <HAL_RCC_OscConfig+0x298>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004db2:	d115      	bne.n	8004de0 <HAL_RCC_OscConfig+0x280>
 8004db4:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a05      	ldr	r2, [pc, #20]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004dba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	4b03      	ldr	r3, [pc, #12]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a02      	ldr	r2, [pc, #8]	@ (8004dd0 <HAL_RCC_OscConfig+0x270>)
 8004dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	e014      	b.n	8004df8 <HAL_RCC_OscConfig+0x298>
 8004dce:	bf00      	nop
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	08008b90 	.word	0x08008b90
 8004dd8:	20000000 	.word	0x20000000
 8004ddc:	20000004 	.word	0x20000004
 8004de0:	4ba0      	ldr	r3, [pc, #640]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a9f      	ldr	r2, [pc, #636]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	4b9d      	ldr	r3, [pc, #628]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a9c      	ldr	r2, [pc, #624]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d013      	beq.n	8004e28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fd f996 	bl	8002130 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fd f992 	bl	8002130 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	@ 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e276      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e1a:	4b92      	ldr	r3, [pc, #584]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0x2a8>
 8004e26:	e014      	b.n	8004e52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e28:	f7fd f982 	bl	8002130 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e30:	f7fd f97e 	bl	8002130 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	@ 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e262      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e42:	4b88      	ldr	r3, [pc, #544]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f0      	bne.n	8004e30 <HAL_RCC_OscConfig+0x2d0>
 8004e4e:	e000      	b.n	8004e52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d060      	beq.n	8004f20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_OscConfig+0x310>
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	2b0c      	cmp	r3, #12
 8004e68:	d119      	bne.n	8004e9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d116      	bne.n	8004e9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e70:	4b7c      	ldr	r3, [pc, #496]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_OscConfig+0x328>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e23f      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e88:	4b76      	ldr	r3, [pc, #472]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	4973      	ldr	r1, [pc, #460]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9c:	e040      	b.n	8004f20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d023      	beq.n	8004eee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea6:	4b6f      	ldr	r3, [pc, #444]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a6e      	ldr	r2, [pc, #440]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb2:	f7fd f93d 	bl	8002130 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eba:	f7fd f939 	bl	8002130 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e21d      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ecc:	4b65      	ldr	r3, [pc, #404]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f0      	beq.n	8004eba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed8:	4b62      	ldr	r3, [pc, #392]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	061b      	lsls	r3, r3, #24
 8004ee6:	495f      	ldr	r1, [pc, #380]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	604b      	str	r3, [r1, #4]
 8004eec:	e018      	b.n	8004f20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eee:	4b5d      	ldr	r3, [pc, #372]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a5c      	ldr	r2, [pc, #368]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004ef4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7fd f919 	bl	8002130 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f02:	f7fd f915 	bl	8002130 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e1f9      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f14:	4b53      	ldr	r3, [pc, #332]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f0      	bne.n	8004f02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d03c      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01c      	beq.n	8004f6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f34:	4b4b      	ldr	r3, [pc, #300]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f3a:	4a4a      	ldr	r2, [pc, #296]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fd f8f4 	bl	8002130 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f4c:	f7fd f8f0 	bl	8002130 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e1d4      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f5e:	4b41      	ldr	r3, [pc, #260]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0ef      	beq.n	8004f4c <HAL_RCC_OscConfig+0x3ec>
 8004f6c:	e01b      	b.n	8004fa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f74:	4a3b      	ldr	r2, [pc, #236]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7e:	f7fd f8d7 	bl	8002130 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f86:	f7fd f8d3 	bl	8002130 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e1b7      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f98:	4b32      	ldr	r3, [pc, #200]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1ef      	bne.n	8004f86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80a6 	beq.w	8005100 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10d      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc4:	4b27      	ldr	r3, [pc, #156]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc8:	4a26      	ldr	r2, [pc, #152]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fd0:	4b24      	ldr	r3, [pc, #144]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd8:	60bb      	str	r3, [r7, #8]
 8004fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fe0:	4b21      	ldr	r3, [pc, #132]	@ (8005068 <HAL_RCC_OscConfig+0x508>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d118      	bne.n	800501e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fec:	4b1e      	ldr	r3, [pc, #120]	@ (8005068 <HAL_RCC_OscConfig+0x508>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8005068 <HAL_RCC_OscConfig+0x508>)
 8004ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ff6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ff8:	f7fd f89a 	bl	8002130 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005000:	f7fd f896 	bl	8002130 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e17a      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005012:	4b15      	ldr	r3, [pc, #84]	@ (8005068 <HAL_RCC_OscConfig+0x508>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d108      	bne.n	8005038 <HAL_RCC_OscConfig+0x4d8>
 8005026:	4b0f      	ldr	r3, [pc, #60]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800502c:	4a0d      	ldr	r2, [pc, #52]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 800502e:	f043 0301 	orr.w	r3, r3, #1
 8005032:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005036:	e029      	b.n	800508c <HAL_RCC_OscConfig+0x52c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b05      	cmp	r3, #5
 800503e:	d115      	bne.n	800506c <HAL_RCC_OscConfig+0x50c>
 8005040:	4b08      	ldr	r3, [pc, #32]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005046:	4a07      	ldr	r2, [pc, #28]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8005048:	f043 0304 	orr.w	r3, r3, #4
 800504c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005050:	4b04      	ldr	r3, [pc, #16]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005056:	4a03      	ldr	r2, [pc, #12]	@ (8005064 <HAL_RCC_OscConfig+0x504>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005060:	e014      	b.n	800508c <HAL_RCC_OscConfig+0x52c>
 8005062:	bf00      	nop
 8005064:	40021000 	.word	0x40021000
 8005068:	40007000 	.word	0x40007000
 800506c:	4b9c      	ldr	r3, [pc, #624]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005072:	4a9b      	ldr	r2, [pc, #620]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800507c:	4b98      	ldr	r3, [pc, #608]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005082:	4a97      	ldr	r2, [pc, #604]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 8005084:	f023 0304 	bic.w	r3, r3, #4
 8005088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d016      	beq.n	80050c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005094:	f7fd f84c 	bl	8002130 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fd f848 	bl	8002130 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e12a      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b2:	4b8b      	ldr	r3, [pc, #556]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0ed      	beq.n	800509c <HAL_RCC_OscConfig+0x53c>
 80050c0:	e015      	b.n	80050ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c2:	f7fd f835 	bl	8002130 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fd f831 	bl	8002130 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e113      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050e0:	4b7f      	ldr	r3, [pc, #508]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1ed      	bne.n	80050ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ee:	7ffb      	ldrb	r3, [r7, #31]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d105      	bne.n	8005100 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f4:	4b7a      	ldr	r3, [pc, #488]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 80050f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f8:	4a79      	ldr	r2, [pc, #484]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 80050fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050fe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80fe 	beq.w	8005306 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510e:	2b02      	cmp	r3, #2
 8005110:	f040 80d0 	bne.w	80052b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005114:	4b72      	ldr	r3, [pc, #456]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f003 0203 	and.w	r2, r3, #3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	429a      	cmp	r2, r3
 8005126:	d130      	bne.n	800518a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005132:	3b01      	subs	r3, #1
 8005134:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d127      	bne.n	800518a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005144:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d11f      	bne.n	800518a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005154:	2a07      	cmp	r2, #7
 8005156:	bf14      	ite	ne
 8005158:	2201      	movne	r2, #1
 800515a:	2200      	moveq	r2, #0
 800515c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800515e:	4293      	cmp	r3, r2
 8005160:	d113      	bne.n	800518a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	3b01      	subs	r3, #1
 8005170:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005172:	429a      	cmp	r2, r3
 8005174:	d109      	bne.n	800518a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	3b01      	subs	r3, #1
 8005184:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d06e      	beq.n	8005268 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b0c      	cmp	r3, #12
 800518e:	d069      	beq.n	8005264 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005190:	4b53      	ldr	r3, [pc, #332]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800519c:	4b50      	ldr	r3, [pc, #320]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0ad      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80051ac:	4b4c      	ldr	r3, [pc, #304]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a4b      	ldr	r2, [pc, #300]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 80051b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051b8:	f7fc ffba 	bl	8002130 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c0:	f7fc ffb6 	bl	8002130 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e09a      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d2:	4b43      	ldr	r3, [pc, #268]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051de:	4b40      	ldr	r3, [pc, #256]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	4b40      	ldr	r3, [pc, #256]	@ (80052e4 <HAL_RCC_OscConfig+0x784>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80051ee:	3a01      	subs	r2, #1
 80051f0:	0112      	lsls	r2, r2, #4
 80051f2:	4311      	orrs	r1, r2
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051f8:	0212      	lsls	r2, r2, #8
 80051fa:	4311      	orrs	r1, r2
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005200:	0852      	lsrs	r2, r2, #1
 8005202:	3a01      	subs	r2, #1
 8005204:	0552      	lsls	r2, r2, #21
 8005206:	4311      	orrs	r1, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800520c:	0852      	lsrs	r2, r2, #1
 800520e:	3a01      	subs	r2, #1
 8005210:	0652      	lsls	r2, r2, #25
 8005212:	4311      	orrs	r1, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005218:	0912      	lsrs	r2, r2, #4
 800521a:	0452      	lsls	r2, r2, #17
 800521c:	430a      	orrs	r2, r1
 800521e:	4930      	ldr	r1, [pc, #192]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 8005220:	4313      	orrs	r3, r2
 8005222:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005224:	4b2e      	ldr	r3, [pc, #184]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2d      	ldr	r2, [pc, #180]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 800522a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800522e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005230:	4b2b      	ldr	r3, [pc, #172]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a2a      	ldr	r2, [pc, #168]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 8005236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800523a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800523c:	f7fc ff78 	bl	8002130 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005244:	f7fc ff74 	bl	8002130 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e058      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005256:	4b22      	ldr	r3, [pc, #136]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005262:	e050      	b.n	8005306 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e04f      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005268:	4b1d      	ldr	r3, [pc, #116]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d148      	bne.n	8005306 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005274:	4b1a      	ldr	r3, [pc, #104]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a19      	ldr	r2, [pc, #100]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 800527a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800527e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005280:	4b17      	ldr	r3, [pc, #92]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4a16      	ldr	r2, [pc, #88]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 8005286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800528a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800528c:	f7fc ff50 	bl	8002130 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005294:	f7fc ff4c 	bl	8002130 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e030      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052a6:	4b0e      	ldr	r3, [pc, #56]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0x734>
 80052b2:	e028      	b.n	8005306 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	d023      	beq.n	8005302 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ba:	4b09      	ldr	r3, [pc, #36]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a08      	ldr	r2, [pc, #32]	@ (80052e0 <HAL_RCC_OscConfig+0x780>)
 80052c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c6:	f7fc ff33 	bl	8002130 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052cc:	e00c      	b.n	80052e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ce:	f7fc ff2f 	bl	8002130 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d905      	bls.n	80052e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e013      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
 80052e0:	40021000 	.word	0x40021000
 80052e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e8:	4b09      	ldr	r3, [pc, #36]	@ (8005310 <HAL_RCC_OscConfig+0x7b0>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1ec      	bne.n	80052ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80052f4:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <HAL_RCC_OscConfig+0x7b0>)
 80052f6:	68da      	ldr	r2, [r3, #12]
 80052f8:	4905      	ldr	r1, [pc, #20]	@ (8005310 <HAL_RCC_OscConfig+0x7b0>)
 80052fa:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <HAL_RCC_OscConfig+0x7b4>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	60cb      	str	r3, [r1, #12]
 8005300:	e001      	b.n	8005306 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3720      	adds	r7, #32
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000
 8005314:	feeefffc 	.word	0xfeeefffc

08005318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0e7      	b.n	80054fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800532c:	4b75      	ldr	r3, [pc, #468]	@ (8005504 <HAL_RCC_ClockConfig+0x1ec>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d910      	bls.n	800535c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b72      	ldr	r3, [pc, #456]	@ (8005504 <HAL_RCC_ClockConfig+0x1ec>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f023 0207 	bic.w	r2, r3, #7
 8005342:	4970      	ldr	r1, [pc, #448]	@ (8005504 <HAL_RCC_ClockConfig+0x1ec>)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	4313      	orrs	r3, r2
 8005348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800534a:	4b6e      	ldr	r3, [pc, #440]	@ (8005504 <HAL_RCC_ClockConfig+0x1ec>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0cf      	b.n	80054fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d010      	beq.n	800538a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	4b66      	ldr	r3, [pc, #408]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005374:	429a      	cmp	r2, r3
 8005376:	d908      	bls.n	800538a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005378:	4b63      	ldr	r3, [pc, #396]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4960      	ldr	r1, [pc, #384]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 8005386:	4313      	orrs	r3, r2
 8005388:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d04c      	beq.n	8005430 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b03      	cmp	r3, #3
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800539e:	4b5a      	ldr	r3, [pc, #360]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d121      	bne.n	80053ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e0a6      	b.n	80054fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d107      	bne.n	80053c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053b6:	4b54      	ldr	r3, [pc, #336]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d115      	bne.n	80053ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e09a      	b.n	80054fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d107      	bne.n	80053de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053ce:	4b4e      	ldr	r3, [pc, #312]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e08e      	b.n	80054fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053de:	4b4a      	ldr	r3, [pc, #296]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e086      	b.n	80054fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053ee:	4b46      	ldr	r3, [pc, #280]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f023 0203 	bic.w	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	4943      	ldr	r1, [pc, #268]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005400:	f7fc fe96 	bl	8002130 <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005406:	e00a      	b.n	800541e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005408:	f7fc fe92 	bl	8002130 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e06e      	b.n	80054fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541e:	4b3a      	ldr	r3, [pc, #232]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 020c 	and.w	r2, r3, #12
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	429a      	cmp	r2, r3
 800542e:	d1eb      	bne.n	8005408 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d010      	beq.n	800545e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	4b31      	ldr	r3, [pc, #196]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005448:	429a      	cmp	r2, r3
 800544a:	d208      	bcs.n	800545e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800544c:	4b2e      	ldr	r3, [pc, #184]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	492b      	ldr	r1, [pc, #172]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 800545a:	4313      	orrs	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800545e:	4b29      	ldr	r3, [pc, #164]	@ (8005504 <HAL_RCC_ClockConfig+0x1ec>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d210      	bcs.n	800548e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546c:	4b25      	ldr	r3, [pc, #148]	@ (8005504 <HAL_RCC_ClockConfig+0x1ec>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f023 0207 	bic.w	r2, r3, #7
 8005474:	4923      	ldr	r1, [pc, #140]	@ (8005504 <HAL_RCC_ClockConfig+0x1ec>)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	4313      	orrs	r3, r2
 800547a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800547c:	4b21      	ldr	r3, [pc, #132]	@ (8005504 <HAL_RCC_ClockConfig+0x1ec>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d001      	beq.n	800548e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e036      	b.n	80054fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d008      	beq.n	80054ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800549a:	4b1b      	ldr	r3, [pc, #108]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	4918      	ldr	r1, [pc, #96]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d009      	beq.n	80054cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054b8:	4b13      	ldr	r3, [pc, #76]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4910      	ldr	r1, [pc, #64]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054cc:	f000 f824 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 80054d0:	4602      	mov	r2, r0
 80054d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005508 <HAL_RCC_ClockConfig+0x1f0>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	091b      	lsrs	r3, r3, #4
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	490b      	ldr	r1, [pc, #44]	@ (800550c <HAL_RCC_ClockConfig+0x1f4>)
 80054de:	5ccb      	ldrb	r3, [r1, r3]
 80054e0:	f003 031f 	and.w	r3, r3, #31
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
 80054e8:	4a09      	ldr	r2, [pc, #36]	@ (8005510 <HAL_RCC_ClockConfig+0x1f8>)
 80054ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054ec:	4b09      	ldr	r3, [pc, #36]	@ (8005514 <HAL_RCC_ClockConfig+0x1fc>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fc fdcd 	bl	8002090 <HAL_InitTick>
 80054f6:	4603      	mov	r3, r0
 80054f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80054fa:	7afb      	ldrb	r3, [r7, #11]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40022000 	.word	0x40022000
 8005508:	40021000 	.word	0x40021000
 800550c:	08008b90 	.word	0x08008b90
 8005510:	20000000 	.word	0x20000000
 8005514:	20000004 	.word	0x20000004

08005518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005518:	b480      	push	{r7}
 800551a:	b089      	sub	sp, #36	@ 0x24
 800551c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	2300      	movs	r3, #0
 8005524:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005526:	4b3e      	ldr	r3, [pc, #248]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x108>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f003 030c 	and.w	r3, r3, #12
 800552e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005530:	4b3b      	ldr	r3, [pc, #236]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x108>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0x34>
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b0c      	cmp	r3, #12
 8005544:	d121      	bne.n	800558a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d11e      	bne.n	800558a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800554c:	4b34      	ldr	r3, [pc, #208]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x108>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b00      	cmp	r3, #0
 8005556:	d107      	bne.n	8005568 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005558:	4b31      	ldr	r3, [pc, #196]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x108>)
 800555a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800555e:	0a1b      	lsrs	r3, r3, #8
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	e005      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005568:	4b2d      	ldr	r3, [pc, #180]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x108>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	091b      	lsrs	r3, r3, #4
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005574:	4a2b      	ldr	r2, [pc, #172]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800557c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10d      	bne.n	80055a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005588:	e00a      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b04      	cmp	r3, #4
 800558e:	d102      	bne.n	8005596 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005590:	4b25      	ldr	r3, [pc, #148]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x110>)
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	e004      	b.n	80055a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2b08      	cmp	r3, #8
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800559c:	4b23      	ldr	r3, [pc, #140]	@ (800562c <HAL_RCC_GetSysClockFreq+0x114>)
 800559e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b0c      	cmp	r3, #12
 80055a4:	d134      	bne.n	8005610 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x108>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d003      	beq.n	80055be <HAL_RCC_GetSysClockFreq+0xa6>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d003      	beq.n	80055c4 <HAL_RCC_GetSysClockFreq+0xac>
 80055bc:	e005      	b.n	80055ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80055be:	4b1a      	ldr	r3, [pc, #104]	@ (8005628 <HAL_RCC_GetSysClockFreq+0x110>)
 80055c0:	617b      	str	r3, [r7, #20]
      break;
 80055c2:	e005      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80055c4:	4b19      	ldr	r3, [pc, #100]	@ (800562c <HAL_RCC_GetSysClockFreq+0x114>)
 80055c6:	617b      	str	r3, [r7, #20]
      break;
 80055c8:	e002      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	617b      	str	r3, [r7, #20]
      break;
 80055ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055d0:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x108>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	091b      	lsrs	r3, r3, #4
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	3301      	adds	r3, #1
 80055dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055de:	4b10      	ldr	r3, [pc, #64]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x108>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	0a1b      	lsrs	r3, r3, #8
 80055e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	fb03 f202 	mul.w	r2, r3, r2
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x108>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	0e5b      	lsrs	r3, r3, #25
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	3301      	adds	r3, #1
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	fbb2 f3f3 	udiv	r3, r2, r3
 800560e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005610:	69bb      	ldr	r3, [r7, #24]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3724      	adds	r7, #36	@ 0x24
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40021000 	.word	0x40021000
 8005624:	08008ba8 	.word	0x08008ba8
 8005628:	00f42400 	.word	0x00f42400
 800562c:	007a1200 	.word	0x007a1200

08005630 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005634:	4b03      	ldr	r3, [pc, #12]	@ (8005644 <HAL_RCC_GetHCLKFreq+0x14>)
 8005636:	681b      	ldr	r3, [r3, #0]
}
 8005638:	4618      	mov	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000000 	.word	0x20000000

08005648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800564c:	f7ff fff0 	bl	8005630 <HAL_RCC_GetHCLKFreq>
 8005650:	4602      	mov	r2, r0
 8005652:	4b06      	ldr	r3, [pc, #24]	@ (800566c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	4904      	ldr	r1, [pc, #16]	@ (8005670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800565e:	5ccb      	ldrb	r3, [r1, r3]
 8005660:	f003 031f 	and.w	r3, r3, #31
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005668:	4618      	mov	r0, r3
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40021000 	.word	0x40021000
 8005670:	08008ba0 	.word	0x08008ba0

08005674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005678:	f7ff ffda 	bl	8005630 <HAL_RCC_GetHCLKFreq>
 800567c:	4602      	mov	r2, r0
 800567e:	4b06      	ldr	r3, [pc, #24]	@ (8005698 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	0adb      	lsrs	r3, r3, #11
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	4904      	ldr	r1, [pc, #16]	@ (800569c <HAL_RCC_GetPCLK2Freq+0x28>)
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40021000 	.word	0x40021000
 800569c:	08008ba0 	.word	0x08008ba0

080056a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80056a8:	2300      	movs	r3, #0
 80056aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80056ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056b8:	f7ff f9ee 	bl	8004a98 <HAL_PWREx_GetVoltageRange>
 80056bc:	6178      	str	r0, [r7, #20]
 80056be:	e014      	b.n	80056ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056c0:	4b25      	ldr	r3, [pc, #148]	@ (8005758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c4:	4a24      	ldr	r2, [pc, #144]	@ (8005758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80056cc:	4b22      	ldr	r3, [pc, #136]	@ (8005758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056d8:	f7ff f9de 	bl	8004a98 <HAL_PWREx_GetVoltageRange>
 80056dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056de:	4b1e      	ldr	r3, [pc, #120]	@ (8005758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005758 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056f0:	d10b      	bne.n	800570a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b80      	cmp	r3, #128	@ 0x80
 80056f6:	d919      	bls.n	800572c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80056fc:	d902      	bls.n	8005704 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056fe:	2302      	movs	r3, #2
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	e013      	b.n	800572c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005704:	2301      	movs	r3, #1
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	e010      	b.n	800572c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b80      	cmp	r3, #128	@ 0x80
 800570e:	d902      	bls.n	8005716 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005710:	2303      	movs	r3, #3
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	e00a      	b.n	800572c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b80      	cmp	r3, #128	@ 0x80
 800571a:	d102      	bne.n	8005722 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800571c:	2302      	movs	r3, #2
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	e004      	b.n	800572c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b70      	cmp	r3, #112	@ 0x70
 8005726:	d101      	bne.n	800572c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005728:	2301      	movs	r3, #1
 800572a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800572c:	4b0b      	ldr	r3, [pc, #44]	@ (800575c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f023 0207 	bic.w	r2, r3, #7
 8005734:	4909      	ldr	r1, [pc, #36]	@ (800575c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800573c:	4b07      	ldr	r3, [pc, #28]	@ (800575c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	429a      	cmp	r2, r3
 8005748:	d001      	beq.n	800574e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e000      	b.n	8005750 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40021000 	.word	0x40021000
 800575c:	40022000 	.word	0x40022000

08005760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005768:	2300      	movs	r3, #0
 800576a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800576c:	2300      	movs	r3, #0
 800576e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005778:	2b00      	cmp	r3, #0
 800577a:	d041      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005780:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005784:	d02a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005786:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800578a:	d824      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800578c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005790:	d008      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005792:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005796:	d81e      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800579c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057a0:	d010      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80057a2:	e018      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057a4:	4b86      	ldr	r3, [pc, #536]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	4a85      	ldr	r2, [pc, #532]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057b0:	e015      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3304      	adds	r3, #4
 80057b6:	2100      	movs	r1, #0
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 fabb 	bl	8005d34 <RCCEx_PLLSAI1_Config>
 80057be:	4603      	mov	r3, r0
 80057c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057c2:	e00c      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3320      	adds	r3, #32
 80057c8:	2100      	movs	r1, #0
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fba6 	bl	8005f1c <RCCEx_PLLSAI2_Config>
 80057d0:	4603      	mov	r3, r0
 80057d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057d4:	e003      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	74fb      	strb	r3, [r7, #19]
      break;
 80057da:	e000      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80057dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057de:	7cfb      	ldrb	r3, [r7, #19]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10b      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057e4:	4b76      	ldr	r3, [pc, #472]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057f2:	4973      	ldr	r1, [pc, #460]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80057fa:	e001      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fc:	7cfb      	ldrb	r3, [r7, #19]
 80057fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d041      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005810:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005814:	d02a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005816:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800581a:	d824      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800581c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005820:	d008      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005822:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005826:	d81e      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800582c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005830:	d010      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005832:	e018      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005834:	4b62      	ldr	r3, [pc, #392]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	4a61      	ldr	r2, [pc, #388]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800583a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800583e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005840:	e015      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3304      	adds	r3, #4
 8005846:	2100      	movs	r1, #0
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fa73 	bl	8005d34 <RCCEx_PLLSAI1_Config>
 800584e:	4603      	mov	r3, r0
 8005850:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005852:	e00c      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3320      	adds	r3, #32
 8005858:	2100      	movs	r1, #0
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fb5e 	bl	8005f1c <RCCEx_PLLSAI2_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005864:	e003      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	74fb      	strb	r3, [r7, #19]
      break;
 800586a:	e000      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800586c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005874:	4b52      	ldr	r3, [pc, #328]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005882:	494f      	ldr	r1, [pc, #316]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800588a:	e001      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588c:	7cfb      	ldrb	r3, [r7, #19]
 800588e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 80a0 	beq.w	80059de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800589e:	2300      	movs	r3, #0
 80058a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058a2:	4b47      	ldr	r3, [pc, #284]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80058b2:	2300      	movs	r3, #0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00d      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b8:	4b41      	ldr	r3, [pc, #260]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058bc:	4a40      	ldr	r2, [pc, #256]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058c4:	4b3e      	ldr	r3, [pc, #248]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058cc:	60bb      	str	r3, [r7, #8]
 80058ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058d0:	2301      	movs	r3, #1
 80058d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d4:	4b3b      	ldr	r3, [pc, #236]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a3a      	ldr	r2, [pc, #232]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058e0:	f7fc fc26 	bl	8002130 <HAL_GetTick>
 80058e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058e6:	e009      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e8:	f7fc fc22 	bl	8002130 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d902      	bls.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	74fb      	strb	r3, [r7, #19]
        break;
 80058fa:	e005      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058fc:	4b31      	ldr	r3, [pc, #196]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005904:	2b00      	cmp	r3, #0
 8005906:	d0ef      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005908:	7cfb      	ldrb	r3, [r7, #19]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d15c      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800590e:	4b2c      	ldr	r3, [pc, #176]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005914:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005918:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01f      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	429a      	cmp	r2, r3
 800592a:	d019      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800592c:	4b24      	ldr	r3, [pc, #144]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005936:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005938:	4b21      	ldr	r3, [pc, #132]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800593e:	4a20      	ldr	r2, [pc, #128]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005948:	4b1d      	ldr	r3, [pc, #116]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800594a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800594e:	4a1c      	ldr	r2, [pc, #112]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005950:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005958:	4a19      	ldr	r2, [pc, #100]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596a:	f7fc fbe1 	bl	8002130 <HAL_GetTick>
 800596e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005970:	e00b      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005972:	f7fc fbdd 	bl	8002130 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005980:	4293      	cmp	r3, r2
 8005982:	d902      	bls.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	74fb      	strb	r3, [r7, #19]
            break;
 8005988:	e006      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800598c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0ec      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005998:	7cfb      	ldrb	r3, [r7, #19]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10c      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800599e:	4b08      	ldr	r3, [pc, #32]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ae:	4904      	ldr	r1, [pc, #16]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80059b6:	e009      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059b8:	7cfb      	ldrb	r3, [r7, #19]
 80059ba:	74bb      	strb	r3, [r7, #18]
 80059bc:	e006      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80059be:	bf00      	nop
 80059c0:	40021000 	.word	0x40021000
 80059c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c8:	7cfb      	ldrb	r3, [r7, #19]
 80059ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059cc:	7c7b      	ldrb	r3, [r7, #17]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d105      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059d2:	4b9e      	ldr	r3, [pc, #632]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d6:	4a9d      	ldr	r2, [pc, #628]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059ea:	4b98      	ldr	r3, [pc, #608]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f0:	f023 0203 	bic.w	r2, r3, #3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f8:	4994      	ldr	r1, [pc, #592]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a0c:	4b8f      	ldr	r3, [pc, #572]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a12:	f023 020c 	bic.w	r2, r3, #12
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1a:	498c      	ldr	r1, [pc, #560]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a2e:	4b87      	ldr	r3, [pc, #540]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3c:	4983      	ldr	r1, [pc, #524]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a50:	4b7e      	ldr	r3, [pc, #504]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a5e:	497b      	ldr	r1, [pc, #492]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a72:	4b76      	ldr	r3, [pc, #472]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a80:	4972      	ldr	r1, [pc, #456]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a94:	4b6d      	ldr	r3, [pc, #436]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa2:	496a      	ldr	r1, [pc, #424]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ab6:	4b65      	ldr	r3, [pc, #404]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005abc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac4:	4961      	ldr	r1, [pc, #388]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ad8:	4b5c      	ldr	r3, [pc, #368]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ade:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae6:	4959      	ldr	r1, [pc, #356]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005afa:	4b54      	ldr	r3, [pc, #336]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b00:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b08:	4950      	ldr	r1, [pc, #320]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b1c:	4b4b      	ldr	r3, [pc, #300]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b2a:	4948      	ldr	r1, [pc, #288]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b3e:	4b43      	ldr	r3, [pc, #268]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4c:	493f      	ldr	r1, [pc, #252]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d028      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b60:	4b3a      	ldr	r3, [pc, #232]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b6e:	4937      	ldr	r1, [pc, #220]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b7e:	d106      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b80:	4b32      	ldr	r3, [pc, #200]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	4a31      	ldr	r2, [pc, #196]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b8a:	60d3      	str	r3, [r2, #12]
 8005b8c:	e011      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b96:	d10c      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 f8c8 	bl	8005d34 <RCCEx_PLLSAI1_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ba8:	7cfb      	ldrb	r3, [r7, #19]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005bae:	7cfb      	ldrb	r3, [r7, #19]
 8005bb0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d028      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bbe:	4b23      	ldr	r3, [pc, #140]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bcc:	491f      	ldr	r1, [pc, #124]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bdc:	d106      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bde:	4b1b      	ldr	r3, [pc, #108]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005be8:	60d3      	str	r3, [r2, #12]
 8005bea:	e011      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bf4:	d10c      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 f899 	bl	8005d34 <RCCEx_PLLSAI1_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c06:	7cfb      	ldrb	r3, [r7, #19]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005c0c:	7cfb      	ldrb	r3, [r7, #19]
 8005c0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d02b      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c2a:	4908      	ldr	r1, [pc, #32]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c3a:	d109      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c3c:	4b03      	ldr	r3, [pc, #12]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4a02      	ldr	r2, [pc, #8]	@ (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c46:	60d3      	str	r3, [r2, #12]
 8005c48:	e014      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c4a:	bf00      	nop
 8005c4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c58:	d10c      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	2101      	movs	r1, #1
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 f867 	bl	8005d34 <RCCEx_PLLSAI1_Config>
 8005c66:	4603      	mov	r3, r0
 8005c68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c6a:	7cfb      	ldrb	r3, [r7, #19]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005c70:	7cfb      	ldrb	r3, [r7, #19]
 8005c72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d02f      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c80:	4b2b      	ldr	r3, [pc, #172]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c86:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c8e:	4928      	ldr	r1, [pc, #160]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c9e:	d10d      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	2102      	movs	r1, #2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f844 	bl	8005d34 <RCCEx_PLLSAI1_Config>
 8005cac:	4603      	mov	r3, r0
 8005cae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cb0:	7cfb      	ldrb	r3, [r7, #19]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d014      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005cb6:	7cfb      	ldrb	r3, [r7, #19]
 8005cb8:	74bb      	strb	r3, [r7, #18]
 8005cba:	e011      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3320      	adds	r3, #32
 8005cca:	2102      	movs	r1, #2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f925 	bl	8005f1c <RCCEx_PLLSAI2_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005cdc:	7cfb      	ldrb	r3, [r7, #19]
 8005cde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cec:	4b10      	ldr	r3, [pc, #64]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cfa:	490d      	ldr	r1, [pc, #52]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d0e:	4b08      	ldr	r3, [pc, #32]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d1e:	4904      	ldr	r1, [pc, #16]	@ (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d26:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40021000 	.word	0x40021000

08005d34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d42:	4b75      	ldr	r3, [pc, #468]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d018      	beq.n	8005d80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d4e:	4b72      	ldr	r3, [pc, #456]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f003 0203 	and.w	r2, r3, #3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d10d      	bne.n	8005d7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
       ||
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d66:	4b6c      	ldr	r3, [pc, #432]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	091b      	lsrs	r3, r3, #4
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
       ||
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d047      	beq.n	8005e0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	73fb      	strb	r3, [r7, #15]
 8005d7e:	e044      	b.n	8005e0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d018      	beq.n	8005dba <RCCEx_PLLSAI1_Config+0x86>
 8005d88:	2b03      	cmp	r3, #3
 8005d8a:	d825      	bhi.n	8005dd8 <RCCEx_PLLSAI1_Config+0xa4>
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d002      	beq.n	8005d96 <RCCEx_PLLSAI1_Config+0x62>
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d009      	beq.n	8005da8 <RCCEx_PLLSAI1_Config+0x74>
 8005d94:	e020      	b.n	8005dd8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d96:	4b60      	ldr	r3, [pc, #384]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d11d      	bne.n	8005dde <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005da6:	e01a      	b.n	8005dde <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005da8:	4b5b      	ldr	r3, [pc, #364]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d116      	bne.n	8005de2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005db8:	e013      	b.n	8005de2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dba:	4b57      	ldr	r3, [pc, #348]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10f      	bne.n	8005de6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dc6:	4b54      	ldr	r3, [pc, #336]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d109      	bne.n	8005de6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dd6:	e006      	b.n	8005de6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
      break;
 8005ddc:	e004      	b.n	8005de8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dde:	bf00      	nop
 8005de0:	e002      	b.n	8005de8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005de2:	bf00      	nop
 8005de4:	e000      	b.n	8005de8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005de6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10d      	bne.n	8005e0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dee:	4b4a      	ldr	r3, [pc, #296]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6819      	ldr	r1, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	011b      	lsls	r3, r3, #4
 8005e02:	430b      	orrs	r3, r1
 8005e04:	4944      	ldr	r1, [pc, #272]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d17d      	bne.n	8005f0c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005e10:	4b41      	ldr	r3, [pc, #260]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a40      	ldr	r2, [pc, #256]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1c:	f7fc f988 	bl	8002130 <HAL_GetTick>
 8005e20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e22:	e009      	b.n	8005e38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e24:	f7fc f984 	bl	8002130 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d902      	bls.n	8005e38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	73fb      	strb	r3, [r7, #15]
        break;
 8005e36:	e005      	b.n	8005e44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e38:	4b37      	ldr	r3, [pc, #220]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1ef      	bne.n	8005e24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d160      	bne.n	8005f0c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d111      	bne.n	8005e74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e50:	4b31      	ldr	r3, [pc, #196]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6892      	ldr	r2, [r2, #8]
 8005e60:	0211      	lsls	r1, r2, #8
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	68d2      	ldr	r2, [r2, #12]
 8005e66:	0912      	lsrs	r2, r2, #4
 8005e68:	0452      	lsls	r2, r2, #17
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	492a      	ldr	r1, [pc, #168]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	610b      	str	r3, [r1, #16]
 8005e72:	e027      	b.n	8005ec4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d112      	bne.n	8005ea0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e7a:	4b27      	ldr	r3, [pc, #156]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005e82:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6892      	ldr	r2, [r2, #8]
 8005e8a:	0211      	lsls	r1, r2, #8
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6912      	ldr	r2, [r2, #16]
 8005e90:	0852      	lsrs	r2, r2, #1
 8005e92:	3a01      	subs	r2, #1
 8005e94:	0552      	lsls	r2, r2, #21
 8005e96:	430a      	orrs	r2, r1
 8005e98:	491f      	ldr	r1, [pc, #124]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	610b      	str	r3, [r1, #16]
 8005e9e:	e011      	b.n	8005ec4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005ea8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6892      	ldr	r2, [r2, #8]
 8005eb0:	0211      	lsls	r1, r2, #8
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6952      	ldr	r2, [r2, #20]
 8005eb6:	0852      	lsrs	r2, r2, #1
 8005eb8:	3a01      	subs	r2, #1
 8005eba:	0652      	lsls	r2, r2, #25
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	4916      	ldr	r1, [pc, #88]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005ec4:	4b14      	ldr	r3, [pc, #80]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a13      	ldr	r2, [pc, #76]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ece:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ed0:	f7fc f92e 	bl	8002130 <HAL_GetTick>
 8005ed4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ed6:	e009      	b.n	8005eec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ed8:	f7fc f92a 	bl	8002130 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d902      	bls.n	8005eec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	73fb      	strb	r3, [r7, #15]
          break;
 8005eea:	e005      	b.n	8005ef8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005eec:	4b0a      	ldr	r3, [pc, #40]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0ef      	beq.n	8005ed8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005efe:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	4904      	ldr	r1, [pc, #16]	@ (8005f18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40021000 	.word	0x40021000

08005f1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f2a:	4b6a      	ldr	r3, [pc, #424]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d018      	beq.n	8005f68 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f36:	4b67      	ldr	r3, [pc, #412]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0203 	and.w	r2, r3, #3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d10d      	bne.n	8005f62 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
       ||
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f4e:	4b61      	ldr	r3, [pc, #388]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	091b      	lsrs	r3, r3, #4
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
       ||
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d047      	beq.n	8005ff2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]
 8005f66:	e044      	b.n	8005ff2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d018      	beq.n	8005fa2 <RCCEx_PLLSAI2_Config+0x86>
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d825      	bhi.n	8005fc0 <RCCEx_PLLSAI2_Config+0xa4>
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d002      	beq.n	8005f7e <RCCEx_PLLSAI2_Config+0x62>
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d009      	beq.n	8005f90 <RCCEx_PLLSAI2_Config+0x74>
 8005f7c:	e020      	b.n	8005fc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f7e:	4b55      	ldr	r3, [pc, #340]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d11d      	bne.n	8005fc6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f8e:	e01a      	b.n	8005fc6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f90:	4b50      	ldr	r3, [pc, #320]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d116      	bne.n	8005fca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa0:	e013      	b.n	8005fca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005fa2:	4b4c      	ldr	r3, [pc, #304]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10f      	bne.n	8005fce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fae:	4b49      	ldr	r3, [pc, #292]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d109      	bne.n	8005fce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fbe:	e006      	b.n	8005fce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc4:	e004      	b.n	8005fd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fc6:	bf00      	nop
 8005fc8:	e002      	b.n	8005fd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fca:	bf00      	nop
 8005fcc:	e000      	b.n	8005fd0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fce:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10d      	bne.n	8005ff2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6819      	ldr	r1, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	430b      	orrs	r3, r1
 8005fec:	4939      	ldr	r1, [pc, #228]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d167      	bne.n	80060c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ff8:	4b36      	ldr	r3, [pc, #216]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a35      	ldr	r2, [pc, #212]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006004:	f7fc f894 	bl	8002130 <HAL_GetTick>
 8006008:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800600a:	e009      	b.n	8006020 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800600c:	f7fc f890 	bl	8002130 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d902      	bls.n	8006020 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	73fb      	strb	r3, [r7, #15]
        break;
 800601e:	e005      	b.n	800602c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006020:	4b2c      	ldr	r3, [pc, #176]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1ef      	bne.n	800600c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d14a      	bne.n	80060c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d111      	bne.n	800605c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006038:	4b26      	ldr	r3, [pc, #152]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6892      	ldr	r2, [r2, #8]
 8006048:	0211      	lsls	r1, r2, #8
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	68d2      	ldr	r2, [r2, #12]
 800604e:	0912      	lsrs	r2, r2, #4
 8006050:	0452      	lsls	r2, r2, #17
 8006052:	430a      	orrs	r2, r1
 8006054:	491f      	ldr	r1, [pc, #124]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006056:	4313      	orrs	r3, r2
 8006058:	614b      	str	r3, [r1, #20]
 800605a:	e011      	b.n	8006080 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800605c:	4b1d      	ldr	r3, [pc, #116]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006064:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6892      	ldr	r2, [r2, #8]
 800606c:	0211      	lsls	r1, r2, #8
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6912      	ldr	r2, [r2, #16]
 8006072:	0852      	lsrs	r2, r2, #1
 8006074:	3a01      	subs	r2, #1
 8006076:	0652      	lsls	r2, r2, #25
 8006078:	430a      	orrs	r2, r1
 800607a:	4916      	ldr	r1, [pc, #88]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800607c:	4313      	orrs	r3, r2
 800607e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006080:	4b14      	ldr	r3, [pc, #80]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a13      	ldr	r2, [pc, #76]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800608a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608c:	f7fc f850 	bl	8002130 <HAL_GetTick>
 8006090:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006092:	e009      	b.n	80060a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006094:	f7fc f84c 	bl	8002130 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d902      	bls.n	80060a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	73fb      	strb	r3, [r7, #15]
          break;
 80060a6:	e005      	b.n	80060b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80060a8:	4b0a      	ldr	r3, [pc, #40]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0ef      	beq.n	8006094 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80060ba:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	4904      	ldr	r1, [pc, #16]	@ (80060d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40021000 	.word	0x40021000

080060d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e040      	b.n	800616c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fb fb62 	bl	80017c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2224      	movs	r2, #36	@ 0x24
 8006104:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 ffbc 	bl	800709c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fd01 	bl	8006b2c <UART_SetConfig>
 800612a:	4603      	mov	r3, r0
 800612c:	2b01      	cmp	r3, #1
 800612e:	d101      	bne.n	8006134 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e01b      	b.n	800616c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689a      	ldr	r2, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 f83b 	bl	80071e0 <UART_CheckIdleState>
 800616a:	4603      	mov	r3, r0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	@ 0x28
 8006178:	af02      	add	r7, sp, #8
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	603b      	str	r3, [r7, #0]
 8006180:	4613      	mov	r3, r2
 8006182:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006188:	2b20      	cmp	r3, #32
 800618a:	d177      	bne.n	800627c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <HAL_UART_Transmit+0x24>
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e070      	b.n	800627e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2221      	movs	r2, #33	@ 0x21
 80061a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061aa:	f7fb ffc1 	bl	8002130 <HAL_GetTick>
 80061ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	88fa      	ldrh	r2, [r7, #6]
 80061bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c8:	d108      	bne.n	80061dc <HAL_UART_Transmit+0x68>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d104      	bne.n	80061dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	e003      	b.n	80061e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061e4:	e02f      	b.n	8006246 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2200      	movs	r2, #0
 80061ee:	2180      	movs	r1, #128	@ 0x80
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f001 f89d 	bl	8007330 <UART_WaitOnFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2220      	movs	r2, #32
 8006200:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e03b      	b.n	800627e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10b      	bne.n	8006224 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	881a      	ldrh	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006218:	b292      	uxth	r2, r2
 800621a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	3302      	adds	r3, #2
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	e007      	b.n	8006234 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	781a      	ldrb	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3301      	adds	r3, #1
 8006232:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800624c:	b29b      	uxth	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1c9      	bne.n	80061e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2200      	movs	r2, #0
 800625a:	2140      	movs	r1, #64	@ 0x40
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f001 f867 	bl	8007330 <UART_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d004      	beq.n	8006272 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2220      	movs	r2, #32
 800626c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e005      	b.n	800627e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	e000      	b.n	800627e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800627c:	2302      	movs	r3, #2
  }
}
 800627e:	4618      	mov	r0, r3
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006288:	b480      	push	{r7}
 800628a:	b08b      	sub	sp, #44	@ 0x2c
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	4613      	mov	r3, r2
 8006294:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800629a:	2b20      	cmp	r3, #32
 800629c:	d147      	bne.n	800632e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <HAL_UART_Transmit_IT+0x22>
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e040      	b.n	8006330 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	88fa      	ldrh	r2, [r7, #6]
 80062b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	88fa      	ldrh	r2, [r7, #6]
 80062c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2221      	movs	r2, #33	@ 0x21
 80062d6:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e0:	d107      	bne.n	80062f2 <HAL_UART_Transmit_IT+0x6a>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d103      	bne.n	80062f2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4a13      	ldr	r2, [pc, #76]	@ (800633c <HAL_UART_Transmit_IT+0xb4>)
 80062ee:	66da      	str	r2, [r3, #108]	@ 0x6c
 80062f0:	e002      	b.n	80062f8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4a12      	ldr	r2, [pc, #72]	@ (8006340 <HAL_UART_Transmit_IT+0xb8>)
 80062f6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	e853 3f00 	ldrex	r3, [r3]
 8006304:	613b      	str	r3, [r7, #16]
   return(result);
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800630c:	627b      	str	r3, [r7, #36]	@ 0x24
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006316:	623b      	str	r3, [r7, #32]
 8006318:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	69f9      	ldr	r1, [r7, #28]
 800631c:	6a3a      	ldr	r2, [r7, #32]
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	61bb      	str	r3, [r7, #24]
   return(result);
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e6      	bne.n	80062f8 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	e000      	b.n	8006330 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800632e:	2302      	movs	r3, #2
  }
}
 8006330:	4618      	mov	r0, r3
 8006332:	372c      	adds	r7, #44	@ 0x2c
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	0800776d 	.word	0x0800776d
 8006340:	080076b7 	.word	0x080076b7

08006344 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08a      	sub	sp, #40	@ 0x28
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	4613      	mov	r3, r2
 8006350:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006358:	2b20      	cmp	r3, #32
 800635a:	d137      	bne.n	80063cc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_UART_Receive_IT+0x24>
 8006362:	88fb      	ldrh	r3, [r7, #6]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e030      	b.n	80063ce <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a18      	ldr	r2, [pc, #96]	@ (80063d8 <HAL_UART_Receive_IT+0x94>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d01f      	beq.n	80063bc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d018      	beq.n	80063bc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	613b      	str	r3, [r7, #16]
   return(result);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	623b      	str	r3, [r7, #32]
 80063aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	69f9      	ldr	r1, [r7, #28]
 80063ae:	6a3a      	ldr	r2, [r7, #32]
 80063b0:	e841 2300 	strex	r3, r2, [r1]
 80063b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1e6      	bne.n	800638a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063bc:	88fb      	ldrh	r3, [r7, #6]
 80063be:	461a      	mov	r2, r3
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f001 f822 	bl	800740c <UART_Start_Receive_IT>
 80063c8:	4603      	mov	r3, r0
 80063ca:	e000      	b.n	80063ce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063cc:	2302      	movs	r3, #2
  }
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3728      	adds	r7, #40	@ 0x28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40008000 	.word	0x40008000

080063dc <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08e      	sub	sp, #56	@ 0x38
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80063f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006404:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006408:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e6      	bne.n	80063e4 <HAL_UART_AbortTransmit_IT+0x8>
#endif /* USART_CR1_FIFOEN */

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006420:	2b80      	cmp	r3, #128	@ 0x80
 8006422:	d13f      	bne.n	80064a4 <HAL_UART_AbortTransmit_IT+0xc8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3308      	adds	r3, #8
 800642a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	60bb      	str	r3, [r7, #8]
   return(result);
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800643a:	633b      	str	r3, [r7, #48]	@ 0x30
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3308      	adds	r3, #8
 8006442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006444:	61ba      	str	r2, [r7, #24]
 8006446:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006448:	6979      	ldr	r1, [r7, #20]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	e841 2300 	strex	r3, r2, [r1]
 8006450:	613b      	str	r3, [r7, #16]
   return(result);
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e5      	bne.n	8006424 <HAL_UART_AbortTransmit_IT+0x48>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800645c:	2b00      	cmp	r3, #0
 800645e:	d013      	beq.n	8006488 <HAL_UART_AbortTransmit_IT+0xac>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006464:	4a18      	ldr	r2, [pc, #96]	@ (80064c8 <HAL_UART_AbortTransmit_IT+0xec>)
 8006466:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646c:	4618      	mov	r0, r3
 800646e:	f7fd fc0e 	bl	8003c8e <HAL_DMA_Abort_IT>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d022      	beq.n	80064be <HAL_UART_AbortTransmit_IT+0xe2>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8006482:	4610      	mov	r0, r2
 8006484:	4798      	blx	r3
 8006486:	e01a      	b.n	80064be <HAL_UART_AbortTransmit_IT+0xe2>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	67da      	str	r2, [r3, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fb2f 	bl	8006b00 <HAL_UART_AbortTransmitCpltCallback>
 80064a2:	e00c      	b.n	80064be <HAL_UART_AbortTransmit_IT+0xe2>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	66da      	str	r2, [r3, #108]	@ 0x6c
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2220      	movs	r2, #32
 80064b6:	67da      	str	r2, [r3, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fb21 	bl	8006b00 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3738      	adds	r7, #56	@ 0x38
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	0800768d 	.word	0x0800768d

080064cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b0ba      	sub	sp, #232	@ 0xe8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80064f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80064fa:	4013      	ands	r3, r2
 80064fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006504:	2b00      	cmp	r3, #0
 8006506:	d115      	bne.n	8006534 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00f      	beq.n	8006534 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b00      	cmp	r3, #0
 800651e:	d009      	beq.n	8006534 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 82ca 	beq.w	8006abe <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	4798      	blx	r3
      }
      return;
 8006532:	e2c4      	b.n	8006abe <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006534:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8117 	beq.w	800676c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800653e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800654a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800654e:	4b85      	ldr	r3, [pc, #532]	@ (8006764 <HAL_UART_IRQHandler+0x298>)
 8006550:	4013      	ands	r3, r2
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 810a 	beq.w	800676c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d011      	beq.n	8006588 <HAL_UART_IRQHandler+0xbc>
 8006564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2201      	movs	r2, #1
 8006576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800657e:	f043 0201 	orr.w	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d011      	beq.n	80065b8 <HAL_UART_IRQHandler+0xec>
 8006594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00b      	beq.n	80065b8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2202      	movs	r2, #2
 80065a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065ae:	f043 0204 	orr.w	r2, r3, #4
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d011      	beq.n	80065e8 <HAL_UART_IRQHandler+0x11c>
 80065c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00b      	beq.n	80065e8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2204      	movs	r2, #4
 80065d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065de:	f043 0202 	orr.w	r2, r3, #2
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d017      	beq.n	8006624 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006604:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00b      	beq.n	8006624 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2208      	movs	r2, #8
 8006612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800661a:	f043 0208 	orr.w	r2, r3, #8
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800662c:	2b00      	cmp	r3, #0
 800662e:	d012      	beq.n	8006656 <HAL_UART_IRQHandler+0x18a>
 8006630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006634:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00c      	beq.n	8006656 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006644:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800664c:	f043 0220 	orr.w	r2, r3, #32
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 8230 	beq.w	8006ac2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00d      	beq.n	800668a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800666e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d007      	beq.n	800668a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006690:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800669e:	2b40      	cmp	r3, #64	@ 0x40
 80066a0:	d005      	beq.n	80066ae <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d04f      	beq.n	800674e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 ff72 	bl	8007598 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066be:	2b40      	cmp	r3, #64	@ 0x40
 80066c0:	d141      	bne.n	8006746 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80066d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80066dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3308      	adds	r3, #8
 80066ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80066ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80066f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80066fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1d9      	bne.n	80066c2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006712:	2b00      	cmp	r3, #0
 8006714:	d013      	beq.n	800673e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800671a:	4a13      	ldr	r2, [pc, #76]	@ (8006768 <HAL_UART_IRQHandler+0x29c>)
 800671c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006722:	4618      	mov	r0, r3
 8006724:	f7fd fab3 	bl	8003c8e <HAL_DMA_Abort_IT>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d017      	beq.n	800675e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006738:	4610      	mov	r0, r2
 800673a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673c:	e00f      	b.n	800675e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f9d4 	bl	8006aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006744:	e00b      	b.n	800675e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f9d0 	bl	8006aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674c:	e007      	b.n	800675e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f9cc 	bl	8006aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800675c:	e1b1      	b.n	8006ac2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675e:	bf00      	nop
    return;
 8006760:	e1af      	b.n	8006ac2 <HAL_UART_IRQHandler+0x5f6>
 8006762:	bf00      	nop
 8006764:	04000120 	.word	0x04000120
 8006768:	08007661 	.word	0x08007661

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006770:	2b01      	cmp	r3, #1
 8006772:	f040 816a 	bne.w	8006a4a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 8163 	beq.w	8006a4a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006788:	f003 0310 	and.w	r3, r3, #16
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 815c 	beq.w	8006a4a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2210      	movs	r2, #16
 8006798:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a4:	2b40      	cmp	r3, #64	@ 0x40
 80067a6:	f040 80d4 	bne.w	8006952 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067b6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 80ad 	beq.w	800691a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80067c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067ca:	429a      	cmp	r2, r3
 80067cc:	f080 80a5 	bcs.w	800691a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f040 8086 	bne.w	80068f8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006800:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006816:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800681a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006822:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800682e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1da      	bne.n	80067ec <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3308      	adds	r3, #8
 800683c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006840:	e853 3f00 	ldrex	r3, [r3]
 8006844:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006846:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006848:	f023 0301 	bic.w	r3, r3, #1
 800684c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3308      	adds	r3, #8
 8006856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800685a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800685e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006862:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800686c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e1      	bne.n	8006836 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3308      	adds	r3, #8
 8006878:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006888:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3308      	adds	r3, #8
 8006892:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006896:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006898:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800689c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e3      	bne.n	8006872 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068c8:	f023 0310 	bic.w	r3, r3, #16
 80068cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80068e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e4      	bne.n	80068b8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fd f98d 	bl	8003c12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800690a:	b29b      	uxth	r3, r3
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	b29b      	uxth	r3, r3
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f8fe 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006918:	e0d5      	b.n	8006ac6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006920:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006924:	429a      	cmp	r2, r3
 8006926:	f040 80ce 	bne.w	8006ac6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b20      	cmp	r3, #32
 8006938:	f040 80c5 	bne.w	8006ac6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f8e2 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
      return;
 8006950:	e0b9      	b.n	8006ac6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800695e:	b29b      	uxth	r3, r3
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 80ab 	beq.w	8006aca <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 80a6 	beq.w	8006aca <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800698c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006992:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80069a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e4      	bne.n	800697e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	623b      	str	r3, [r7, #32]
   return(result);
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	f023 0301 	bic.w	r3, r3, #1
 80069ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	3308      	adds	r3, #8
 80069d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80069d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80069da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e3      	bne.n	80069b4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f023 0310 	bic.w	r3, r3, #16
 8006a14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a22:	61fb      	str	r3, [r7, #28]
 8006a24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	69b9      	ldr	r1, [r7, #24]
 8006a28:	69fa      	ldr	r2, [r7, #28]
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e4      	bne.n	8006a00 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f866 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a48:	e03f      	b.n	8006aca <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00e      	beq.n	8006a74 <HAL_UART_IRQHandler+0x5a8>
 8006a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d008      	beq.n	8006a74 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006a6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 f8c3 	bl	8007bf8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a72:	e02d      	b.n	8006ad0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00e      	beq.n	8006a9e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d008      	beq.n	8006a9e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01c      	beq.n	8006ace <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
    }
    return;
 8006a9c:	e017      	b.n	8006ace <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d012      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x604>
 8006aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00c      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 feb8 	bl	800782c <UART_EndTransmit_IT>
    return;
 8006abc:	e008      	b.n	8006ad0 <HAL_UART_IRQHandler+0x604>
      return;
 8006abe:	bf00      	nop
 8006ac0:	e006      	b.n	8006ad0 <HAL_UART_IRQHandler+0x604>
    return;
 8006ac2:	bf00      	nop
 8006ac4:	e004      	b.n	8006ad0 <HAL_UART_IRQHandler+0x604>
      return;
 8006ac6:	bf00      	nop
 8006ac8:	e002      	b.n	8006ad0 <HAL_UART_IRQHandler+0x604>
      return;
 8006aca:	bf00      	nop
 8006acc:	e000      	b.n	8006ad0 <HAL_UART_IRQHandler+0x604>
    return;
 8006ace:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ad0:	37e8      	adds	r7, #232	@ 0xe8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop

08006ad8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b30:	b08a      	sub	sp, #40	@ 0x28
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4ba4      	ldr	r3, [pc, #656]	@ (8006dec <UART_SetConfig+0x2c0>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a99      	ldr	r2, [pc, #612]	@ (8006df0 <UART_SetConfig+0x2c4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b94:	4313      	orrs	r3, r2
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a90      	ldr	r2, [pc, #576]	@ (8006df4 <UART_SetConfig+0x2c8>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d126      	bne.n	8006c04 <UART_SetConfig+0xd8>
 8006bb6:	4b90      	ldr	r3, [pc, #576]	@ (8006df8 <UART_SetConfig+0x2cc>)
 8006bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d81b      	bhi.n	8006bfc <UART_SetConfig+0xd0>
 8006bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8006bcc <UART_SetConfig+0xa0>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006bdd 	.word	0x08006bdd
 8006bd0:	08006bed 	.word	0x08006bed
 8006bd4:	08006be5 	.word	0x08006be5
 8006bd8:	08006bf5 	.word	0x08006bf5
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006be2:	e116      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006be4:	2302      	movs	r3, #2
 8006be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bea:	e112      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006bec:	2304      	movs	r3, #4
 8006bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bf2:	e10e      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006bf4:	2308      	movs	r3, #8
 8006bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bfa:	e10a      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c02:	e106      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a7c      	ldr	r2, [pc, #496]	@ (8006dfc <UART_SetConfig+0x2d0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d138      	bne.n	8006c80 <UART_SetConfig+0x154>
 8006c0e:	4b7a      	ldr	r3, [pc, #488]	@ (8006df8 <UART_SetConfig+0x2cc>)
 8006c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c14:	f003 030c 	and.w	r3, r3, #12
 8006c18:	2b0c      	cmp	r3, #12
 8006c1a:	d82d      	bhi.n	8006c78 <UART_SetConfig+0x14c>
 8006c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c24 <UART_SetConfig+0xf8>)
 8006c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c22:	bf00      	nop
 8006c24:	08006c59 	.word	0x08006c59
 8006c28:	08006c79 	.word	0x08006c79
 8006c2c:	08006c79 	.word	0x08006c79
 8006c30:	08006c79 	.word	0x08006c79
 8006c34:	08006c69 	.word	0x08006c69
 8006c38:	08006c79 	.word	0x08006c79
 8006c3c:	08006c79 	.word	0x08006c79
 8006c40:	08006c79 	.word	0x08006c79
 8006c44:	08006c61 	.word	0x08006c61
 8006c48:	08006c79 	.word	0x08006c79
 8006c4c:	08006c79 	.word	0x08006c79
 8006c50:	08006c79 	.word	0x08006c79
 8006c54:	08006c71 	.word	0x08006c71
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c5e:	e0d8      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c66:	e0d4      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c6e:	e0d0      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c76:	e0cc      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c7e:	e0c8      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a5e      	ldr	r2, [pc, #376]	@ (8006e00 <UART_SetConfig+0x2d4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d125      	bne.n	8006cd6 <UART_SetConfig+0x1aa>
 8006c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8006df8 <UART_SetConfig+0x2cc>)
 8006c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c94:	2b30      	cmp	r3, #48	@ 0x30
 8006c96:	d016      	beq.n	8006cc6 <UART_SetConfig+0x19a>
 8006c98:	2b30      	cmp	r3, #48	@ 0x30
 8006c9a:	d818      	bhi.n	8006cce <UART_SetConfig+0x1a2>
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	d00a      	beq.n	8006cb6 <UART_SetConfig+0x18a>
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d814      	bhi.n	8006cce <UART_SetConfig+0x1a2>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <UART_SetConfig+0x182>
 8006ca8:	2b10      	cmp	r3, #16
 8006caa:	d008      	beq.n	8006cbe <UART_SetConfig+0x192>
 8006cac:	e00f      	b.n	8006cce <UART_SetConfig+0x1a2>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cb4:	e0ad      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cbc:	e0a9      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006cbe:	2304      	movs	r3, #4
 8006cc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cc4:	e0a5      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ccc:	e0a1      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006cce:	2310      	movs	r3, #16
 8006cd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cd4:	e09d      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a4a      	ldr	r2, [pc, #296]	@ (8006e04 <UART_SetConfig+0x2d8>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d125      	bne.n	8006d2c <UART_SetConfig+0x200>
 8006ce0:	4b45      	ldr	r3, [pc, #276]	@ (8006df8 <UART_SetConfig+0x2cc>)
 8006ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006cea:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cec:	d016      	beq.n	8006d1c <UART_SetConfig+0x1f0>
 8006cee:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cf0:	d818      	bhi.n	8006d24 <UART_SetConfig+0x1f8>
 8006cf2:	2b80      	cmp	r3, #128	@ 0x80
 8006cf4:	d00a      	beq.n	8006d0c <UART_SetConfig+0x1e0>
 8006cf6:	2b80      	cmp	r3, #128	@ 0x80
 8006cf8:	d814      	bhi.n	8006d24 <UART_SetConfig+0x1f8>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <UART_SetConfig+0x1d8>
 8006cfe:	2b40      	cmp	r3, #64	@ 0x40
 8006d00:	d008      	beq.n	8006d14 <UART_SetConfig+0x1e8>
 8006d02:	e00f      	b.n	8006d24 <UART_SetConfig+0x1f8>
 8006d04:	2300      	movs	r3, #0
 8006d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d0a:	e082      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d12:	e07e      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006d14:	2304      	movs	r3, #4
 8006d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d1a:	e07a      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006d1c:	2308      	movs	r3, #8
 8006d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d22:	e076      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006d24:	2310      	movs	r3, #16
 8006d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d2a:	e072      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a35      	ldr	r2, [pc, #212]	@ (8006e08 <UART_SetConfig+0x2dc>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d12a      	bne.n	8006d8c <UART_SetConfig+0x260>
 8006d36:	4b30      	ldr	r3, [pc, #192]	@ (8006df8 <UART_SetConfig+0x2cc>)
 8006d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d44:	d01a      	beq.n	8006d7c <UART_SetConfig+0x250>
 8006d46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d4a:	d81b      	bhi.n	8006d84 <UART_SetConfig+0x258>
 8006d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d50:	d00c      	beq.n	8006d6c <UART_SetConfig+0x240>
 8006d52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d56:	d815      	bhi.n	8006d84 <UART_SetConfig+0x258>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <UART_SetConfig+0x238>
 8006d5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d60:	d008      	beq.n	8006d74 <UART_SetConfig+0x248>
 8006d62:	e00f      	b.n	8006d84 <UART_SetConfig+0x258>
 8006d64:	2300      	movs	r3, #0
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d6a:	e052      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d72:	e04e      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006d74:	2304      	movs	r3, #4
 8006d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d7a:	e04a      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006d7c:	2308      	movs	r3, #8
 8006d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d82:	e046      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006d84:	2310      	movs	r3, #16
 8006d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d8a:	e042      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a17      	ldr	r2, [pc, #92]	@ (8006df0 <UART_SetConfig+0x2c4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d13a      	bne.n	8006e0c <UART_SetConfig+0x2e0>
 8006d96:	4b18      	ldr	r3, [pc, #96]	@ (8006df8 <UART_SetConfig+0x2cc>)
 8006d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006da0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006da4:	d01a      	beq.n	8006ddc <UART_SetConfig+0x2b0>
 8006da6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006daa:	d81b      	bhi.n	8006de4 <UART_SetConfig+0x2b8>
 8006dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006db0:	d00c      	beq.n	8006dcc <UART_SetConfig+0x2a0>
 8006db2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006db6:	d815      	bhi.n	8006de4 <UART_SetConfig+0x2b8>
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <UART_SetConfig+0x298>
 8006dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dc0:	d008      	beq.n	8006dd4 <UART_SetConfig+0x2a8>
 8006dc2:	e00f      	b.n	8006de4 <UART_SetConfig+0x2b8>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dca:	e022      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd2:	e01e      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dda:	e01a      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006ddc:	2308      	movs	r3, #8
 8006dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006de2:	e016      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006de4:	2310      	movs	r3, #16
 8006de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dea:	e012      	b.n	8006e12 <UART_SetConfig+0x2e6>
 8006dec:	efff69f3 	.word	0xefff69f3
 8006df0:	40008000 	.word	0x40008000
 8006df4:	40013800 	.word	0x40013800
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	40004400 	.word	0x40004400
 8006e00:	40004800 	.word	0x40004800
 8006e04:	40004c00 	.word	0x40004c00
 8006e08:	40005000 	.word	0x40005000
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a9f      	ldr	r2, [pc, #636]	@ (8007094 <UART_SetConfig+0x568>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d17a      	bne.n	8006f12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d824      	bhi.n	8006e6e <UART_SetConfig+0x342>
 8006e24:	a201      	add	r2, pc, #4	@ (adr r2, 8006e2c <UART_SetConfig+0x300>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e51 	.word	0x08006e51
 8006e30:	08006e6f 	.word	0x08006e6f
 8006e34:	08006e59 	.word	0x08006e59
 8006e38:	08006e6f 	.word	0x08006e6f
 8006e3c:	08006e5f 	.word	0x08006e5f
 8006e40:	08006e6f 	.word	0x08006e6f
 8006e44:	08006e6f 	.word	0x08006e6f
 8006e48:	08006e6f 	.word	0x08006e6f
 8006e4c:	08006e67 	.word	0x08006e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e50:	f7fe fbfa 	bl	8005648 <HAL_RCC_GetPCLK1Freq>
 8006e54:	61f8      	str	r0, [r7, #28]
        break;
 8006e56:	e010      	b.n	8006e7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e58:	4b8f      	ldr	r3, [pc, #572]	@ (8007098 <UART_SetConfig+0x56c>)
 8006e5a:	61fb      	str	r3, [r7, #28]
        break;
 8006e5c:	e00d      	b.n	8006e7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e5e:	f7fe fb5b 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 8006e62:	61f8      	str	r0, [r7, #28]
        break;
 8006e64:	e009      	b.n	8006e7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e6a:	61fb      	str	r3, [r7, #28]
        break;
 8006e6c:	e005      	b.n	8006e7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 80fb 	beq.w	8007078 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	4613      	mov	r3, r2
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	4413      	add	r3, r2
 8006e8c:	69fa      	ldr	r2, [r7, #28]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d305      	bcc.n	8006e9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d903      	bls.n	8006ea6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ea4:	e0e8      	b.n	8007078 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	461c      	mov	r4, r3
 8006eac:	4615      	mov	r5, r2
 8006eae:	f04f 0200 	mov.w	r2, #0
 8006eb2:	f04f 0300 	mov.w	r3, #0
 8006eb6:	022b      	lsls	r3, r5, #8
 8006eb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ebc:	0222      	lsls	r2, r4, #8
 8006ebe:	68f9      	ldr	r1, [r7, #12]
 8006ec0:	6849      	ldr	r1, [r1, #4]
 8006ec2:	0849      	lsrs	r1, r1, #1
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	4688      	mov	r8, r1
 8006ec8:	4681      	mov	r9, r0
 8006eca:	eb12 0a08 	adds.w	sl, r2, r8
 8006ece:	eb43 0b09 	adc.w	fp, r3, r9
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	603b      	str	r3, [r7, #0]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee0:	4650      	mov	r0, sl
 8006ee2:	4659      	mov	r1, fp
 8006ee4:	f7f9 fdba 	bl	8000a5c <__aeabi_uldivmod>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4613      	mov	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ef6:	d308      	bcc.n	8006f0a <UART_SetConfig+0x3de>
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006efe:	d204      	bcs.n	8006f0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	60da      	str	r2, [r3, #12]
 8006f08:	e0b6      	b.n	8007078 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f10:	e0b2      	b.n	8007078 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f1a:	d15e      	bne.n	8006fda <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d828      	bhi.n	8006f76 <UART_SetConfig+0x44a>
 8006f24:	a201      	add	r2, pc, #4	@ (adr r2, 8006f2c <UART_SetConfig+0x400>)
 8006f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2a:	bf00      	nop
 8006f2c:	08006f51 	.word	0x08006f51
 8006f30:	08006f59 	.word	0x08006f59
 8006f34:	08006f61 	.word	0x08006f61
 8006f38:	08006f77 	.word	0x08006f77
 8006f3c:	08006f67 	.word	0x08006f67
 8006f40:	08006f77 	.word	0x08006f77
 8006f44:	08006f77 	.word	0x08006f77
 8006f48:	08006f77 	.word	0x08006f77
 8006f4c:	08006f6f 	.word	0x08006f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f50:	f7fe fb7a 	bl	8005648 <HAL_RCC_GetPCLK1Freq>
 8006f54:	61f8      	str	r0, [r7, #28]
        break;
 8006f56:	e014      	b.n	8006f82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f58:	f7fe fb8c 	bl	8005674 <HAL_RCC_GetPCLK2Freq>
 8006f5c:	61f8      	str	r0, [r7, #28]
        break;
 8006f5e:	e010      	b.n	8006f82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f60:	4b4d      	ldr	r3, [pc, #308]	@ (8007098 <UART_SetConfig+0x56c>)
 8006f62:	61fb      	str	r3, [r7, #28]
        break;
 8006f64:	e00d      	b.n	8006f82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f66:	f7fe fad7 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 8006f6a:	61f8      	str	r0, [r7, #28]
        break;
 8006f6c:	e009      	b.n	8006f82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f72:	61fb      	str	r3, [r7, #28]
        break;
 8006f74:	e005      	b.n	8006f82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d077      	beq.n	8007078 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	005a      	lsls	r2, r3, #1
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	085b      	lsrs	r3, r3, #1
 8006f92:	441a      	add	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b0f      	cmp	r3, #15
 8006fa2:	d916      	bls.n	8006fd2 <UART_SetConfig+0x4a6>
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006faa:	d212      	bcs.n	8006fd2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	f023 030f 	bic.w	r3, r3, #15
 8006fb4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	085b      	lsrs	r3, r3, #1
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	8afb      	ldrh	r3, [r7, #22]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	8afa      	ldrh	r2, [r7, #22]
 8006fce:	60da      	str	r2, [r3, #12]
 8006fd0:	e052      	b.n	8007078 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006fd8:	e04e      	b.n	8007078 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006fde:	2b08      	cmp	r3, #8
 8006fe0:	d827      	bhi.n	8007032 <UART_SetConfig+0x506>
 8006fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe8 <UART_SetConfig+0x4bc>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	0800700d 	.word	0x0800700d
 8006fec:	08007015 	.word	0x08007015
 8006ff0:	0800701d 	.word	0x0800701d
 8006ff4:	08007033 	.word	0x08007033
 8006ff8:	08007023 	.word	0x08007023
 8006ffc:	08007033 	.word	0x08007033
 8007000:	08007033 	.word	0x08007033
 8007004:	08007033 	.word	0x08007033
 8007008:	0800702b 	.word	0x0800702b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800700c:	f7fe fb1c 	bl	8005648 <HAL_RCC_GetPCLK1Freq>
 8007010:	61f8      	str	r0, [r7, #28]
        break;
 8007012:	e014      	b.n	800703e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007014:	f7fe fb2e 	bl	8005674 <HAL_RCC_GetPCLK2Freq>
 8007018:	61f8      	str	r0, [r7, #28]
        break;
 800701a:	e010      	b.n	800703e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800701c:	4b1e      	ldr	r3, [pc, #120]	@ (8007098 <UART_SetConfig+0x56c>)
 800701e:	61fb      	str	r3, [r7, #28]
        break;
 8007020:	e00d      	b.n	800703e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007022:	f7fe fa79 	bl	8005518 <HAL_RCC_GetSysClockFreq>
 8007026:	61f8      	str	r0, [r7, #28]
        break;
 8007028:	e009      	b.n	800703e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800702a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800702e:	61fb      	str	r3, [r7, #28]
        break;
 8007030:	e005      	b.n	800703e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800703c:	bf00      	nop
    }

    if (pclk != 0U)
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d019      	beq.n	8007078 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	085a      	lsrs	r2, r3, #1
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	441a      	add	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	fbb2 f3f3 	udiv	r3, r2, r3
 8007056:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b0f      	cmp	r3, #15
 800705c:	d909      	bls.n	8007072 <UART_SetConfig+0x546>
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007064:	d205      	bcs.n	8007072 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	b29a      	uxth	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	60da      	str	r2, [r3, #12]
 8007070:	e002      	b.n	8007078 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007084:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007088:	4618      	mov	r0, r3
 800708a:	3728      	adds	r7, #40	@ 0x28
 800708c:	46bd      	mov	sp, r7
 800708e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007092:	bf00      	nop
 8007094:	40008000 	.word	0x40008000
 8007098:	00f42400 	.word	0x00f42400

0800709c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007130:	f003 0310 	and.w	r3, r3, #16
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	d01a      	beq.n	80071b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007196:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800719a:	d10a      	bne.n	80071b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	605a      	str	r2, [r3, #4]
  }
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b098      	sub	sp, #96	@ 0x60
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071f0:	f7fa ff9e 	bl	8002130 <HAL_GetTick>
 80071f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b08      	cmp	r3, #8
 8007202:	d12e      	bne.n	8007262 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007204:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800720c:	2200      	movs	r2, #0
 800720e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f88c 	bl	8007330 <UART_WaitOnFlagUntilTimeout>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d021      	beq.n	8007262 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007226:	e853 3f00 	ldrex	r3, [r3]
 800722a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800722c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007232:	653b      	str	r3, [r7, #80]	@ 0x50
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	461a      	mov	r2, r3
 800723a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800723c:	647b      	str	r3, [r7, #68]	@ 0x44
 800723e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007242:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800724a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e6      	bne.n	800721e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e062      	b.n	8007328 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b04      	cmp	r3, #4
 800726e:	d149      	bne.n	8007304 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007270:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007278:	2200      	movs	r2, #0
 800727a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f856 	bl	8007330 <UART_WaitOnFlagUntilTimeout>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d03c      	beq.n	8007304 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	623b      	str	r3, [r7, #32]
   return(result);
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800729e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	461a      	mov	r2, r3
 80072a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80072aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e6      	bne.n	800728a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	e853 3f00 	ldrex	r3, [r3]
 80072ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f023 0301 	bic.w	r3, r3, #1
 80072d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3308      	adds	r3, #8
 80072da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072dc:	61fa      	str	r2, [r7, #28]
 80072de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e0:	69b9      	ldr	r1, [r7, #24]
 80072e2:	69fa      	ldr	r2, [r7, #28]
 80072e4:	e841 2300 	strex	r3, r2, [r1]
 80072e8:	617b      	str	r3, [r7, #20]
   return(result);
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1e5      	bne.n	80072bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e011      	b.n	8007328 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2220      	movs	r2, #32
 8007308:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2220      	movs	r2, #32
 800730e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3758      	adds	r7, #88	@ 0x58
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	4613      	mov	r3, r2
 800733e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007340:	e04f      	b.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007348:	d04b      	beq.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800734a:	f7fa fef1 	bl	8002130 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	429a      	cmp	r2, r3
 8007358:	d302      	bcc.n	8007360 <UART_WaitOnFlagUntilTimeout+0x30>
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e04e      	b.n	8007402 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0304 	and.w	r3, r3, #4
 800736e:	2b00      	cmp	r3, #0
 8007370:	d037      	beq.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b80      	cmp	r3, #128	@ 0x80
 8007376:	d034      	beq.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b40      	cmp	r3, #64	@ 0x40
 800737c:	d031      	beq.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	f003 0308 	and.w	r3, r3, #8
 8007388:	2b08      	cmp	r3, #8
 800738a:	d110      	bne.n	80073ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2208      	movs	r2, #8
 8007392:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 f8ff 	bl	8007598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2208      	movs	r2, #8
 800739e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e029      	b.n	8007402 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073bc:	d111      	bne.n	80073e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 f8e5 	bl	8007598 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e00f      	b.n	8007402 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4013      	ands	r3, r2
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	bf0c      	ite	eq
 80073f2:	2301      	moveq	r3, #1
 80073f4:	2300      	movne	r3, #0
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	461a      	mov	r2, r3
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d0a0      	beq.n	8007342 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800740c:	b480      	push	{r7}
 800740e:	b097      	sub	sp, #92	@ 0x5c
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	4613      	mov	r3, r2
 8007418:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	88fa      	ldrh	r2, [r7, #6]
 8007424:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	88fa      	ldrh	r2, [r7, #6]
 800742c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800743e:	d10e      	bne.n	800745e <UART_Start_Receive_IT+0x52>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d105      	bne.n	8007454 <UART_Start_Receive_IT+0x48>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800744e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007452:	e02d      	b.n	80074b0 <UART_Start_Receive_IT+0xa4>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	22ff      	movs	r2, #255	@ 0xff
 8007458:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800745c:	e028      	b.n	80074b0 <UART_Start_Receive_IT+0xa4>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10d      	bne.n	8007482 <UART_Start_Receive_IT+0x76>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d104      	bne.n	8007478 <UART_Start_Receive_IT+0x6c>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	22ff      	movs	r2, #255	@ 0xff
 8007472:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007476:	e01b      	b.n	80074b0 <UART_Start_Receive_IT+0xa4>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	227f      	movs	r2, #127	@ 0x7f
 800747c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007480:	e016      	b.n	80074b0 <UART_Start_Receive_IT+0xa4>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800748a:	d10d      	bne.n	80074a8 <UART_Start_Receive_IT+0x9c>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <UART_Start_Receive_IT+0x92>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	227f      	movs	r2, #127	@ 0x7f
 8007498:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800749c:	e008      	b.n	80074b0 <UART_Start_Receive_IT+0xa4>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	223f      	movs	r2, #63	@ 0x3f
 80074a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074a6:	e003      	b.n	80074b0 <UART_Start_Receive_IT+0xa4>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2222      	movs	r2, #34	@ 0x22
 80074bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3308      	adds	r3, #8
 80074c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d2:	f043 0301 	orr.w	r3, r3, #1
 80074d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3308      	adds	r3, #8
 80074de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80074e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80074e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80074e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80074ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e5      	bne.n	80074c0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074fc:	d107      	bne.n	800750e <UART_Start_Receive_IT+0x102>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d103      	bne.n	800750e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4a21      	ldr	r2, [pc, #132]	@ (8007590 <UART_Start_Receive_IT+0x184>)
 800750a:	669a      	str	r2, [r3, #104]	@ 0x68
 800750c:	e002      	b.n	8007514 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4a20      	ldr	r2, [pc, #128]	@ (8007594 <UART_Start_Receive_IT+0x188>)
 8007512:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d019      	beq.n	8007550 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007524:	e853 3f00 	ldrex	r3, [r3]
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800753a:	637b      	str	r3, [r7, #52]	@ 0x34
 800753c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007540:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e6      	bne.n	800751c <UART_Start_Receive_IT+0x110>
 800754e:	e018      	b.n	8007582 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	e853 3f00 	ldrex	r3, [r3]
 800755c:	613b      	str	r3, [r7, #16]
   return(result);
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	f043 0320 	orr.w	r3, r3, #32
 8007564:	653b      	str	r3, [r7, #80]	@ 0x50
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800756e:	623b      	str	r3, [r7, #32]
 8007570:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007572:	69f9      	ldr	r1, [r7, #28]
 8007574:	6a3a      	ldr	r2, [r7, #32]
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	61bb      	str	r3, [r7, #24]
   return(result);
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1e6      	bne.n	8007550 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	375c      	adds	r7, #92	@ 0x5c
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	08007a3d 	.word	0x08007a3d
 8007594:	08007881 	.word	0x08007881

08007598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b095      	sub	sp, #84	@ 0x54
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075be:	643b      	str	r3, [r7, #64]	@ 0x40
 80075c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e6      	bne.n	80075a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3308      	adds	r3, #8
 80075d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	f023 0301 	bic.w	r3, r3, #1
 80075e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3308      	adds	r3, #8
 80075f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e5      	bne.n	80075d2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800760a:	2b01      	cmp	r3, #1
 800760c:	d118      	bne.n	8007640 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	60bb      	str	r3, [r7, #8]
   return(result);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f023 0310 	bic.w	r3, r3, #16
 8007622:	647b      	str	r3, [r7, #68]	@ 0x44
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
 800762a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800762c:	61bb      	str	r3, [r7, #24]
 800762e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	6979      	ldr	r1, [r7, #20]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	613b      	str	r3, [r7, #16]
   return(result);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e6      	bne.n	800760e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007654:	bf00      	nop
 8007656:	3754      	adds	r7, #84	@ 0x54
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7ff fa34 	bl	8006aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007684:	bf00      	nop
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007698:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2220      	movs	r2, #32
 80076a6:	67da      	str	r2, [r3, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7ff fa29 	bl	8006b00 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076ae:	bf00      	nop
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b08f      	sub	sp, #60	@ 0x3c
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076c2:	2b21      	cmp	r3, #33	@ 0x21
 80076c4:	d14c      	bne.n	8007760 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d132      	bne.n	8007738 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	61fb      	str	r3, [r7, #28]
   return(result);
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e6      	bne.n	80076d2 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	60bb      	str	r3, [r7, #8]
   return(result);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007718:	633b      	str	r3, [r7, #48]	@ 0x30
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007722:	61bb      	str	r3, [r7, #24]
 8007724:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	6979      	ldr	r1, [r7, #20]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	613b      	str	r3, [r7, #16]
   return(result);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e6      	bne.n	8007704 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007736:	e013      	b.n	8007760 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800773c:	781a      	ldrb	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007748:	1c5a      	adds	r2, r3, #1
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	b29a      	uxth	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007760:	bf00      	nop
 8007762:	373c      	adds	r7, #60	@ 0x3c
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800776c:	b480      	push	{r7}
 800776e:	b091      	sub	sp, #68	@ 0x44
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007778:	2b21      	cmp	r3, #33	@ 0x21
 800777a:	d151      	bne.n	8007820 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007782:	b29b      	uxth	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d132      	bne.n	80077ee <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	e853 3f00 	ldrex	r3, [r3]
 8007794:	623b      	str	r3, [r7, #32]
   return(result);
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800779c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80077a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077ae:	e841 2300 	strex	r3, r2, [r1]
 80077b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1e6      	bne.n	8007788 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d8:	61fb      	str	r3, [r7, #28]
 80077da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	69b9      	ldr	r1, [r7, #24]
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	617b      	str	r3, [r7, #20]
   return(result);
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e6      	bne.n	80077ba <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80077ec:	e018      	b.n	8007820 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80077f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077f6:	881a      	ldrh	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007800:	b292      	uxth	r2, r2
 8007802:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007808:	1c9a      	adds	r2, r3, #2
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007814:	b29b      	uxth	r3, r3
 8007816:	3b01      	subs	r3, #1
 8007818:	b29a      	uxth	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8007820:	bf00      	nop
 8007822:	3744      	adds	r7, #68	@ 0x44
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	60bb      	str	r3, [r7, #8]
   return(result);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007848:	61fb      	str	r3, [r7, #28]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	61bb      	str	r3, [r7, #24]
 8007854:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007856:	6979      	ldr	r1, [r7, #20]
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	e841 2300 	strex	r3, r2, [r1]
 800785e:	613b      	str	r3, [r7, #16]
   return(result);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e6      	bne.n	8007834 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2220      	movs	r2, #32
 800786a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff f930 	bl	8006ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007878:	bf00      	nop
 800787a:	3720      	adds	r7, #32
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b09c      	sub	sp, #112	@ 0x70
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800788e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007898:	2b22      	cmp	r3, #34	@ 0x22
 800789a:	f040 80be 	bne.w	8007a1a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80078a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80078ac:	b2d9      	uxtb	r1, r3
 80078ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078b8:	400a      	ands	r2, r1
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f040 80a3 	bne.w	8007a2e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80078f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007906:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007908:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800790c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e6      	bne.n	80078e8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3308      	adds	r3, #8
 8007920:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800792a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800792c:	f023 0301 	bic.w	r3, r3, #1
 8007930:	667b      	str	r3, [r7, #100]	@ 0x64
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3308      	adds	r3, #8
 8007938:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800793a:	647a      	str	r2, [r7, #68]	@ 0x44
 800793c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007940:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e5      	bne.n	800791a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2220      	movs	r2, #32
 8007952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a34      	ldr	r2, [pc, #208]	@ (8007a38 <UART_RxISR_8BIT+0x1b8>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d01f      	beq.n	80079ac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d018      	beq.n	80079ac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	623b      	str	r3, [r7, #32]
   return(result);
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800798e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007998:	633b      	str	r3, [r7, #48]	@ 0x30
 800799a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800799e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a0:	e841 2300 	strex	r3, r2, [r1]
 80079a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1e6      	bne.n	800797a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d12e      	bne.n	8007a12 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0310 	bic.w	r3, r3, #16
 80079ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	461a      	mov	r2, r3
 80079d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	69b9      	ldr	r1, [r7, #24]
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	617b      	str	r3, [r7, #20]
   return(result);
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e6      	bne.n	80079ba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	f003 0310 	and.w	r3, r3, #16
 80079f6:	2b10      	cmp	r3, #16
 80079f8:	d103      	bne.n	8007a02 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2210      	movs	r2, #16
 8007a00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff f882 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a10:	e00d      	b.n	8007a2e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f7f9 fad6 	bl	8000fc4 <HAL_UART_RxCpltCallback>
}
 8007a18:	e009      	b.n	8007a2e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	8b1b      	ldrh	r3, [r3, #24]
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0208 	orr.w	r2, r2, #8
 8007a2a:	b292      	uxth	r2, r2
 8007a2c:	831a      	strh	r2, [r3, #24]
}
 8007a2e:	bf00      	nop
 8007a30:	3770      	adds	r7, #112	@ 0x70
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	40008000 	.word	0x40008000

08007a3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b09c      	sub	sp, #112	@ 0x70
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a54:	2b22      	cmp	r3, #34	@ 0x22
 8007a56:	f040 80be 	bne.w	8007bd6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007a60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a68:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007a6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007a72:	4013      	ands	r3, r2
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a7e:	1c9a      	adds	r2, r3, #2
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f040 80a3 	bne.w	8007bea <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ac2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ac4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007ac8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ad0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e6      	bne.n	8007aa4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3308      	adds	r3, #8
 8007adc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae8:	f023 0301 	bic.w	r3, r3, #1
 8007aec:	663b      	str	r3, [r7, #96]	@ 0x60
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3308      	adds	r3, #8
 8007af4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007af6:	643a      	str	r2, [r7, #64]	@ 0x40
 8007af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007afc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e5      	bne.n	8007ad6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a34      	ldr	r2, [pc, #208]	@ (8007bf4 <UART_RxISR_16BIT+0x1b8>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d01f      	beq.n	8007b68 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d018      	beq.n	8007b68 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	e853 3f00 	ldrex	r3, [r3]
 8007b42:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	461a      	mov	r2, r3
 8007b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b56:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b5c:	e841 2300 	strex	r3, r2, [r1]
 8007b60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1e6      	bne.n	8007b36 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d12e      	bne.n	8007bce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	e853 3f00 	ldrex	r3, [r3]
 8007b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f023 0310 	bic.w	r3, r3, #16
 8007b8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	461a      	mov	r2, r3
 8007b92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b94:	61bb      	str	r3, [r7, #24]
 8007b96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b98:	6979      	ldr	r1, [r7, #20]
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	e841 2300 	strex	r3, r2, [r1]
 8007ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e6      	bne.n	8007b76 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d103      	bne.n	8007bbe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2210      	movs	r2, #16
 8007bbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7fe ffa4 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bcc:	e00d      	b.n	8007bea <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7f9 f9f8 	bl	8000fc4 <HAL_UART_RxCpltCallback>
}
 8007bd4:	e009      	b.n	8007bea <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	8b1b      	ldrh	r3, [r3, #24]
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0208 	orr.w	r2, r2, #8
 8007be6:	b292      	uxth	r2, r2
 8007be8:	831a      	strh	r2, [r3, #24]
}
 8007bea:	bf00      	nop
 8007bec:	3770      	adds	r7, #112	@ 0x70
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	40008000 	.word	0x40008000

08007bf8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <siprintf>:
 8007c0c:	b40e      	push	{r1, r2, r3}
 8007c0e:	b500      	push	{lr}
 8007c10:	b09c      	sub	sp, #112	@ 0x70
 8007c12:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c14:	9002      	str	r0, [sp, #8]
 8007c16:	9006      	str	r0, [sp, #24]
 8007c18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c1c:	4809      	ldr	r0, [pc, #36]	@ (8007c44 <siprintf+0x38>)
 8007c1e:	9107      	str	r1, [sp, #28]
 8007c20:	9104      	str	r1, [sp, #16]
 8007c22:	4909      	ldr	r1, [pc, #36]	@ (8007c48 <siprintf+0x3c>)
 8007c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c28:	9105      	str	r1, [sp, #20]
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	a902      	add	r1, sp, #8
 8007c30:	f000 f9bc 	bl	8007fac <_svfiprintf_r>
 8007c34:	9b02      	ldr	r3, [sp, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	b01c      	add	sp, #112	@ 0x70
 8007c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c40:	b003      	add	sp, #12
 8007c42:	4770      	bx	lr
 8007c44:	2000000c 	.word	0x2000000c
 8007c48:	ffff0208 	.word	0xffff0208

08007c4c <memmove>:
 8007c4c:	4288      	cmp	r0, r1
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	eb01 0402 	add.w	r4, r1, r2
 8007c54:	d902      	bls.n	8007c5c <memmove+0x10>
 8007c56:	4284      	cmp	r4, r0
 8007c58:	4623      	mov	r3, r4
 8007c5a:	d807      	bhi.n	8007c6c <memmove+0x20>
 8007c5c:	1e43      	subs	r3, r0, #1
 8007c5e:	42a1      	cmp	r1, r4
 8007c60:	d008      	beq.n	8007c74 <memmove+0x28>
 8007c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c6a:	e7f8      	b.n	8007c5e <memmove+0x12>
 8007c6c:	4402      	add	r2, r0
 8007c6e:	4601      	mov	r1, r0
 8007c70:	428a      	cmp	r2, r1
 8007c72:	d100      	bne.n	8007c76 <memmove+0x2a>
 8007c74:	bd10      	pop	{r4, pc}
 8007c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c7e:	e7f7      	b.n	8007c70 <memmove+0x24>

08007c80 <memset>:
 8007c80:	4402      	add	r2, r0
 8007c82:	4603      	mov	r3, r0
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d100      	bne.n	8007c8a <memset+0xa>
 8007c88:	4770      	bx	lr
 8007c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8e:	e7f9      	b.n	8007c84 <memset+0x4>

08007c90 <__errno>:
 8007c90:	4b01      	ldr	r3, [pc, #4]	@ (8007c98 <__errno+0x8>)
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	2000000c 	.word	0x2000000c

08007c9c <__libc_init_array>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8007cd4 <__libc_init_array+0x38>)
 8007ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8007cd8 <__libc_init_array+0x3c>)
 8007ca2:	1b64      	subs	r4, r4, r5
 8007ca4:	10a4      	asrs	r4, r4, #2
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	42a6      	cmp	r6, r4
 8007caa:	d109      	bne.n	8007cc0 <__libc_init_array+0x24>
 8007cac:	4d0b      	ldr	r5, [pc, #44]	@ (8007cdc <__libc_init_array+0x40>)
 8007cae:	4c0c      	ldr	r4, [pc, #48]	@ (8007ce0 <__libc_init_array+0x44>)
 8007cb0:	f000 fc4c 	bl	800854c <_init>
 8007cb4:	1b64      	subs	r4, r4, r5
 8007cb6:	10a4      	asrs	r4, r4, #2
 8007cb8:	2600      	movs	r6, #0
 8007cba:	42a6      	cmp	r6, r4
 8007cbc:	d105      	bne.n	8007cca <__libc_init_array+0x2e>
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc4:	4798      	blx	r3
 8007cc6:	3601      	adds	r6, #1
 8007cc8:	e7ee      	b.n	8007ca8 <__libc_init_array+0xc>
 8007cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cce:	4798      	blx	r3
 8007cd0:	3601      	adds	r6, #1
 8007cd2:	e7f2      	b.n	8007cba <__libc_init_array+0x1e>
 8007cd4:	0800938c 	.word	0x0800938c
 8007cd8:	0800938c 	.word	0x0800938c
 8007cdc:	0800938c 	.word	0x0800938c
 8007ce0:	08009390 	.word	0x08009390

08007ce4 <__retarget_lock_acquire_recursive>:
 8007ce4:	4770      	bx	lr

08007ce6 <__retarget_lock_release_recursive>:
 8007ce6:	4770      	bx	lr

08007ce8 <memcpy>:
 8007ce8:	440a      	add	r2, r1
 8007cea:	4291      	cmp	r1, r2
 8007cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cf0:	d100      	bne.n	8007cf4 <memcpy+0xc>
 8007cf2:	4770      	bx	lr
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cfe:	4291      	cmp	r1, r2
 8007d00:	d1f9      	bne.n	8007cf6 <memcpy+0xe>
 8007d02:	bd10      	pop	{r4, pc}

08007d04 <_free_r>:
 8007d04:	b538      	push	{r3, r4, r5, lr}
 8007d06:	4605      	mov	r5, r0
 8007d08:	2900      	cmp	r1, #0
 8007d0a:	d041      	beq.n	8007d90 <_free_r+0x8c>
 8007d0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d10:	1f0c      	subs	r4, r1, #4
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bfb8      	it	lt
 8007d16:	18e4      	addlt	r4, r4, r3
 8007d18:	f000 f8e0 	bl	8007edc <__malloc_lock>
 8007d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007d94 <_free_r+0x90>)
 8007d1e:	6813      	ldr	r3, [r2, #0]
 8007d20:	b933      	cbnz	r3, 8007d30 <_free_r+0x2c>
 8007d22:	6063      	str	r3, [r4, #4]
 8007d24:	6014      	str	r4, [r2, #0]
 8007d26:	4628      	mov	r0, r5
 8007d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d2c:	f000 b8dc 	b.w	8007ee8 <__malloc_unlock>
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	d908      	bls.n	8007d46 <_free_r+0x42>
 8007d34:	6820      	ldr	r0, [r4, #0]
 8007d36:	1821      	adds	r1, r4, r0
 8007d38:	428b      	cmp	r3, r1
 8007d3a:	bf01      	itttt	eq
 8007d3c:	6819      	ldreq	r1, [r3, #0]
 8007d3e:	685b      	ldreq	r3, [r3, #4]
 8007d40:	1809      	addeq	r1, r1, r0
 8007d42:	6021      	streq	r1, [r4, #0]
 8007d44:	e7ed      	b.n	8007d22 <_free_r+0x1e>
 8007d46:	461a      	mov	r2, r3
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	b10b      	cbz	r3, 8007d50 <_free_r+0x4c>
 8007d4c:	42a3      	cmp	r3, r4
 8007d4e:	d9fa      	bls.n	8007d46 <_free_r+0x42>
 8007d50:	6811      	ldr	r1, [r2, #0]
 8007d52:	1850      	adds	r0, r2, r1
 8007d54:	42a0      	cmp	r0, r4
 8007d56:	d10b      	bne.n	8007d70 <_free_r+0x6c>
 8007d58:	6820      	ldr	r0, [r4, #0]
 8007d5a:	4401      	add	r1, r0
 8007d5c:	1850      	adds	r0, r2, r1
 8007d5e:	4283      	cmp	r3, r0
 8007d60:	6011      	str	r1, [r2, #0]
 8007d62:	d1e0      	bne.n	8007d26 <_free_r+0x22>
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	6053      	str	r3, [r2, #4]
 8007d6a:	4408      	add	r0, r1
 8007d6c:	6010      	str	r0, [r2, #0]
 8007d6e:	e7da      	b.n	8007d26 <_free_r+0x22>
 8007d70:	d902      	bls.n	8007d78 <_free_r+0x74>
 8007d72:	230c      	movs	r3, #12
 8007d74:	602b      	str	r3, [r5, #0]
 8007d76:	e7d6      	b.n	8007d26 <_free_r+0x22>
 8007d78:	6820      	ldr	r0, [r4, #0]
 8007d7a:	1821      	adds	r1, r4, r0
 8007d7c:	428b      	cmp	r3, r1
 8007d7e:	bf04      	itt	eq
 8007d80:	6819      	ldreq	r1, [r3, #0]
 8007d82:	685b      	ldreq	r3, [r3, #4]
 8007d84:	6063      	str	r3, [r4, #4]
 8007d86:	bf04      	itt	eq
 8007d88:	1809      	addeq	r1, r1, r0
 8007d8a:	6021      	streq	r1, [r4, #0]
 8007d8c:	6054      	str	r4, [r2, #4]
 8007d8e:	e7ca      	b.n	8007d26 <_free_r+0x22>
 8007d90:	bd38      	pop	{r3, r4, r5, pc}
 8007d92:	bf00      	nop
 8007d94:	20000878 	.word	0x20000878

08007d98 <sbrk_aligned>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	4e0f      	ldr	r6, [pc, #60]	@ (8007dd8 <sbrk_aligned+0x40>)
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	6831      	ldr	r1, [r6, #0]
 8007da0:	4605      	mov	r5, r0
 8007da2:	b911      	cbnz	r1, 8007daa <sbrk_aligned+0x12>
 8007da4:	f000 fb8c 	bl	80084c0 <_sbrk_r>
 8007da8:	6030      	str	r0, [r6, #0]
 8007daa:	4621      	mov	r1, r4
 8007dac:	4628      	mov	r0, r5
 8007dae:	f000 fb87 	bl	80084c0 <_sbrk_r>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	d103      	bne.n	8007dbe <sbrk_aligned+0x26>
 8007db6:	f04f 34ff 	mov.w	r4, #4294967295
 8007dba:	4620      	mov	r0, r4
 8007dbc:	bd70      	pop	{r4, r5, r6, pc}
 8007dbe:	1cc4      	adds	r4, r0, #3
 8007dc0:	f024 0403 	bic.w	r4, r4, #3
 8007dc4:	42a0      	cmp	r0, r4
 8007dc6:	d0f8      	beq.n	8007dba <sbrk_aligned+0x22>
 8007dc8:	1a21      	subs	r1, r4, r0
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f000 fb78 	bl	80084c0 <_sbrk_r>
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	d1f2      	bne.n	8007dba <sbrk_aligned+0x22>
 8007dd4:	e7ef      	b.n	8007db6 <sbrk_aligned+0x1e>
 8007dd6:	bf00      	nop
 8007dd8:	20000874 	.word	0x20000874

08007ddc <_malloc_r>:
 8007ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de0:	1ccd      	adds	r5, r1, #3
 8007de2:	f025 0503 	bic.w	r5, r5, #3
 8007de6:	3508      	adds	r5, #8
 8007de8:	2d0c      	cmp	r5, #12
 8007dea:	bf38      	it	cc
 8007dec:	250c      	movcc	r5, #12
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	4606      	mov	r6, r0
 8007df2:	db01      	blt.n	8007df8 <_malloc_r+0x1c>
 8007df4:	42a9      	cmp	r1, r5
 8007df6:	d904      	bls.n	8007e02 <_malloc_r+0x26>
 8007df8:	230c      	movs	r3, #12
 8007dfa:	6033      	str	r3, [r6, #0]
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ed8 <_malloc_r+0xfc>
 8007e06:	f000 f869 	bl	8007edc <__malloc_lock>
 8007e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e0e:	461c      	mov	r4, r3
 8007e10:	bb44      	cbnz	r4, 8007e64 <_malloc_r+0x88>
 8007e12:	4629      	mov	r1, r5
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff ffbf 	bl	8007d98 <sbrk_aligned>
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	d158      	bne.n	8007ed2 <_malloc_r+0xf6>
 8007e20:	f8d8 4000 	ldr.w	r4, [r8]
 8007e24:	4627      	mov	r7, r4
 8007e26:	2f00      	cmp	r7, #0
 8007e28:	d143      	bne.n	8007eb2 <_malloc_r+0xd6>
 8007e2a:	2c00      	cmp	r4, #0
 8007e2c:	d04b      	beq.n	8007ec6 <_malloc_r+0xea>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	4639      	mov	r1, r7
 8007e32:	4630      	mov	r0, r6
 8007e34:	eb04 0903 	add.w	r9, r4, r3
 8007e38:	f000 fb42 	bl	80084c0 <_sbrk_r>
 8007e3c:	4581      	cmp	r9, r0
 8007e3e:	d142      	bne.n	8007ec6 <_malloc_r+0xea>
 8007e40:	6821      	ldr	r1, [r4, #0]
 8007e42:	1a6d      	subs	r5, r5, r1
 8007e44:	4629      	mov	r1, r5
 8007e46:	4630      	mov	r0, r6
 8007e48:	f7ff ffa6 	bl	8007d98 <sbrk_aligned>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d03a      	beq.n	8007ec6 <_malloc_r+0xea>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	442b      	add	r3, r5
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	f8d8 3000 	ldr.w	r3, [r8]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	bb62      	cbnz	r2, 8007eb8 <_malloc_r+0xdc>
 8007e5e:	f8c8 7000 	str.w	r7, [r8]
 8007e62:	e00f      	b.n	8007e84 <_malloc_r+0xa8>
 8007e64:	6822      	ldr	r2, [r4, #0]
 8007e66:	1b52      	subs	r2, r2, r5
 8007e68:	d420      	bmi.n	8007eac <_malloc_r+0xd0>
 8007e6a:	2a0b      	cmp	r2, #11
 8007e6c:	d917      	bls.n	8007e9e <_malloc_r+0xc2>
 8007e6e:	1961      	adds	r1, r4, r5
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	6025      	str	r5, [r4, #0]
 8007e74:	bf18      	it	ne
 8007e76:	6059      	strne	r1, [r3, #4]
 8007e78:	6863      	ldr	r3, [r4, #4]
 8007e7a:	bf08      	it	eq
 8007e7c:	f8c8 1000 	streq.w	r1, [r8]
 8007e80:	5162      	str	r2, [r4, r5]
 8007e82:	604b      	str	r3, [r1, #4]
 8007e84:	4630      	mov	r0, r6
 8007e86:	f000 f82f 	bl	8007ee8 <__malloc_unlock>
 8007e8a:	f104 000b 	add.w	r0, r4, #11
 8007e8e:	1d23      	adds	r3, r4, #4
 8007e90:	f020 0007 	bic.w	r0, r0, #7
 8007e94:	1ac2      	subs	r2, r0, r3
 8007e96:	bf1c      	itt	ne
 8007e98:	1a1b      	subne	r3, r3, r0
 8007e9a:	50a3      	strne	r3, [r4, r2]
 8007e9c:	e7af      	b.n	8007dfe <_malloc_r+0x22>
 8007e9e:	6862      	ldr	r2, [r4, #4]
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	bf0c      	ite	eq
 8007ea4:	f8c8 2000 	streq.w	r2, [r8]
 8007ea8:	605a      	strne	r2, [r3, #4]
 8007eaa:	e7eb      	b.n	8007e84 <_malloc_r+0xa8>
 8007eac:	4623      	mov	r3, r4
 8007eae:	6864      	ldr	r4, [r4, #4]
 8007eb0:	e7ae      	b.n	8007e10 <_malloc_r+0x34>
 8007eb2:	463c      	mov	r4, r7
 8007eb4:	687f      	ldr	r7, [r7, #4]
 8007eb6:	e7b6      	b.n	8007e26 <_malloc_r+0x4a>
 8007eb8:	461a      	mov	r2, r3
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	d1fb      	bne.n	8007eb8 <_malloc_r+0xdc>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	6053      	str	r3, [r2, #4]
 8007ec4:	e7de      	b.n	8007e84 <_malloc_r+0xa8>
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	6033      	str	r3, [r6, #0]
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f000 f80c 	bl	8007ee8 <__malloc_unlock>
 8007ed0:	e794      	b.n	8007dfc <_malloc_r+0x20>
 8007ed2:	6005      	str	r5, [r0, #0]
 8007ed4:	e7d6      	b.n	8007e84 <_malloc_r+0xa8>
 8007ed6:	bf00      	nop
 8007ed8:	20000878 	.word	0x20000878

08007edc <__malloc_lock>:
 8007edc:	4801      	ldr	r0, [pc, #4]	@ (8007ee4 <__malloc_lock+0x8>)
 8007ede:	f7ff bf01 	b.w	8007ce4 <__retarget_lock_acquire_recursive>
 8007ee2:	bf00      	nop
 8007ee4:	20000870 	.word	0x20000870

08007ee8 <__malloc_unlock>:
 8007ee8:	4801      	ldr	r0, [pc, #4]	@ (8007ef0 <__malloc_unlock+0x8>)
 8007eea:	f7ff befc 	b.w	8007ce6 <__retarget_lock_release_recursive>
 8007eee:	bf00      	nop
 8007ef0:	20000870 	.word	0x20000870

08007ef4 <__ssputs_r>:
 8007ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef8:	688e      	ldr	r6, [r1, #8]
 8007efa:	461f      	mov	r7, r3
 8007efc:	42be      	cmp	r6, r7
 8007efe:	680b      	ldr	r3, [r1, #0]
 8007f00:	4682      	mov	sl, r0
 8007f02:	460c      	mov	r4, r1
 8007f04:	4690      	mov	r8, r2
 8007f06:	d82d      	bhi.n	8007f64 <__ssputs_r+0x70>
 8007f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f10:	d026      	beq.n	8007f60 <__ssputs_r+0x6c>
 8007f12:	6965      	ldr	r5, [r4, #20]
 8007f14:	6909      	ldr	r1, [r1, #16]
 8007f16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f1a:	eba3 0901 	sub.w	r9, r3, r1
 8007f1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f22:	1c7b      	adds	r3, r7, #1
 8007f24:	444b      	add	r3, r9
 8007f26:	106d      	asrs	r5, r5, #1
 8007f28:	429d      	cmp	r5, r3
 8007f2a:	bf38      	it	cc
 8007f2c:	461d      	movcc	r5, r3
 8007f2e:	0553      	lsls	r3, r2, #21
 8007f30:	d527      	bpl.n	8007f82 <__ssputs_r+0x8e>
 8007f32:	4629      	mov	r1, r5
 8007f34:	f7ff ff52 	bl	8007ddc <_malloc_r>
 8007f38:	4606      	mov	r6, r0
 8007f3a:	b360      	cbz	r0, 8007f96 <__ssputs_r+0xa2>
 8007f3c:	6921      	ldr	r1, [r4, #16]
 8007f3e:	464a      	mov	r2, r9
 8007f40:	f7ff fed2 	bl	8007ce8 <memcpy>
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f4e:	81a3      	strh	r3, [r4, #12]
 8007f50:	6126      	str	r6, [r4, #16]
 8007f52:	6165      	str	r5, [r4, #20]
 8007f54:	444e      	add	r6, r9
 8007f56:	eba5 0509 	sub.w	r5, r5, r9
 8007f5a:	6026      	str	r6, [r4, #0]
 8007f5c:	60a5      	str	r5, [r4, #8]
 8007f5e:	463e      	mov	r6, r7
 8007f60:	42be      	cmp	r6, r7
 8007f62:	d900      	bls.n	8007f66 <__ssputs_r+0x72>
 8007f64:	463e      	mov	r6, r7
 8007f66:	6820      	ldr	r0, [r4, #0]
 8007f68:	4632      	mov	r2, r6
 8007f6a:	4641      	mov	r1, r8
 8007f6c:	f7ff fe6e 	bl	8007c4c <memmove>
 8007f70:	68a3      	ldr	r3, [r4, #8]
 8007f72:	1b9b      	subs	r3, r3, r6
 8007f74:	60a3      	str	r3, [r4, #8]
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	4433      	add	r3, r6
 8007f7a:	6023      	str	r3, [r4, #0]
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f82:	462a      	mov	r2, r5
 8007f84:	f000 faac 	bl	80084e0 <_realloc_r>
 8007f88:	4606      	mov	r6, r0
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d1e0      	bne.n	8007f50 <__ssputs_r+0x5c>
 8007f8e:	6921      	ldr	r1, [r4, #16]
 8007f90:	4650      	mov	r0, sl
 8007f92:	f7ff feb7 	bl	8007d04 <_free_r>
 8007f96:	230c      	movs	r3, #12
 8007f98:	f8ca 3000 	str.w	r3, [sl]
 8007f9c:	89a3      	ldrh	r3, [r4, #12]
 8007f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fa2:	81a3      	strh	r3, [r4, #12]
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	e7e9      	b.n	8007f7e <__ssputs_r+0x8a>
	...

08007fac <_svfiprintf_r>:
 8007fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb0:	4698      	mov	r8, r3
 8007fb2:	898b      	ldrh	r3, [r1, #12]
 8007fb4:	061b      	lsls	r3, r3, #24
 8007fb6:	b09d      	sub	sp, #116	@ 0x74
 8007fb8:	4607      	mov	r7, r0
 8007fba:	460d      	mov	r5, r1
 8007fbc:	4614      	mov	r4, r2
 8007fbe:	d510      	bpl.n	8007fe2 <_svfiprintf_r+0x36>
 8007fc0:	690b      	ldr	r3, [r1, #16]
 8007fc2:	b973      	cbnz	r3, 8007fe2 <_svfiprintf_r+0x36>
 8007fc4:	2140      	movs	r1, #64	@ 0x40
 8007fc6:	f7ff ff09 	bl	8007ddc <_malloc_r>
 8007fca:	6028      	str	r0, [r5, #0]
 8007fcc:	6128      	str	r0, [r5, #16]
 8007fce:	b930      	cbnz	r0, 8007fde <_svfiprintf_r+0x32>
 8007fd0:	230c      	movs	r3, #12
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd8:	b01d      	add	sp, #116	@ 0x74
 8007fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fde:	2340      	movs	r3, #64	@ 0x40
 8007fe0:	616b      	str	r3, [r5, #20]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fe6:	2320      	movs	r3, #32
 8007fe8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ff0:	2330      	movs	r3, #48	@ 0x30
 8007ff2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008190 <_svfiprintf_r+0x1e4>
 8007ff6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ffa:	f04f 0901 	mov.w	r9, #1
 8007ffe:	4623      	mov	r3, r4
 8008000:	469a      	mov	sl, r3
 8008002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008006:	b10a      	cbz	r2, 800800c <_svfiprintf_r+0x60>
 8008008:	2a25      	cmp	r2, #37	@ 0x25
 800800a:	d1f9      	bne.n	8008000 <_svfiprintf_r+0x54>
 800800c:	ebba 0b04 	subs.w	fp, sl, r4
 8008010:	d00b      	beq.n	800802a <_svfiprintf_r+0x7e>
 8008012:	465b      	mov	r3, fp
 8008014:	4622      	mov	r2, r4
 8008016:	4629      	mov	r1, r5
 8008018:	4638      	mov	r0, r7
 800801a:	f7ff ff6b 	bl	8007ef4 <__ssputs_r>
 800801e:	3001      	adds	r0, #1
 8008020:	f000 80a7 	beq.w	8008172 <_svfiprintf_r+0x1c6>
 8008024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008026:	445a      	add	r2, fp
 8008028:	9209      	str	r2, [sp, #36]	@ 0x24
 800802a:	f89a 3000 	ldrb.w	r3, [sl]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 809f 	beq.w	8008172 <_svfiprintf_r+0x1c6>
 8008034:	2300      	movs	r3, #0
 8008036:	f04f 32ff 	mov.w	r2, #4294967295
 800803a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800803e:	f10a 0a01 	add.w	sl, sl, #1
 8008042:	9304      	str	r3, [sp, #16]
 8008044:	9307      	str	r3, [sp, #28]
 8008046:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800804a:	931a      	str	r3, [sp, #104]	@ 0x68
 800804c:	4654      	mov	r4, sl
 800804e:	2205      	movs	r2, #5
 8008050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008054:	484e      	ldr	r0, [pc, #312]	@ (8008190 <_svfiprintf_r+0x1e4>)
 8008056:	f7f8 f8c3 	bl	80001e0 <memchr>
 800805a:	9a04      	ldr	r2, [sp, #16]
 800805c:	b9d8      	cbnz	r0, 8008096 <_svfiprintf_r+0xea>
 800805e:	06d0      	lsls	r0, r2, #27
 8008060:	bf44      	itt	mi
 8008062:	2320      	movmi	r3, #32
 8008064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008068:	0711      	lsls	r1, r2, #28
 800806a:	bf44      	itt	mi
 800806c:	232b      	movmi	r3, #43	@ 0x2b
 800806e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008072:	f89a 3000 	ldrb.w	r3, [sl]
 8008076:	2b2a      	cmp	r3, #42	@ 0x2a
 8008078:	d015      	beq.n	80080a6 <_svfiprintf_r+0xfa>
 800807a:	9a07      	ldr	r2, [sp, #28]
 800807c:	4654      	mov	r4, sl
 800807e:	2000      	movs	r0, #0
 8008080:	f04f 0c0a 	mov.w	ip, #10
 8008084:	4621      	mov	r1, r4
 8008086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800808a:	3b30      	subs	r3, #48	@ 0x30
 800808c:	2b09      	cmp	r3, #9
 800808e:	d94b      	bls.n	8008128 <_svfiprintf_r+0x17c>
 8008090:	b1b0      	cbz	r0, 80080c0 <_svfiprintf_r+0x114>
 8008092:	9207      	str	r2, [sp, #28]
 8008094:	e014      	b.n	80080c0 <_svfiprintf_r+0x114>
 8008096:	eba0 0308 	sub.w	r3, r0, r8
 800809a:	fa09 f303 	lsl.w	r3, r9, r3
 800809e:	4313      	orrs	r3, r2
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	46a2      	mov	sl, r4
 80080a4:	e7d2      	b.n	800804c <_svfiprintf_r+0xa0>
 80080a6:	9b03      	ldr	r3, [sp, #12]
 80080a8:	1d19      	adds	r1, r3, #4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	9103      	str	r1, [sp, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	bfbb      	ittet	lt
 80080b2:	425b      	neglt	r3, r3
 80080b4:	f042 0202 	orrlt.w	r2, r2, #2
 80080b8:	9307      	strge	r3, [sp, #28]
 80080ba:	9307      	strlt	r3, [sp, #28]
 80080bc:	bfb8      	it	lt
 80080be:	9204      	strlt	r2, [sp, #16]
 80080c0:	7823      	ldrb	r3, [r4, #0]
 80080c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80080c4:	d10a      	bne.n	80080dc <_svfiprintf_r+0x130>
 80080c6:	7863      	ldrb	r3, [r4, #1]
 80080c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ca:	d132      	bne.n	8008132 <_svfiprintf_r+0x186>
 80080cc:	9b03      	ldr	r3, [sp, #12]
 80080ce:	1d1a      	adds	r2, r3, #4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	9203      	str	r2, [sp, #12]
 80080d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080d8:	3402      	adds	r4, #2
 80080da:	9305      	str	r3, [sp, #20]
 80080dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081a0 <_svfiprintf_r+0x1f4>
 80080e0:	7821      	ldrb	r1, [r4, #0]
 80080e2:	2203      	movs	r2, #3
 80080e4:	4650      	mov	r0, sl
 80080e6:	f7f8 f87b 	bl	80001e0 <memchr>
 80080ea:	b138      	cbz	r0, 80080fc <_svfiprintf_r+0x150>
 80080ec:	9b04      	ldr	r3, [sp, #16]
 80080ee:	eba0 000a 	sub.w	r0, r0, sl
 80080f2:	2240      	movs	r2, #64	@ 0x40
 80080f4:	4082      	lsls	r2, r0
 80080f6:	4313      	orrs	r3, r2
 80080f8:	3401      	adds	r4, #1
 80080fa:	9304      	str	r3, [sp, #16]
 80080fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008100:	4824      	ldr	r0, [pc, #144]	@ (8008194 <_svfiprintf_r+0x1e8>)
 8008102:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008106:	2206      	movs	r2, #6
 8008108:	f7f8 f86a 	bl	80001e0 <memchr>
 800810c:	2800      	cmp	r0, #0
 800810e:	d036      	beq.n	800817e <_svfiprintf_r+0x1d2>
 8008110:	4b21      	ldr	r3, [pc, #132]	@ (8008198 <_svfiprintf_r+0x1ec>)
 8008112:	bb1b      	cbnz	r3, 800815c <_svfiprintf_r+0x1b0>
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	3307      	adds	r3, #7
 8008118:	f023 0307 	bic.w	r3, r3, #7
 800811c:	3308      	adds	r3, #8
 800811e:	9303      	str	r3, [sp, #12]
 8008120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008122:	4433      	add	r3, r6
 8008124:	9309      	str	r3, [sp, #36]	@ 0x24
 8008126:	e76a      	b.n	8007ffe <_svfiprintf_r+0x52>
 8008128:	fb0c 3202 	mla	r2, ip, r2, r3
 800812c:	460c      	mov	r4, r1
 800812e:	2001      	movs	r0, #1
 8008130:	e7a8      	b.n	8008084 <_svfiprintf_r+0xd8>
 8008132:	2300      	movs	r3, #0
 8008134:	3401      	adds	r4, #1
 8008136:	9305      	str	r3, [sp, #20]
 8008138:	4619      	mov	r1, r3
 800813a:	f04f 0c0a 	mov.w	ip, #10
 800813e:	4620      	mov	r0, r4
 8008140:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008144:	3a30      	subs	r2, #48	@ 0x30
 8008146:	2a09      	cmp	r2, #9
 8008148:	d903      	bls.n	8008152 <_svfiprintf_r+0x1a6>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0c6      	beq.n	80080dc <_svfiprintf_r+0x130>
 800814e:	9105      	str	r1, [sp, #20]
 8008150:	e7c4      	b.n	80080dc <_svfiprintf_r+0x130>
 8008152:	fb0c 2101 	mla	r1, ip, r1, r2
 8008156:	4604      	mov	r4, r0
 8008158:	2301      	movs	r3, #1
 800815a:	e7f0      	b.n	800813e <_svfiprintf_r+0x192>
 800815c:	ab03      	add	r3, sp, #12
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	462a      	mov	r2, r5
 8008162:	4b0e      	ldr	r3, [pc, #56]	@ (800819c <_svfiprintf_r+0x1f0>)
 8008164:	a904      	add	r1, sp, #16
 8008166:	4638      	mov	r0, r7
 8008168:	f3af 8000 	nop.w
 800816c:	1c42      	adds	r2, r0, #1
 800816e:	4606      	mov	r6, r0
 8008170:	d1d6      	bne.n	8008120 <_svfiprintf_r+0x174>
 8008172:	89ab      	ldrh	r3, [r5, #12]
 8008174:	065b      	lsls	r3, r3, #25
 8008176:	f53f af2d 	bmi.w	8007fd4 <_svfiprintf_r+0x28>
 800817a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800817c:	e72c      	b.n	8007fd8 <_svfiprintf_r+0x2c>
 800817e:	ab03      	add	r3, sp, #12
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	462a      	mov	r2, r5
 8008184:	4b05      	ldr	r3, [pc, #20]	@ (800819c <_svfiprintf_r+0x1f0>)
 8008186:	a904      	add	r1, sp, #16
 8008188:	4638      	mov	r0, r7
 800818a:	f000 f879 	bl	8008280 <_printf_i>
 800818e:	e7ed      	b.n	800816c <_svfiprintf_r+0x1c0>
 8008190:	08009350 	.word	0x08009350
 8008194:	0800935a 	.word	0x0800935a
 8008198:	00000000 	.word	0x00000000
 800819c:	08007ef5 	.word	0x08007ef5
 80081a0:	08009356 	.word	0x08009356

080081a4 <_printf_common>:
 80081a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	4616      	mov	r6, r2
 80081aa:	4698      	mov	r8, r3
 80081ac:	688a      	ldr	r2, [r1, #8]
 80081ae:	690b      	ldr	r3, [r1, #16]
 80081b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081b4:	4293      	cmp	r3, r2
 80081b6:	bfb8      	it	lt
 80081b8:	4613      	movlt	r3, r2
 80081ba:	6033      	str	r3, [r6, #0]
 80081bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081c0:	4607      	mov	r7, r0
 80081c2:	460c      	mov	r4, r1
 80081c4:	b10a      	cbz	r2, 80081ca <_printf_common+0x26>
 80081c6:	3301      	adds	r3, #1
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	0699      	lsls	r1, r3, #26
 80081ce:	bf42      	ittt	mi
 80081d0:	6833      	ldrmi	r3, [r6, #0]
 80081d2:	3302      	addmi	r3, #2
 80081d4:	6033      	strmi	r3, [r6, #0]
 80081d6:	6825      	ldr	r5, [r4, #0]
 80081d8:	f015 0506 	ands.w	r5, r5, #6
 80081dc:	d106      	bne.n	80081ec <_printf_common+0x48>
 80081de:	f104 0a19 	add.w	sl, r4, #25
 80081e2:	68e3      	ldr	r3, [r4, #12]
 80081e4:	6832      	ldr	r2, [r6, #0]
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	42ab      	cmp	r3, r5
 80081ea:	dc26      	bgt.n	800823a <_printf_common+0x96>
 80081ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081f0:	6822      	ldr	r2, [r4, #0]
 80081f2:	3b00      	subs	r3, #0
 80081f4:	bf18      	it	ne
 80081f6:	2301      	movne	r3, #1
 80081f8:	0692      	lsls	r2, r2, #26
 80081fa:	d42b      	bmi.n	8008254 <_printf_common+0xb0>
 80081fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008200:	4641      	mov	r1, r8
 8008202:	4638      	mov	r0, r7
 8008204:	47c8      	blx	r9
 8008206:	3001      	adds	r0, #1
 8008208:	d01e      	beq.n	8008248 <_printf_common+0xa4>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	6922      	ldr	r2, [r4, #16]
 800820e:	f003 0306 	and.w	r3, r3, #6
 8008212:	2b04      	cmp	r3, #4
 8008214:	bf02      	ittt	eq
 8008216:	68e5      	ldreq	r5, [r4, #12]
 8008218:	6833      	ldreq	r3, [r6, #0]
 800821a:	1aed      	subeq	r5, r5, r3
 800821c:	68a3      	ldr	r3, [r4, #8]
 800821e:	bf0c      	ite	eq
 8008220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008224:	2500      	movne	r5, #0
 8008226:	4293      	cmp	r3, r2
 8008228:	bfc4      	itt	gt
 800822a:	1a9b      	subgt	r3, r3, r2
 800822c:	18ed      	addgt	r5, r5, r3
 800822e:	2600      	movs	r6, #0
 8008230:	341a      	adds	r4, #26
 8008232:	42b5      	cmp	r5, r6
 8008234:	d11a      	bne.n	800826c <_printf_common+0xc8>
 8008236:	2000      	movs	r0, #0
 8008238:	e008      	b.n	800824c <_printf_common+0xa8>
 800823a:	2301      	movs	r3, #1
 800823c:	4652      	mov	r2, sl
 800823e:	4641      	mov	r1, r8
 8008240:	4638      	mov	r0, r7
 8008242:	47c8      	blx	r9
 8008244:	3001      	adds	r0, #1
 8008246:	d103      	bne.n	8008250 <_printf_common+0xac>
 8008248:	f04f 30ff 	mov.w	r0, #4294967295
 800824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008250:	3501      	adds	r5, #1
 8008252:	e7c6      	b.n	80081e2 <_printf_common+0x3e>
 8008254:	18e1      	adds	r1, r4, r3
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	2030      	movs	r0, #48	@ 0x30
 800825a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800825e:	4422      	add	r2, r4
 8008260:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008264:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008268:	3302      	adds	r3, #2
 800826a:	e7c7      	b.n	80081fc <_printf_common+0x58>
 800826c:	2301      	movs	r3, #1
 800826e:	4622      	mov	r2, r4
 8008270:	4641      	mov	r1, r8
 8008272:	4638      	mov	r0, r7
 8008274:	47c8      	blx	r9
 8008276:	3001      	adds	r0, #1
 8008278:	d0e6      	beq.n	8008248 <_printf_common+0xa4>
 800827a:	3601      	adds	r6, #1
 800827c:	e7d9      	b.n	8008232 <_printf_common+0x8e>
	...

08008280 <_printf_i>:
 8008280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	7e0f      	ldrb	r7, [r1, #24]
 8008286:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008288:	2f78      	cmp	r7, #120	@ 0x78
 800828a:	4691      	mov	r9, r2
 800828c:	4680      	mov	r8, r0
 800828e:	460c      	mov	r4, r1
 8008290:	469a      	mov	sl, r3
 8008292:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008296:	d807      	bhi.n	80082a8 <_printf_i+0x28>
 8008298:	2f62      	cmp	r7, #98	@ 0x62
 800829a:	d80a      	bhi.n	80082b2 <_printf_i+0x32>
 800829c:	2f00      	cmp	r7, #0
 800829e:	f000 80d2 	beq.w	8008446 <_printf_i+0x1c6>
 80082a2:	2f58      	cmp	r7, #88	@ 0x58
 80082a4:	f000 80b9 	beq.w	800841a <_printf_i+0x19a>
 80082a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082b0:	e03a      	b.n	8008328 <_printf_i+0xa8>
 80082b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082b6:	2b15      	cmp	r3, #21
 80082b8:	d8f6      	bhi.n	80082a8 <_printf_i+0x28>
 80082ba:	a101      	add	r1, pc, #4	@ (adr r1, 80082c0 <_printf_i+0x40>)
 80082bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082c0:	08008319 	.word	0x08008319
 80082c4:	0800832d 	.word	0x0800832d
 80082c8:	080082a9 	.word	0x080082a9
 80082cc:	080082a9 	.word	0x080082a9
 80082d0:	080082a9 	.word	0x080082a9
 80082d4:	080082a9 	.word	0x080082a9
 80082d8:	0800832d 	.word	0x0800832d
 80082dc:	080082a9 	.word	0x080082a9
 80082e0:	080082a9 	.word	0x080082a9
 80082e4:	080082a9 	.word	0x080082a9
 80082e8:	080082a9 	.word	0x080082a9
 80082ec:	0800842d 	.word	0x0800842d
 80082f0:	08008357 	.word	0x08008357
 80082f4:	080083e7 	.word	0x080083e7
 80082f8:	080082a9 	.word	0x080082a9
 80082fc:	080082a9 	.word	0x080082a9
 8008300:	0800844f 	.word	0x0800844f
 8008304:	080082a9 	.word	0x080082a9
 8008308:	08008357 	.word	0x08008357
 800830c:	080082a9 	.word	0x080082a9
 8008310:	080082a9 	.word	0x080082a9
 8008314:	080083ef 	.word	0x080083ef
 8008318:	6833      	ldr	r3, [r6, #0]
 800831a:	1d1a      	adds	r2, r3, #4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6032      	str	r2, [r6, #0]
 8008320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008324:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008328:	2301      	movs	r3, #1
 800832a:	e09d      	b.n	8008468 <_printf_i+0x1e8>
 800832c:	6833      	ldr	r3, [r6, #0]
 800832e:	6820      	ldr	r0, [r4, #0]
 8008330:	1d19      	adds	r1, r3, #4
 8008332:	6031      	str	r1, [r6, #0]
 8008334:	0606      	lsls	r6, r0, #24
 8008336:	d501      	bpl.n	800833c <_printf_i+0xbc>
 8008338:	681d      	ldr	r5, [r3, #0]
 800833a:	e003      	b.n	8008344 <_printf_i+0xc4>
 800833c:	0645      	lsls	r5, r0, #25
 800833e:	d5fb      	bpl.n	8008338 <_printf_i+0xb8>
 8008340:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008344:	2d00      	cmp	r5, #0
 8008346:	da03      	bge.n	8008350 <_printf_i+0xd0>
 8008348:	232d      	movs	r3, #45	@ 0x2d
 800834a:	426d      	negs	r5, r5
 800834c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008350:	4859      	ldr	r0, [pc, #356]	@ (80084b8 <_printf_i+0x238>)
 8008352:	230a      	movs	r3, #10
 8008354:	e011      	b.n	800837a <_printf_i+0xfa>
 8008356:	6821      	ldr	r1, [r4, #0]
 8008358:	6833      	ldr	r3, [r6, #0]
 800835a:	0608      	lsls	r0, r1, #24
 800835c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008360:	d402      	bmi.n	8008368 <_printf_i+0xe8>
 8008362:	0649      	lsls	r1, r1, #25
 8008364:	bf48      	it	mi
 8008366:	b2ad      	uxthmi	r5, r5
 8008368:	2f6f      	cmp	r7, #111	@ 0x6f
 800836a:	4853      	ldr	r0, [pc, #332]	@ (80084b8 <_printf_i+0x238>)
 800836c:	6033      	str	r3, [r6, #0]
 800836e:	bf14      	ite	ne
 8008370:	230a      	movne	r3, #10
 8008372:	2308      	moveq	r3, #8
 8008374:	2100      	movs	r1, #0
 8008376:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800837a:	6866      	ldr	r6, [r4, #4]
 800837c:	60a6      	str	r6, [r4, #8]
 800837e:	2e00      	cmp	r6, #0
 8008380:	bfa2      	ittt	ge
 8008382:	6821      	ldrge	r1, [r4, #0]
 8008384:	f021 0104 	bicge.w	r1, r1, #4
 8008388:	6021      	strge	r1, [r4, #0]
 800838a:	b90d      	cbnz	r5, 8008390 <_printf_i+0x110>
 800838c:	2e00      	cmp	r6, #0
 800838e:	d04b      	beq.n	8008428 <_printf_i+0x1a8>
 8008390:	4616      	mov	r6, r2
 8008392:	fbb5 f1f3 	udiv	r1, r5, r3
 8008396:	fb03 5711 	mls	r7, r3, r1, r5
 800839a:	5dc7      	ldrb	r7, [r0, r7]
 800839c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083a0:	462f      	mov	r7, r5
 80083a2:	42bb      	cmp	r3, r7
 80083a4:	460d      	mov	r5, r1
 80083a6:	d9f4      	bls.n	8008392 <_printf_i+0x112>
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	d10b      	bne.n	80083c4 <_printf_i+0x144>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	07df      	lsls	r7, r3, #31
 80083b0:	d508      	bpl.n	80083c4 <_printf_i+0x144>
 80083b2:	6923      	ldr	r3, [r4, #16]
 80083b4:	6861      	ldr	r1, [r4, #4]
 80083b6:	4299      	cmp	r1, r3
 80083b8:	bfde      	ittt	le
 80083ba:	2330      	movle	r3, #48	@ 0x30
 80083bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083c4:	1b92      	subs	r2, r2, r6
 80083c6:	6122      	str	r2, [r4, #16]
 80083c8:	f8cd a000 	str.w	sl, [sp]
 80083cc:	464b      	mov	r3, r9
 80083ce:	aa03      	add	r2, sp, #12
 80083d0:	4621      	mov	r1, r4
 80083d2:	4640      	mov	r0, r8
 80083d4:	f7ff fee6 	bl	80081a4 <_printf_common>
 80083d8:	3001      	adds	r0, #1
 80083da:	d14a      	bne.n	8008472 <_printf_i+0x1f2>
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	b004      	add	sp, #16
 80083e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	f043 0320 	orr.w	r3, r3, #32
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	4833      	ldr	r0, [pc, #204]	@ (80084bc <_printf_i+0x23c>)
 80083f0:	2778      	movs	r7, #120	@ 0x78
 80083f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	6831      	ldr	r1, [r6, #0]
 80083fa:	061f      	lsls	r7, r3, #24
 80083fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008400:	d402      	bmi.n	8008408 <_printf_i+0x188>
 8008402:	065f      	lsls	r7, r3, #25
 8008404:	bf48      	it	mi
 8008406:	b2ad      	uxthmi	r5, r5
 8008408:	6031      	str	r1, [r6, #0]
 800840a:	07d9      	lsls	r1, r3, #31
 800840c:	bf44      	itt	mi
 800840e:	f043 0320 	orrmi.w	r3, r3, #32
 8008412:	6023      	strmi	r3, [r4, #0]
 8008414:	b11d      	cbz	r5, 800841e <_printf_i+0x19e>
 8008416:	2310      	movs	r3, #16
 8008418:	e7ac      	b.n	8008374 <_printf_i+0xf4>
 800841a:	4827      	ldr	r0, [pc, #156]	@ (80084b8 <_printf_i+0x238>)
 800841c:	e7e9      	b.n	80083f2 <_printf_i+0x172>
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	f023 0320 	bic.w	r3, r3, #32
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	e7f6      	b.n	8008416 <_printf_i+0x196>
 8008428:	4616      	mov	r6, r2
 800842a:	e7bd      	b.n	80083a8 <_printf_i+0x128>
 800842c:	6833      	ldr	r3, [r6, #0]
 800842e:	6825      	ldr	r5, [r4, #0]
 8008430:	6961      	ldr	r1, [r4, #20]
 8008432:	1d18      	adds	r0, r3, #4
 8008434:	6030      	str	r0, [r6, #0]
 8008436:	062e      	lsls	r6, r5, #24
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	d501      	bpl.n	8008440 <_printf_i+0x1c0>
 800843c:	6019      	str	r1, [r3, #0]
 800843e:	e002      	b.n	8008446 <_printf_i+0x1c6>
 8008440:	0668      	lsls	r0, r5, #25
 8008442:	d5fb      	bpl.n	800843c <_printf_i+0x1bc>
 8008444:	8019      	strh	r1, [r3, #0]
 8008446:	2300      	movs	r3, #0
 8008448:	6123      	str	r3, [r4, #16]
 800844a:	4616      	mov	r6, r2
 800844c:	e7bc      	b.n	80083c8 <_printf_i+0x148>
 800844e:	6833      	ldr	r3, [r6, #0]
 8008450:	1d1a      	adds	r2, r3, #4
 8008452:	6032      	str	r2, [r6, #0]
 8008454:	681e      	ldr	r6, [r3, #0]
 8008456:	6862      	ldr	r2, [r4, #4]
 8008458:	2100      	movs	r1, #0
 800845a:	4630      	mov	r0, r6
 800845c:	f7f7 fec0 	bl	80001e0 <memchr>
 8008460:	b108      	cbz	r0, 8008466 <_printf_i+0x1e6>
 8008462:	1b80      	subs	r0, r0, r6
 8008464:	6060      	str	r0, [r4, #4]
 8008466:	6863      	ldr	r3, [r4, #4]
 8008468:	6123      	str	r3, [r4, #16]
 800846a:	2300      	movs	r3, #0
 800846c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008470:	e7aa      	b.n	80083c8 <_printf_i+0x148>
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	4632      	mov	r2, r6
 8008476:	4649      	mov	r1, r9
 8008478:	4640      	mov	r0, r8
 800847a:	47d0      	blx	sl
 800847c:	3001      	adds	r0, #1
 800847e:	d0ad      	beq.n	80083dc <_printf_i+0x15c>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	079b      	lsls	r3, r3, #30
 8008484:	d413      	bmi.n	80084ae <_printf_i+0x22e>
 8008486:	68e0      	ldr	r0, [r4, #12]
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	4298      	cmp	r0, r3
 800848c:	bfb8      	it	lt
 800848e:	4618      	movlt	r0, r3
 8008490:	e7a6      	b.n	80083e0 <_printf_i+0x160>
 8008492:	2301      	movs	r3, #1
 8008494:	4632      	mov	r2, r6
 8008496:	4649      	mov	r1, r9
 8008498:	4640      	mov	r0, r8
 800849a:	47d0      	blx	sl
 800849c:	3001      	adds	r0, #1
 800849e:	d09d      	beq.n	80083dc <_printf_i+0x15c>
 80084a0:	3501      	adds	r5, #1
 80084a2:	68e3      	ldr	r3, [r4, #12]
 80084a4:	9903      	ldr	r1, [sp, #12]
 80084a6:	1a5b      	subs	r3, r3, r1
 80084a8:	42ab      	cmp	r3, r5
 80084aa:	dcf2      	bgt.n	8008492 <_printf_i+0x212>
 80084ac:	e7eb      	b.n	8008486 <_printf_i+0x206>
 80084ae:	2500      	movs	r5, #0
 80084b0:	f104 0619 	add.w	r6, r4, #25
 80084b4:	e7f5      	b.n	80084a2 <_printf_i+0x222>
 80084b6:	bf00      	nop
 80084b8:	08009361 	.word	0x08009361
 80084bc:	08009372 	.word	0x08009372

080084c0 <_sbrk_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	4d06      	ldr	r5, [pc, #24]	@ (80084dc <_sbrk_r+0x1c>)
 80084c4:	2300      	movs	r3, #0
 80084c6:	4604      	mov	r4, r0
 80084c8:	4608      	mov	r0, r1
 80084ca:	602b      	str	r3, [r5, #0]
 80084cc:	f7f9 fb1c 	bl	8001b08 <_sbrk>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d102      	bne.n	80084da <_sbrk_r+0x1a>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	b103      	cbz	r3, 80084da <_sbrk_r+0x1a>
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	2000086c 	.word	0x2000086c

080084e0 <_realloc_r>:
 80084e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e4:	4680      	mov	r8, r0
 80084e6:	4615      	mov	r5, r2
 80084e8:	460c      	mov	r4, r1
 80084ea:	b921      	cbnz	r1, 80084f6 <_realloc_r+0x16>
 80084ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084f0:	4611      	mov	r1, r2
 80084f2:	f7ff bc73 	b.w	8007ddc <_malloc_r>
 80084f6:	b92a      	cbnz	r2, 8008504 <_realloc_r+0x24>
 80084f8:	f7ff fc04 	bl	8007d04 <_free_r>
 80084fc:	2400      	movs	r4, #0
 80084fe:	4620      	mov	r0, r4
 8008500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008504:	f000 f81a 	bl	800853c <_malloc_usable_size_r>
 8008508:	4285      	cmp	r5, r0
 800850a:	4606      	mov	r6, r0
 800850c:	d802      	bhi.n	8008514 <_realloc_r+0x34>
 800850e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008512:	d8f4      	bhi.n	80084fe <_realloc_r+0x1e>
 8008514:	4629      	mov	r1, r5
 8008516:	4640      	mov	r0, r8
 8008518:	f7ff fc60 	bl	8007ddc <_malloc_r>
 800851c:	4607      	mov	r7, r0
 800851e:	2800      	cmp	r0, #0
 8008520:	d0ec      	beq.n	80084fc <_realloc_r+0x1c>
 8008522:	42b5      	cmp	r5, r6
 8008524:	462a      	mov	r2, r5
 8008526:	4621      	mov	r1, r4
 8008528:	bf28      	it	cs
 800852a:	4632      	movcs	r2, r6
 800852c:	f7ff fbdc 	bl	8007ce8 <memcpy>
 8008530:	4621      	mov	r1, r4
 8008532:	4640      	mov	r0, r8
 8008534:	f7ff fbe6 	bl	8007d04 <_free_r>
 8008538:	463c      	mov	r4, r7
 800853a:	e7e0      	b.n	80084fe <_realloc_r+0x1e>

0800853c <_malloc_usable_size_r>:
 800853c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008540:	1f18      	subs	r0, r3, #4
 8008542:	2b00      	cmp	r3, #0
 8008544:	bfbc      	itt	lt
 8008546:	580b      	ldrlt	r3, [r1, r0]
 8008548:	18c0      	addlt	r0, r0, r3
 800854a:	4770      	bx	lr

0800854c <_init>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	bf00      	nop
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr

08008558 <_fini>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr
