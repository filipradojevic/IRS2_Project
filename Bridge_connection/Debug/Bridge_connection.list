
Bridge_connection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008258  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  080083e8  080083e8  000093e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ea8  08008ea8  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ea8  08008ea8  00009ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eb0  08008eb0  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eb0  08008eb0  00009eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008eb4  08008eb4  00009eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008eb8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  2000005c  08008f14  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  08008f14  0000a84c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016a3d  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b4  00000000  00000000  00020ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00023d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3a  00000000  00000000  00024fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002937e  00000000  00000000  00025e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018863  00000000  00000000  0004f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fec5f  00000000  00000000  00067a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166662  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005278  00000000  00000000  001666a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0016b920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083d0 	.word	0x080083d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080083d0 	.word	0x080083d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000d70:	4a2f      	ldr	r2, [pc, #188]	@ (8000e30 <MX_ADC1_Init+0xe4>)
 8000d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d74:	4b2d      	ldr	r3, [pc, #180]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d80:	4b2a      	ldr	r3, [pc, #168]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d86:	4b29      	ldr	r3, [pc, #164]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8c:	4b27      	ldr	r3, [pc, #156]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d92:	4b26      	ldr	r3, [pc, #152]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d98:	4b24      	ldr	r3, [pc, #144]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d9e:	4b23      	ldr	r3, [pc, #140]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000db8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dce:	4817      	ldr	r0, [pc, #92]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000dd0:	f001 fb30 	bl	8002434 <HAL_ADC_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000dda:	f000 fb8d 	bl	80014f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	4810      	ldr	r0, [pc, #64]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000dea:	f002 fcad 	bl	8003748 <HAL_ADCEx_MultiModeConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000df4:	f000 fb80 	bl	80014f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <MX_ADC1_Init+0xe8>)
 8000dfa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e04:	237f      	movs	r3, #127	@ 0x7f
 8000e06:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <MX_ADC1_Init+0xe0>)
 8000e16:	f001 ffc7 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e20:	f000 fb6a 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	@ 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000078 	.word	0x20000078
 8000e30:	50040000 	.word	0x50040000
 8000e34:	25b00200 	.word	0x25b00200

08000e38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b0ac      	sub	sp, #176	@ 0xb0
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2288      	movs	r2, #136	@ 0x88
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f006 fe53 	bl	8007b04 <memset>
  if(adcHandle->Instance==ADC1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a2b      	ldr	r2, [pc, #172]	@ (8000f10 <HAL_ADC_MspInit+0xd8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d14f      	bne.n	8000f08 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e6c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e6e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000e7e:	2310      	movs	r3, #16
 8000e80:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e82:	2307      	movs	r3, #7
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 fba3 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000ea4:	f000 fb28 	bl	80014f8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eac:	4a19      	ldr	r2, [pc, #100]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000eae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb4:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec4:	4a13      	ldr	r2, [pc, #76]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <HAL_ADC_MspInit+0xdc>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ed8:	2310      	movs	r3, #16
 8000eda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ede:	230b      	movs	r3, #11
 8000ee0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef4:	f002 fe68 	bl	8003bc8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	2012      	movs	r0, #18
 8000efe:	f002 fdae 	bl	8003a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f02:	2012      	movs	r0, #18
 8000f04:	f002 fdc7 	bl	8003a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f08:	bf00      	nop
 8000f0a:	37b0      	adds	r7, #176	@ 0xb0
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	50040000 	.word	0x50040000
 8000f14:	40021000 	.word	0x40021000

08000f18 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	4b39      	ldr	r3, [pc, #228]	@ (8001014 <MX_GPIO_Init+0xfc>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f32:	4a38      	ldr	r2, [pc, #224]	@ (8001014 <MX_GPIO_Init+0xfc>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3a:	4b36      	ldr	r3, [pc, #216]	@ (8001014 <MX_GPIO_Init+0xfc>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b33      	ldr	r3, [pc, #204]	@ (8001014 <MX_GPIO_Init+0xfc>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	4a32      	ldr	r2, [pc, #200]	@ (8001014 <MX_GPIO_Init+0xfc>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f52:	4b30      	ldr	r3, [pc, #192]	@ (8001014 <MX_GPIO_Init+0xfc>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <MX_GPIO_Init+0xfc>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f62:	4a2c      	ldr	r2, [pc, #176]	@ (8001014 <MX_GPIO_Init+0xfc>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <MX_GPIO_Init+0xfc>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_11, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 6102 	mov.w	r1, #2080	@ 0x820
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f80:	f002 ffcc 	bl	8003f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f8a:	4823      	ldr	r0, [pc, #140]	@ (8001018 <MX_GPIO_Init+0x100>)
 8000f8c:	f002 ffc6 	bl	8003f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9;
 8000f90:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
 8000f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f96:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481d      	ldr	r0, [pc, #116]	@ (800101c <MX_GPIO_Init+0x104>)
 8000fa8:	f002 fe0e 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_11;
 8000fac:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 8000fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc8:	f002 fdfe 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	@ (8001018 <MX_GPIO_Init+0x100>)
 8000fe6:	f002 fdef 	bl	8003bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	2017      	movs	r0, #23
 8000ff0:	f002 fd35 	bl	8003a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ff4:	2017      	movs	r0, #23
 8000ff6:	f002 fd4e 	bl	8003a96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2028      	movs	r0, #40	@ 0x28
 8001000:	f002 fd2d 	bl	8003a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001004:	2028      	movs	r0, #40	@ 0x28
 8001006:	f002 fd46 	bl	8003a96 <HAL_NVIC_EnableIRQ>

}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000
 8001018:	48000400 	.word	0x48000400
 800101c:	48000800 	.word	0x48000800

08001020 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <MX_I2C2_Init+0x74>)
 8001026:	4a1c      	ldr	r2, [pc, #112]	@ (8001098 <MX_I2C2_Init+0x78>)
 8001028:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F12981;
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <MX_I2C2_Init+0x74>)
 800102c:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <MX_I2C2_Init+0x7c>)
 800102e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <MX_I2C2_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001036:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <MX_I2C2_Init+0x74>)
 8001038:	2201      	movs	r2, #1
 800103a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <MX_I2C2_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001042:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <MX_I2C2_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <MX_I2C2_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <MX_I2C2_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <MX_I2C2_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800105a:	480e      	ldr	r0, [pc, #56]	@ (8001094 <MX_I2C2_Init+0x74>)
 800105c:	f002 ffa8 	bl	8003fb0 <HAL_I2C_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001066:	f000 fa47 	bl	80014f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	4809      	ldr	r0, [pc, #36]	@ (8001094 <MX_I2C2_Init+0x74>)
 800106e:	f003 fbbd 	bl	80047ec <HAL_I2CEx_ConfigAnalogFilter>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001078:	f000 fa3e 	bl	80014f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <MX_I2C2_Init+0x74>)
 8001080:	f003 fbff 	bl	8004882 <HAL_I2CEx_ConfigDigitalFilter>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800108a:	f000 fa35 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000dc 	.word	0x200000dc
 8001098:	40005800 	.word	0x40005800
 800109c:	00f12981 	.word	0x00f12981

080010a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ac      	sub	sp, #176	@ 0xb0
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2288      	movs	r2, #136	@ 0x88
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f006 fd1f 	bl	8007b04 <memset>
  if(i2cHandle->Instance==I2C2)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a21      	ldr	r2, [pc, #132]	@ (8001150 <HAL_I2C_MspInit+0xb0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d13b      	bne.n	8001148 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010d0:	2380      	movs	r3, #128	@ 0x80
 80010d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4618      	mov	r0, r3
 80010de:	f004 fa81 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010e8:	f000 fa06 	bl	80014f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_I2C_MspInit+0xb4>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f0:	4a18      	ldr	r2, [pc, #96]	@ (8001154 <HAL_I2C_MspInit+0xb4>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_I2C_MspInit+0xb4>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001104:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001108:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110c:	2312      	movs	r3, #18
 800110e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800111e:	2304      	movs	r3, #4
 8001120:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001128:	4619      	mov	r1, r3
 800112a:	480b      	ldr	r0, [pc, #44]	@ (8001158 <HAL_I2C_MspInit+0xb8>)
 800112c:	f002 fd4c 	bl	8003bc8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <HAL_I2C_MspInit+0xb4>)
 8001132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001134:	4a07      	ldr	r2, [pc, #28]	@ (8001154 <HAL_I2C_MspInit+0xb4>)
 8001136:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800113a:	6593      	str	r3, [r2, #88]	@ 0x58
 800113c:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <HAL_I2C_MspInit+0xb4>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001140:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001148:	bf00      	nop
 800114a:	37b0      	adds	r7, #176	@ 0xb0
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40005800 	.word	0x40005800
 8001154:	40021000 	.word	0x40021000
 8001158:	48000400 	.word	0x48000400

0800115c <Login_Write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

Status_Logging_t Login_Write(const char* message) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    /*  We will send via UART4 for logging messages  */
    moj_status = HAL_UART_Transmit(&huart4, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff f833 	bl	80001d0 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	b29a      	uxth	r2, r3
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4806      	ldr	r0, [pc, #24]	@ (8001190 <Login_Write+0x34>)
 8001176:	f004 ff3f 	bl	8005ff8 <HAL_UART_Transmit>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <Login_Write+0x38>)
 8001180:	701a      	strb	r2, [r3, #0]

    return logging;
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <Login_Write+0x3c>)
 8001184:	781b      	ldrb	r3, [r3, #0]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000568 	.word	0x20000568
 8001194:	2000015a 	.word	0x2000015a
 8001198:	20000159 	.word	0x20000159

0800119c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a0:	f000 feb9 	bl	8001f16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a4:	f000 f85c 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a8:	f7ff feb6 	bl	8000f18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011ac:	f000 fd2c 	bl	8001c08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80011b0:	f000 fd5a 	bl	8001c68 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80011b4:	f7ff fdca 	bl	8000d4c <MX_ADC1_Init>
  MX_I2C2_Init();
 80011b8:	f7ff ff32 	bl	8001020 <MX_I2C2_Init>
  MX_UART4_Init();
 80011bc:	f000 fcf4 	bl	8001ba8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  	/* Enaibling OLED */
	if (ssd1306_Init()!= INITIALIZED_OLED_INIT_SUCCESSFULLY){
 80011c0:	f000 fa18 	bl	80015f4 <ssd1306_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d005      	beq.n	80011d6 <main+0x3a>
		Login_Write("Unaible to initialize ssd1306 Init! \r\n");
 80011ca:	481b      	ldr	r0, [pc, #108]	@ (8001238 <main+0x9c>)
 80011cc:	f7ff ffc6 	bl	800115c <Login_Write>
		Error_Handler();
 80011d0:	f000 f992 	bl	80014f8 <Error_Handler>
 80011d4:	e002      	b.n	80011dc <main+0x40>
	}
	else{
		Login_Write("Successfully initialized ssd1306 Init! \r\n");
 80011d6:	4819      	ldr	r0, [pc, #100]	@ (800123c <main+0xa0>)
 80011d8:	f7ff ffc0 	bl	800115c <Login_Write>
	}

	/*  Enabling communications  */
	if (HAL_UART_Receive_IT(&huart2, uart2_data.rx_buffer, UART_EXPECT_DATA_SIZE) != HAL_OK){
 80011dc:	2201      	movs	r2, #1
 80011de:	4918      	ldr	r1, [pc, #96]	@ (8001240 <main+0xa4>)
 80011e0:	4818      	ldr	r0, [pc, #96]	@ (8001244 <main+0xa8>)
 80011e2:	f004 fff1 	bl	80061c8 <HAL_UART_Receive_IT>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <main+0x5c>
		Login_Write("Unaible to start UART2 receive IT MODE! \r\n");
 80011ec:	4816      	ldr	r0, [pc, #88]	@ (8001248 <main+0xac>)
 80011ee:	f7ff ffb5 	bl	800115c <Login_Write>
		Error_Handler();
 80011f2:	f000 f981 	bl	80014f8 <Error_Handler>
 80011f6:	e002      	b.n	80011fe <main+0x62>
	}
	else{
		Login_Write("Successfully started UART2 receive IT MODE! \r\n");
 80011f8:	4814      	ldr	r0, [pc, #80]	@ (800124c <main+0xb0>)
 80011fa:	f7ff ffaf 	bl	800115c <Login_Write>
	}
	if(HAL_UART_Receive_IT(&huart3, uart3_data.rx_buffer, UART_EXPECT_DATA_SIZE) != HAL_OK){
 80011fe:	2201      	movs	r2, #1
 8001200:	4913      	ldr	r1, [pc, #76]	@ (8001250 <main+0xb4>)
 8001202:	4814      	ldr	r0, [pc, #80]	@ (8001254 <main+0xb8>)
 8001204:	f004 ffe0 	bl	80061c8 <HAL_UART_Receive_IT>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <main+0x7e>
		Login_Write("Unaible to start UART3 receive IT MODE! \r\n");
 800120e:	4812      	ldr	r0, [pc, #72]	@ (8001258 <main+0xbc>)
 8001210:	f7ff ffa4 	bl	800115c <Login_Write>
		Error_Handler();
 8001214:	f000 f970 	bl	80014f8 <Error_Handler>
 8001218:	e002      	b.n	8001220 <main+0x84>
	}
	else{
		Login_Write("Successfully started UART3 receive IT MODE! \r\n");
 800121a:	4810      	ldr	r0, [pc, #64]	@ (800125c <main+0xc0>)
 800121c:	f7ff ff9e 	bl	800115c <Login_Write>
	}

  HAL_UART_Receive_IT(&huart2, uart2_data.rx_buffer, UART_EXPECT_DATA_SIZE);
 8001220:	2201      	movs	r2, #1
 8001222:	4907      	ldr	r1, [pc, #28]	@ (8001240 <main+0xa4>)
 8001224:	4807      	ldr	r0, [pc, #28]	@ (8001244 <main+0xa8>)
 8001226:	f004 ffcf 	bl	80061c8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, uart3_data.rx_buffer, UART_EXPECT_DATA_SIZE);
 800122a:	2201      	movs	r2, #1
 800122c:	4908      	ldr	r1, [pc, #32]	@ (8001250 <main+0xb4>)
 800122e:	4809      	ldr	r0, [pc, #36]	@ (8001254 <main+0xb8>)
 8001230:	f004 ffca 	bl	80061c8 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <main+0x98>
 8001238:	080083e8 	.word	0x080083e8
 800123c:	08008410 	.word	0x08008410
 8001240:	20000130 	.word	0x20000130
 8001244:	200005f0 	.word	0x200005f0
 8001248:	0800843c 	.word	0x0800843c
 800124c:	08008468 	.word	0x08008468
 8001250:	20000144 	.word	0x20000144
 8001254:	20000678 	.word	0x20000678
 8001258:	08008498 	.word	0x08008498
 800125c:	080084c4 	.word	0x080084c4

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b096      	sub	sp, #88	@ 0x58
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2244      	movs	r2, #68	@ 0x44
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f006 fc48 	bl	8007b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	463b      	mov	r3, r7
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001282:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001286:	f003 fb57 	bl	8004938 <HAL_PWREx_ControlVoltageScaling>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001290:	f000 f932 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001294:	2310      	movs	r3, #16
 8001296:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001298:	2301      	movs	r3, #1
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012a0:	2360      	movs	r3, #96	@ 0x60
 80012a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a4:	2302      	movs	r3, #2
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012a8:	2301      	movs	r3, #1
 80012aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80012b0:	2328      	movs	r3, #40	@ 0x28
 80012b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012b4:	2307      	movs	r3, #7
 80012b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012bc:	2302      	movs	r3, #2
 80012be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 fb8d 	bl	80049e4 <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80012d0:	f000 f912 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d4:	230f      	movs	r3, #15
 80012d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d8:	2303      	movs	r3, #3
 80012da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	2104      	movs	r1, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 ff55 	bl	800519c <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012f8:	f000 f8fe 	bl	80014f8 <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3758      	adds	r7, #88	@ 0x58
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]

    if(GPIO_Pin == BUTTON_PIN) {
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001314:	d108      	bne.n	8001328 <HAL_GPIO_EXTI_Callback+0x24>
    	/* Inicijalizacija ADC-a */
    	if (HAL_ADC_Start_IT(&hadc1) != HAL_OK){ // Starts ADC -> we will catch the complete
 8001316:	4808      	ldr	r0, [pc, #32]	@ (8001338 <HAL_GPIO_EXTI_Callback+0x34>)
 8001318:	f001 f9dc 	bl	80026d4 <HAL_ADC_Start_IT>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_GPIO_EXTI_Callback+0x2a>
    		Error_Handler();
 8001322:	f000 f8e9 	bl	80014f8 <Error_Handler>
    	}
    }
    else{
    	Login_Write("Not expected another interrupt only PC13! \r\n");
    }
}
 8001326:	e002      	b.n	800132e <HAL_GPIO_EXTI_Callback+0x2a>
    	Login_Write("Not expected another interrupt only PC13! \r\n");
 8001328:	4804      	ldr	r0, [pc, #16]	@ (800133c <HAL_GPIO_EXTI_Callback+0x38>)
 800132a:	f7ff ff17 	bl	800115c <Login_Write>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000078 	.word	0x20000078
 800133c:	080084f4 	.word	0x080084f4

08001340 <HAL_ADC_ConvCpltCallback>:

/*  This function will get the temp value and send on display via I2C  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af02      	add	r7, sp, #8
 8001346:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a3c      	ldr	r2, [pc, #240]	@ (8001440 <HAL_ADC_ConvCpltCallback+0x100>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d165      	bne.n	800141e <HAL_ADC_ConvCpltCallback+0xde>
    {
        		/*  Catching the adc_value  */
    	uint32_t adc_value = HAL_ADC_GetValue(hadc);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f001 faec 	bl	8002930 <HAL_ADC_GetValue>
 8001358:	6278      	str	r0, [r7, #36]	@ 0x24
    	ADC_Value_Temperature_t value;
    	value.temperature = (adc_value * 3.3 / 4095) * 100; // Example for a temperature sensor
 800135a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800135c:	f7ff f8d2 	bl	8000504 <__aeabi_ui2d>
 8001360:	a333      	add	r3, pc, #204	@ (adr r3, 8001430 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f7ff f947 	bl	80005f8 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	a331      	add	r3, pc, #196	@ (adr r3, 8001438 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff fa68 	bl	800084c <__aeabi_ddiv>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <HAL_ADC_ConvCpltCallback+0x104>)
 800138a:	f7ff f935 	bl	80005f8 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f7ff fb41 	bl	8000a1c <__aeabi_d2uiz>
 800139a:	4603      	mov	r3, r0
 800139c:	b29b      	uxth	r3, r3
 800139e:	843b      	strh	r3, [r7, #32]
    	char temp_str[20];
    	sprintf(temp_str, "Temp: %d C", value.temperature); // @suppress("Float formatting support")
 80013a0:	8c3b      	ldrh	r3, [r7, #32]
 80013a2:	461a      	mov	r2, r3
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4927      	ldr	r1, [pc, #156]	@ (8001448 <HAL_ADC_ConvCpltCallback+0x108>)
 80013aa:	4618      	mov	r0, r3
 80013ac:	f006 fb70 	bl	8007a90 <siprintf>
    	//ssd1306_Clear();
    	if (ssd1306_SetCursor(0,0)!= INITIALIZED_OLED_CURSOR_SUCCESSFULLY){
 80013b0:	2100      	movs	r1, #0
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 fad4 	bl	8001960 <ssd1306_SetCursor>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d005      	beq.n	80013ca <HAL_ADC_ConvCpltCallback+0x8a>
    		Login_Write("Unaible to initialize ssd1306 SetCursor! \r\n");
 80013be:	4823      	ldr	r0, [pc, #140]	@ (800144c <HAL_ADC_ConvCpltCallback+0x10c>)
 80013c0:	f7ff fecc 	bl	800115c <Login_Write>
    		Error_Handler();
 80013c4:	f000 f898 	bl	80014f8 <Error_Handler>
 80013c8:	e002      	b.n	80013d0 <HAL_ADC_ConvCpltCallback+0x90>
    	}
    	else{
    		Login_Write("Successfully initialized ssd1306 SetCursor! \r\n");
 80013ca:	4821      	ldr	r0, [pc, #132]	@ (8001450 <HAL_ADC_ConvCpltCallback+0x110>)
 80013cc:	f7ff fec6 	bl	800115c <Login_Write>
    	}

    	char result = ssd1306_WriteString(temp_str, Font_7x10, White);
 80013d0:	4b20      	ldr	r3, [pc, #128]	@ (8001454 <HAL_ADC_ConvCpltCallback+0x114>)
 80013d2:	f107 000c 	add.w	r0, r7, #12
 80013d6:	2201      	movs	r2, #1
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013dc:	f000 fa9a 	bl	8001914 <ssd1306_WriteString>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    	if (result == '\0') {
 80013e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d103      	bne.n	80013f6 <HAL_ADC_ConvCpltCallback+0xb6>
    	    Login_Write("Successfully initialized ssd1306 WriteString!\r\n");
 80013ee:	481a      	ldr	r0, [pc, #104]	@ (8001458 <HAL_ADC_ConvCpltCallback+0x118>)
 80013f0:	f7ff feb4 	bl	800115c <Login_Write>
 80013f4:	e004      	b.n	8001400 <HAL_ADC_ConvCpltCallback+0xc0>
    	}
    	else {
    	    Login_Write("Unable to initialize ssd1306 WriteString!\r\n");
 80013f6:	4819      	ldr	r0, [pc, #100]	@ (800145c <HAL_ADC_ConvCpltCallback+0x11c>)
 80013f8:	f7ff feb0 	bl	800115c <Login_Write>
    	    Error_Handler();
 80013fc:	f000 f87c 	bl	80014f8 <Error_Handler>
    	}
    	if (ssd1306_UpdateScreen()!= INITIALIZED_OLED_UPDATE_SCREEN_SUCCESSFULLY){
 8001400:	f000 f97c 	bl	80016fc <ssd1306_UpdateScreen>
 8001404:	4603      	mov	r3, r0
 8001406:	2b01      	cmp	r3, #1
 8001408:	d005      	beq.n	8001416 <HAL_ADC_ConvCpltCallback+0xd6>
    		Login_Write("Unaible to initialize ssd1306 UpdateScreen! \r\n");
 800140a:	4815      	ldr	r0, [pc, #84]	@ (8001460 <HAL_ADC_ConvCpltCallback+0x120>)
 800140c:	f7ff fea6 	bl	800115c <Login_Write>
    		Error_Handler();
 8001410:	f000 f872 	bl	80014f8 <Error_Handler>
    }
    else{
    	Login_Write("Not hadc->Instance == ADC1! \r\n");
    	Error_Handler();
    }
}
 8001414:	e008      	b.n	8001428 <HAL_ADC_ConvCpltCallback+0xe8>
    		Login_Write("Successfully initialized ssd1306 UpdateScreen! \r\n");
 8001416:	4813      	ldr	r0, [pc, #76]	@ (8001464 <HAL_ADC_ConvCpltCallback+0x124>)
 8001418:	f7ff fea0 	bl	800115c <Login_Write>
}
 800141c:	e004      	b.n	8001428 <HAL_ADC_ConvCpltCallback+0xe8>
    	Login_Write("Not hadc->Instance == ADC1! \r\n");
 800141e:	4812      	ldr	r0, [pc, #72]	@ (8001468 <HAL_ADC_ConvCpltCallback+0x128>)
 8001420:	f7ff fe9c 	bl	800115c <Login_Write>
    	Error_Handler();
 8001424:	f000 f868 	bl	80014f8 <Error_Handler>
}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	@ 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	66666666 	.word	0x66666666
 8001434:	400a6666 	.word	0x400a6666
 8001438:	00000000 	.word	0x00000000
 800143c:	40affe00 	.word	0x40affe00
 8001440:	50040000 	.word	0x50040000
 8001444:	40590000 	.word	0x40590000
 8001448:	08008524 	.word	0x08008524
 800144c:	08008530 	.word	0x08008530
 8001450:	0800855c 	.word	0x0800855c
 8001454:	08008e20 	.word	0x08008e20
 8001458:	0800858c 	.word	0x0800858c
 800145c:	080085bc 	.word	0x080085bc
 8001460:	080085e8 	.word	0x080085e8
 8001464:	08008618 	.word	0x08008618
 8001468:	0800864c 	.word	0x0800864c

0800146c <HAL_UART_RxCpltCallback>:



	/* This is a bridge communication between HOST -> uC -> ESP8226 module */
					/*  This is for internet communication  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <HAL_UART_RxCpltCallback+0x6c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d111      	bne.n	80014a2 <HAL_UART_RxCpltCallback+0x36>
		uart3_data.tx_buffer[0] = uart2_data.rx_buffer[0];
 800147e:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <HAL_UART_RxCpltCallback+0x70>)
 8001480:	781a      	ldrb	r2, [r3, #0]
 8001482:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <HAL_UART_RxCpltCallback+0x74>)
 8001484:	729a      	strb	r2, [r3, #10]
		HAL_UART_Receive_IT(&huart2, uart2_data.rx_buffer, 1);
 8001486:	2201      	movs	r2, #1
 8001488:	4914      	ldr	r1, [pc, #80]	@ (80014dc <HAL_UART_RxCpltCallback+0x70>)
 800148a:	4816      	ldr	r0, [pc, #88]	@ (80014e4 <HAL_UART_RxCpltCallback+0x78>)
 800148c:	f004 fe9c 	bl	80061c8 <HAL_UART_Receive_IT>
		HAL_UART_AbortTransmit_IT(&huart3);
 8001490:	4815      	ldr	r0, [pc, #84]	@ (80014e8 <HAL_UART_RxCpltCallback+0x7c>)
 8001492:	f004 fee5 	bl	8006260 <HAL_UART_AbortTransmit_IT>
		HAL_UART_Transmit_IT(&huart3, uart3_data.tx_buffer, 1);
 8001496:	2201      	movs	r2, #1
 8001498:	4914      	ldr	r1, [pc, #80]	@ (80014ec <HAL_UART_RxCpltCallback+0x80>)
 800149a:	4813      	ldr	r0, [pc, #76]	@ (80014e8 <HAL_UART_RxCpltCallback+0x7c>)
 800149c:	f004 fe36 	bl	800610c <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart3, uart3_data.rx_buffer, 1);
		HAL_UART_AbortTransmit_IT(&huart2);
		HAL_UART_Transmit_IT(&huart2, uart2_data.tx_buffer, 1);
	}

}
 80014a0:	e015      	b.n	80014ce <HAL_UART_RxCpltCallback+0x62>
	else if(huart->Instance == USART3){
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a12      	ldr	r2, [pc, #72]	@ (80014f0 <HAL_UART_RxCpltCallback+0x84>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d110      	bne.n	80014ce <HAL_UART_RxCpltCallback+0x62>
		uart2_data.tx_buffer[0] = uart3_data.rx_buffer[0];
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <HAL_UART_RxCpltCallback+0x74>)
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_UART_RxCpltCallback+0x70>)
 80014b2:	729a      	strb	r2, [r3, #10]
		HAL_UART_Receive_IT(&huart3, uart3_data.rx_buffer, 1);
 80014b4:	2201      	movs	r2, #1
 80014b6:	490a      	ldr	r1, [pc, #40]	@ (80014e0 <HAL_UART_RxCpltCallback+0x74>)
 80014b8:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <HAL_UART_RxCpltCallback+0x7c>)
 80014ba:	f004 fe85 	bl	80061c8 <HAL_UART_Receive_IT>
		HAL_UART_AbortTransmit_IT(&huart2);
 80014be:	4809      	ldr	r0, [pc, #36]	@ (80014e4 <HAL_UART_RxCpltCallback+0x78>)
 80014c0:	f004 fece 	bl	8006260 <HAL_UART_AbortTransmit_IT>
		HAL_UART_Transmit_IT(&huart2, uart2_data.tx_buffer, 1);
 80014c4:	2201      	movs	r2, #1
 80014c6:	490b      	ldr	r1, [pc, #44]	@ (80014f4 <HAL_UART_RxCpltCallback+0x88>)
 80014c8:	4806      	ldr	r0, [pc, #24]	@ (80014e4 <HAL_UART_RxCpltCallback+0x78>)
 80014ca:	f004 fe1f 	bl	800610c <HAL_UART_Transmit_IT>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40004400 	.word	0x40004400
 80014dc:	20000130 	.word	0x20000130
 80014e0:	20000144 	.word	0x20000144
 80014e4:	200005f0 	.word	0x200005f0
 80014e8:	20000678 	.word	0x20000678
 80014ec:	2000014e 	.word	0x2000014e
 80014f0:	40004800 	.word	0x40004800
 80014f4:	2000013a 	.word	0x2000013a

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();


  if (uart_error_status == USART3_ERROR) {
 8001500:	4b1c      	ldr	r3, [pc, #112]	@ (8001574 <Error_Handler+0x7c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d10a      	bne.n	800151e <Error_Handler+0x26>
	  for (;;){
		  /* Led1->uC will be set if USART3 fails with sending or receiving */
		  HAL_GPIO_WritePin(LED_UC_PORT, LED_UC_PIN, GPIO_PIN_SET);
 8001508:	2201      	movs	r2, #1
 800150a:	2120      	movs	r1, #32
 800150c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001510:	f002 fd04 	bl	8003f1c <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8001514:	20c8      	movs	r0, #200	@ 0xc8
 8001516:	f000 fd73 	bl	8002000 <HAL_Delay>
		  HAL_GPIO_WritePin(LED_UC_PORT, LED_UC_PIN, GPIO_PIN_SET);
 800151a:	bf00      	nop
 800151c:	e7f4      	b.n	8001508 <Error_Handler+0x10>
	  }
  }
  else if (uart_error_status == USART2_ERROR){
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <Error_Handler+0x7c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d10a      	bne.n	800153c <Error_Handler+0x44>
	  for (;;){
		  /* Led2->kit will be set if USART2 fails with sending or receiving */
		  HAL_GPIO_WritePin(LED2_KIT_PORT, LED2_KIT_PIN, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800152c:	4812      	ldr	r0, [pc, #72]	@ (8001578 <Error_Handler+0x80>)
 800152e:	f002 fcf5 	bl	8003f1c <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8001532:	20c8      	movs	r0, #200	@ 0xc8
 8001534:	f000 fd64 	bl	8002000 <HAL_Delay>
		  HAL_GPIO_WritePin(LED2_KIT_PORT, LED2_KIT_PIN, GPIO_PIN_SET);
 8001538:	bf00      	nop
 800153a:	e7f4      	b.n	8001526 <Error_Handler+0x2e>
	  }
  }
  else if (uart_error_status == USART3_USART4_HUART_ERROR){
 800153c:	4b0d      	ldr	r3, [pc, #52]	@ (8001574 <Error_Handler+0x7c>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d107      	bne.n	8001554 <Error_Handler+0x5c>
	  Login_Write("Error: Interrupt instance conflict detected for USART3 and USART4!\r\n");
 8001544:	480d      	ldr	r0, [pc, #52]	@ (800157c <Error_Handler+0x84>)
 8001546:	f7ff fe09 	bl	800115c <Login_Write>
	  HAL_Delay(0xFFFFFFFF);
 800154a:	f04f 30ff 	mov.w	r0, #4294967295
 800154e:	f000 fd57 	bl	8002000 <HAL_Delay>
	  /*All other errors check call->stack for debbug error*/
	  for (;;);
  }

  /* USER CODE END Error_Handler_Debug */
}
 8001552:	e00d      	b.n	8001570 <Error_Handler+0x78>
  else if (uart_error_status = UART4_ERROR || logging == LOGGING_ERROR){
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <Error_Handler+0x7c>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED1_KIT_PORT, LED1_KIT_PIN);
 800155a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800155e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001562:	f002 fcf3 	bl	8003f4c <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8001566:	20c8      	movs	r0, #200	@ 0xc8
 8001568:	f000 fd4a 	bl	8002000 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED1_KIT_PORT, LED1_KIT_PIN);
 800156c:	bf00      	nop
 800156e:	e7f4      	b.n	800155a <Error_Handler+0x62>
}
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000158 	.word	0x20000158
 8001578:	48000400 	.word	0x48000400
 800157c:	0800866c 	.word	0x0800866c

08001580 <ssd1306_Reset>:
#include <string.h>  // For memcpy


#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af04      	add	r7, sp, #16
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	2301      	movs	r3, #1
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2301      	movs	r3, #1
 80015aa:	2200      	movs	r2, #0
 80015ac:	2178      	movs	r1, #120	@ 0x78
 80015ae:	4803      	ldr	r0, [pc, #12]	@ (80015bc <ssd1306_WriteCommand+0x2c>)
 80015b0:	f002 fd9a 	bl	80040e8 <HAL_I2C_Mem_Write>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200000dc 	.word	0x200000dc

080015c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af04      	add	r7, sp, #16
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	f04f 32ff 	mov.w	r2, #4294967295
 80015d2:	9202      	str	r2, [sp, #8]
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2301      	movs	r3, #1
 80015dc:	2240      	movs	r2, #64	@ 0x40
 80015de:	2178      	movs	r1, #120	@ 0x78
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <ssd1306_WriteData+0x30>)
 80015e2:	f002 fd81 	bl	80040e8 <HAL_I2C_Mem_Write>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200000dc 	.word	0x200000dc

080015f4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
SSD1306_OLED_INIT_T ssd1306_Init(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80015f8:	f7ff ffc2 	bl	8001580 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80015fc:	2064      	movs	r0, #100	@ 0x64
 80015fe:	f000 fcff 	bl	8002000 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001602:	2000      	movs	r0, #0
 8001604:	f000 f9da 	bl	80019bc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001608:	2020      	movs	r0, #32
 800160a:	f7ff ffc1 	bl	8001590 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800160e:	2000      	movs	r0, #0
 8001610:	f7ff ffbe 	bl	8001590 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001614:	20b0      	movs	r0, #176	@ 0xb0
 8001616:	f7ff ffbb 	bl	8001590 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800161a:	20c8      	movs	r0, #200	@ 0xc8
 800161c:	f7ff ffb8 	bl	8001590 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff ffb5 	bl	8001590 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001626:	2010      	movs	r0, #16
 8001628:	f7ff ffb2 	bl	8001590 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800162c:	2040      	movs	r0, #64	@ 0x40
 800162e:	f7ff ffaf 	bl	8001590 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001632:	20ff      	movs	r0, #255	@ 0xff
 8001634:	f000 f9ae 	bl	8001994 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001638:	20a1      	movs	r0, #161	@ 0xa1
 800163a:	f7ff ffa9 	bl	8001590 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800163e:	20a6      	movs	r0, #166	@ 0xa6
 8001640:	f7ff ffa6 	bl	8001590 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001644:	20a8      	movs	r0, #168	@ 0xa8
 8001646:	f7ff ffa3 	bl	8001590 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800164a:	203f      	movs	r0, #63	@ 0x3f
 800164c:	f7ff ffa0 	bl	8001590 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001650:	20a4      	movs	r0, #164	@ 0xa4
 8001652:	f7ff ff9d 	bl	8001590 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001656:	20d3      	movs	r0, #211	@ 0xd3
 8001658:	f7ff ff9a 	bl	8001590 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff ff97 	bl	8001590 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001662:	20d5      	movs	r0, #213	@ 0xd5
 8001664:	f7ff ff94 	bl	8001590 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001668:	20f0      	movs	r0, #240	@ 0xf0
 800166a:	f7ff ff91 	bl	8001590 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800166e:	20d9      	movs	r0, #217	@ 0xd9
 8001670:	f7ff ff8e 	bl	8001590 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001674:	2022      	movs	r0, #34	@ 0x22
 8001676:	f7ff ff8b 	bl	8001590 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800167a:	20da      	movs	r0, #218	@ 0xda
 800167c:	f7ff ff88 	bl	8001590 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001680:	2012      	movs	r0, #18
 8001682:	f7ff ff85 	bl	8001590 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001686:	20db      	movs	r0, #219	@ 0xdb
 8001688:	f7ff ff82 	bl	8001590 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800168c:	2020      	movs	r0, #32
 800168e:	f7ff ff7f 	bl	8001590 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001692:	208d      	movs	r0, #141	@ 0x8d
 8001694:	f7ff ff7c 	bl	8001590 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001698:	2014      	movs	r0, #20
 800169a:	f7ff ff79 	bl	8001590 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800169e:	2001      	movs	r0, #1
 80016a0:	f000 f98c 	bl	80019bc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 f811 	bl	80016cc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80016aa:	f000 f827 	bl	80016fc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <ssd1306_Init+0xd4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <ssd1306_Init+0xd4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80016ba:	4b03      	ldr	r3, [pc, #12]	@ (80016c8 <ssd1306_Init+0xd4>)
 80016bc:	2201      	movs	r2, #1
 80016be:	711a      	strb	r2, [r3, #4]

    return INITIALIZED_OLED_INIT_SUCCESSFULLY;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000055c 	.word	0x2000055c

080016cc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <ssd1306_Fill+0x14>
 80016dc:	2300      	movs	r3, #0
 80016de:	e000      	b.n	80016e2 <ssd1306_Fill+0x16>
 80016e0:	23ff      	movs	r3, #255	@ 0xff
 80016e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016e6:	4619      	mov	r1, r3
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <ssd1306_Fill+0x2c>)
 80016ea:	f006 fa0b 	bl	8007b04 <memset>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000015c 	.word	0x2000015c

080016fc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
SSD1306_OLED_UPRDATE_SCREEN_T ssd1306_UpdateScreen(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	71fb      	strb	r3, [r7, #7]
 8001706:	e016      	b.n	8001736 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	3b50      	subs	r3, #80	@ 0x50
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff3e 	bl	8001590 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff ff3b 	bl	8001590 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800171a:	2010      	movs	r0, #16
 800171c:	f7ff ff38 	bl	8001590 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	01db      	lsls	r3, r3, #7
 8001724:	4a08      	ldr	r2, [pc, #32]	@ (8001748 <ssd1306_UpdateScreen+0x4c>)
 8001726:	4413      	add	r3, r2
 8001728:	2180      	movs	r1, #128	@ 0x80
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff48 	bl	80015c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	3301      	adds	r3, #1
 8001734:	71fb      	strb	r3, [r7, #7]
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b07      	cmp	r3, #7
 800173a:	d9e5      	bls.n	8001708 <ssd1306_UpdateScreen+0xc>
    }
    return INITIALIZED_OLED_UPDATE_SCREEN_SUCCESSFULLY;
 800173c:	2301      	movs	r3, #1
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000015c 	.word	0x2000015c

0800174c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	460b      	mov	r3, r1
 8001758:	71bb      	strb	r3, [r7, #6]
 800175a:	4613      	mov	r3, r2
 800175c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db3d      	blt.n	80017e2 <ssd1306_DrawPixel+0x96>
 8001766:	79bb      	ldrb	r3, [r7, #6]
 8001768:	2b3f      	cmp	r3, #63	@ 0x3f
 800176a:	d83a      	bhi.n	80017e2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800176c:	797b      	ldrb	r3, [r7, #5]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d11a      	bne.n	80017a8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001772:	79fa      	ldrb	r2, [r7, #7]
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	08db      	lsrs	r3, r3, #3
 8001778:	b2d8      	uxtb	r0, r3
 800177a:	4603      	mov	r3, r0
 800177c:	01db      	lsls	r3, r3, #7
 800177e:	4413      	add	r3, r2
 8001780:	4a1b      	ldr	r2, [pc, #108]	@ (80017f0 <ssd1306_DrawPixel+0xa4>)
 8001782:	5cd3      	ldrb	r3, [r2, r3]
 8001784:	b25a      	sxtb	r2, r3
 8001786:	79bb      	ldrb	r3, [r7, #6]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	2101      	movs	r1, #1
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	b25b      	sxtb	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	b259      	sxtb	r1, r3
 8001798:	79fa      	ldrb	r2, [r7, #7]
 800179a:	4603      	mov	r3, r0
 800179c:	01db      	lsls	r3, r3, #7
 800179e:	4413      	add	r3, r2
 80017a0:	b2c9      	uxtb	r1, r1
 80017a2:	4a13      	ldr	r2, [pc, #76]	@ (80017f0 <ssd1306_DrawPixel+0xa4>)
 80017a4:	54d1      	strb	r1, [r2, r3]
 80017a6:	e01d      	b.n	80017e4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017a8:	79fa      	ldrb	r2, [r7, #7]
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	08db      	lsrs	r3, r3, #3
 80017ae:	b2d8      	uxtb	r0, r3
 80017b0:	4603      	mov	r3, r0
 80017b2:	01db      	lsls	r3, r3, #7
 80017b4:	4413      	add	r3, r2
 80017b6:	4a0e      	ldr	r2, [pc, #56]	@ (80017f0 <ssd1306_DrawPixel+0xa4>)
 80017b8:	5cd3      	ldrb	r3, [r2, r3]
 80017ba:	b25a      	sxtb	r2, r3
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	4013      	ands	r3, r2
 80017d0:	b259      	sxtb	r1, r3
 80017d2:	79fa      	ldrb	r2, [r7, #7]
 80017d4:	4603      	mov	r3, r0
 80017d6:	01db      	lsls	r3, r3, #7
 80017d8:	4413      	add	r3, r2
 80017da:	b2c9      	uxtb	r1, r1
 80017dc:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <ssd1306_DrawPixel+0xa4>)
 80017de:	54d1      	strb	r1, [r2, r3]
 80017e0:	e000      	b.n	80017e4 <ssd1306_DrawPixel+0x98>
        return;
 80017e2:	bf00      	nop
    }
}
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	2000015c 	.word	0x2000015c

080017f4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b089      	sub	sp, #36	@ 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4604      	mov	r4, r0
 80017fc:	4638      	mov	r0, r7
 80017fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001802:	4623      	mov	r3, r4
 8001804:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2b1f      	cmp	r3, #31
 800180a:	d902      	bls.n	8001812 <ssd1306_WriteChar+0x1e>
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001810:	d901      	bls.n	8001816 <ssd1306_WriteChar+0x22>
        return 0;
 8001812:	2300      	movs	r3, #0
 8001814:	e077      	b.n	8001906 <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001816:	4b3e      	ldr	r3, [pc, #248]	@ (8001910 <ssd1306_WriteChar+0x11c>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	783b      	ldrb	r3, [r7, #0]
 800181e:	4413      	add	r3, r2
 8001820:	2b80      	cmp	r3, #128	@ 0x80
 8001822:	dc06      	bgt.n	8001832 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001824:	4b3a      	ldr	r3, [pc, #232]	@ (8001910 <ssd1306_WriteChar+0x11c>)
 8001826:	885b      	ldrh	r3, [r3, #2]
 8001828:	461a      	mov	r2, r3
 800182a:	787b      	ldrb	r3, [r7, #1]
 800182c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800182e:	2b40      	cmp	r3, #64	@ 0x40
 8001830:	dd01      	ble.n	8001836 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001832:	2300      	movs	r3, #0
 8001834:	e067      	b.n	8001906 <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e04e      	b.n	80018da <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	3b20      	subs	r3, #32
 8001842:	7879      	ldrb	r1, [r7, #1]
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	4619      	mov	r1, r3
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	440b      	add	r3, r1
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	e036      	b.n	80018ca <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d013      	beq.n	8001894 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800186c:	4b28      	ldr	r3, [pc, #160]	@ (8001910 <ssd1306_WriteChar+0x11c>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4413      	add	r3, r2
 8001878:	b2d8      	uxtb	r0, r3
 800187a:	4b25      	ldr	r3, [pc, #148]	@ (8001910 <ssd1306_WriteChar+0x11c>)
 800187c:	885b      	ldrh	r3, [r3, #2]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4413      	add	r3, r2
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff ff5d 	bl	800174c <ssd1306_DrawPixel>
 8001892:	e017      	b.n	80018c4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001894:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <ssd1306_WriteChar+0x11c>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	4413      	add	r3, r2
 80018a0:	b2d8      	uxtb	r0, r3
 80018a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <ssd1306_WriteChar+0x11c>)
 80018a4:	885b      	ldrh	r3, [r3, #2]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	b2d9      	uxtb	r1, r3
 80018b0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	bf0c      	ite	eq
 80018b8:	2301      	moveq	r3, #1
 80018ba:	2300      	movne	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	f7ff ff44 	bl	800174c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	3301      	adds	r3, #1
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	783b      	ldrb	r3, [r7, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d3c3      	bcc.n	800185c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	3301      	adds	r3, #1
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	787b      	ldrb	r3, [r7, #1]
 80018dc:	461a      	mov	r2, r3
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d3ab      	bcc.n	800183c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <ssd1306_WriteChar+0x11c>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	2a00      	cmp	r2, #0
 80018ec:	d005      	beq.n	80018fa <ssd1306_WriteChar+0x106>
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	3a20      	subs	r2, #32
 80018f4:	440a      	add	r2, r1
 80018f6:	7812      	ldrb	r2, [r2, #0]
 80018f8:	e000      	b.n	80018fc <ssd1306_WriteChar+0x108>
 80018fa:	783a      	ldrb	r2, [r7, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <ssd1306_WriteChar+0x11c>)
 8001902:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	@ 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	bf00      	nop
 8001910:	2000055c 	.word	0x2000055c

08001914 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af02      	add	r7, sp, #8
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	4638      	mov	r0, r7
 800191e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001922:	e013      	b.n	800194c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	7818      	ldrb	r0, [r3, #0]
 8001928:	7e3b      	ldrb	r3, [r7, #24]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	463b      	mov	r3, r7
 800192e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001930:	f7ff ff60 	bl	80017f4 <ssd1306_WriteChar>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d002      	beq.n	8001946 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	e008      	b.n	8001958 <ssd1306_WriteString+0x44>
        }
        str++;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3301      	adds	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e7      	bne.n	8001924 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	781b      	ldrb	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <ssd1306_SetCursor>:

/* Position the cursor */
SSD1306_OLED_CURSOR_T ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	71fb      	strb	r3, [r7, #7]
 800196c:	4613      	mov	r3, r2
 800196e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	b29a      	uxth	r2, r3
 8001974:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <ssd1306_SetCursor+0x30>)
 8001976:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	b29a      	uxth	r2, r3
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <ssd1306_SetCursor+0x30>)
 800197e:	805a      	strh	r2, [r3, #2]
    return INITIALIZED_OLED_CURSOR_SUCCESSFULLY;
 8001980:	2301      	movs	r3, #1
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000055c 	.word	0x2000055c

08001994 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800199e:	2381      	movs	r3, #129	@ 0x81
 80019a0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fdf3 	bl	8001590 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fdef 	bl	8001590 <ssd1306_WriteCommand>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80019cc:	23af      	movs	r3, #175	@ 0xaf
 80019ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80019d0:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <ssd1306_SetDisplayOn+0x38>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	715a      	strb	r2, [r3, #5]
 80019d6:	e004      	b.n	80019e2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80019d8:	23ae      	movs	r3, #174	@ 0xae
 80019da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80019dc:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <ssd1306_SetDisplayOn+0x38>)
 80019de:	2200      	movs	r2, #0
 80019e0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fdd3 	bl	8001590 <ssd1306_WriteCommand>
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2000055c 	.word	0x2000055c

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a02:	4a0e      	ldr	r2, [pc, #56]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <NMI_Handler+0x4>

08001a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <MemManage_Handler+0x4>

08001a58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a96:	f000 fa93 	bl	8001fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001aa4:	4802      	ldr	r0, [pc, #8]	@ (8001ab0 <ADC1_2_IRQHandler+0x10>)
 8001aa6:	f000 ff51 	bl	800294c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000078 	.word	0x20000078

08001ab4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ab8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001abc:	f002 fa60 	bl	8003f80 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001ac0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001ac4:	f002 fa5c 	bl	8003f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <USART2_IRQHandler+0x10>)
 8001ad2:	f004 fc3d 	bl	8006350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200005f0 	.word	0x200005f0

08001ae0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <USART3_IRQHandler+0x10>)
 8001ae6:	f004 fc33 	bl	8006350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000678 	.word	0x20000678

08001af4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001af8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001afc:	f002 fa40 	bl	8003f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <UART4_IRQHandler+0x10>)
 8001b0a:	f004 fc21 	bl	8006350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000568 	.word	0x20000568

08001b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b20:	4a14      	ldr	r2, [pc, #80]	@ (8001b74 <_sbrk+0x5c>)
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <_sbrk+0x60>)
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b2c:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b34:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <_sbrk+0x64>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	@ (8001b80 <_sbrk+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d207      	bcs.n	8001b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b48:	f005 ffe4 	bl	8007b14 <__errno>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	220c      	movs	r2, #12
 8001b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	e009      	b.n	8001b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	4a05      	ldr	r2, [pc, #20]	@ (8001b7c <_sbrk+0x64>)
 8001b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20018000 	.word	0x20018000
 8001b78:	00000400 	.word	0x00000400
 8001b7c:	20000564 	.word	0x20000564
 8001b80:	20000850 	.word	0x20000850

08001b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <SystemInit+0x20>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ba4 <SystemInit+0x20>)
 8001b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bac:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <MX_UART4_Init+0x58>)
 8001bae:	4a15      	ldr	r2, [pc, #84]	@ (8001c04 <MX_UART4_Init+0x5c>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	@ (8001c00 <MX_UART4_Init+0x58>)
 8001bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bb8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <MX_UART4_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c00 <MX_UART4_Init+0x58>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <MX_UART4_Init+0x58>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c00 <MX_UART4_Init+0x58>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <MX_UART4_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <MX_UART4_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <MX_UART4_Init+0x58>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <MX_UART4_Init+0x58>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	@ (8001c00 <MX_UART4_Init+0x58>)
 8001bec:	f004 f9b6 	bl	8005f5c <HAL_UART_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001bf6:	f7ff fc7f 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000568 	.word	0x20000568
 8001c04:	40004c00 	.word	0x40004c00

08001c08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c0e:	4a15      	ldr	r2, [pc, #84]	@ (8001c64 <MX_USART2_UART_Init+0x5c>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	@ (8001c60 <MX_USART2_UART_Init+0x58>)
 8001c4c:	f004 f986 	bl	8005f5c <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c56:	f7ff fc4f 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200005f0 	.word	0x200005f0
 8001c64:	40004400 	.word	0x40004400

08001c68 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c6e:	4a15      	ldr	r2, [pc, #84]	@ (8001cc4 <MX_USART3_UART_Init+0x5c>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <MX_USART3_UART_Init+0x58>)
 8001cac:	f004 f956 	bl	8005f5c <HAL_UART_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001cb6:	f7ff fc1f 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000678 	.word	0x20000678
 8001cc4:	40004800 	.word	0x40004800

08001cc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0b0      	sub	sp, #192	@ 0xc0
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce4:	2288      	movs	r2, #136	@ 0x88
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f005 ff0b 	bl	8007b04 <memset>
  if(uartHandle->Instance==UART4)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a6f      	ldr	r2, [pc, #444]	@ (8001eb0 <HAL_UART_MspInit+0x1e8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d144      	bne.n	8001d82 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d04:	4618      	mov	r0, r3
 8001d06:	f003 fc6d 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d10:	f7ff fbf2 	bl	80014f8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d14:	4b67      	ldr	r3, [pc, #412]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d18:	4a66      	ldr	r2, [pc, #408]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001d1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d20:	4b64      	ldr	r3, [pc, #400]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d28:	623b      	str	r3, [r7, #32]
 8001d2a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b61      	ldr	r3, [pc, #388]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d30:	4a60      	ldr	r2, [pc, #384]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d38:	4b5e      	ldr	r3, [pc, #376]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d44:	2303      	movs	r3, #3
 8001d46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d66:	4619      	mov	r1, r3
 8001d68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d6c:	f001 ff2c 	bl	8003bc8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2034      	movs	r0, #52	@ 0x34
 8001d76:	f001 fe72 	bl	8003a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001d7a:	2034      	movs	r0, #52	@ 0x34
 8001d7c:	f001 fe8b 	bl	8003a96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d80:	e091      	b.n	8001ea6 <HAL_UART_MspInit+0x1de>
  else if(uartHandle->Instance==USART2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb8 <HAL_UART_MspInit+0x1f0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d144      	bne.n	8001e16 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 fc23 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001da4:	f7ff fba8 	bl	80014f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001da8:	4b42      	ldr	r3, [pc, #264]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dac:	4a41      	ldr	r2, [pc, #260]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db4:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc4:	4a3b      	ldr	r2, [pc, #236]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dcc:	4b39      	ldr	r3, [pc, #228]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dd8:	230c      	movs	r3, #12
 8001dda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df0:	2307      	movs	r3, #7
 8001df2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e00:	f001 fee2 	bl	8003bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	2026      	movs	r0, #38	@ 0x26
 8001e0a:	f001 fe28 	bl	8003a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e0e:	2026      	movs	r0, #38	@ 0x26
 8001e10:	f001 fe41 	bl	8003a96 <HAL_NVIC_EnableIRQ>
}
 8001e14:	e047      	b.n	8001ea6 <HAL_UART_MspInit+0x1de>
  else if(uartHandle->Instance==USART3)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a28      	ldr	r2, [pc, #160]	@ (8001ebc <HAL_UART_MspInit+0x1f4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d142      	bne.n	8001ea6 <HAL_UART_MspInit+0x1de>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e20:	2304      	movs	r3, #4
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 fbd9 	bl	80055e4 <HAL_RCCEx_PeriphCLKConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_UART_MspInit+0x174>
      Error_Handler();
 8001e38:	f7ff fb5e 	bl	80014f8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e40:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001e42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e48:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e54:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e58:	4a16      	ldr	r2, [pc, #88]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e60:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <HAL_UART_MspInit+0x1ec>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e6c:	2330      	movs	r3, #48	@ 0x30
 8001e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e84:	2307      	movs	r3, #7
 8001e86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480b      	ldr	r0, [pc, #44]	@ (8001ec0 <HAL_UART_MspInit+0x1f8>)
 8001e92:	f001 fe99 	bl	8003bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2027      	movs	r0, #39	@ 0x27
 8001e9c:	f001 fddf 	bl	8003a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ea0:	2027      	movs	r0, #39	@ 0x27
 8001ea2:	f001 fdf8 	bl	8003a96 <HAL_NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	37c0      	adds	r7, #192	@ 0xc0
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40004c00 	.word	0x40004c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40004400 	.word	0x40004400
 8001ebc:	40004800 	.word	0x40004800
 8001ec0:	48000800 	.word	0x48000800

08001ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001efc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec8:	f7ff fe5c 	bl	8001b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ecc:	480c      	ldr	r0, [pc, #48]	@ (8001f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ece:	490d      	ldr	r1, [pc, #52]	@ (8001f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <LoopForever+0xe>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f10 <LoopForever+0x16>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f005 fe15 	bl	8007b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ef6:	f7ff f951 	bl	800119c <main>

08001efa <LoopForever>:

LoopForever:
    b LoopForever
 8001efa:	e7fe      	b.n	8001efa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001efc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001f08:	08008eb8 	.word	0x08008eb8
  ldr r2, =_sbss
 8001f0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001f10:	2000084c 	.word	0x2000084c

08001f14 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC3_IRQHandler>

08001f16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f001 fd91 	bl	8003a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f26:	200f      	movs	r0, #15
 8001f28:	f000 f80e 	bl	8001f48 <HAL_InitTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	e001      	b.n	8001f3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f38:	f7ff fd5e 	bl	80019f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f54:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <HAL_InitTick+0x6c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d023      	beq.n	8001fa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f5c:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <HAL_InitTick+0x70>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <HAL_InitTick+0x6c>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 fd9d 	bl	8003ab2 <HAL_SYSTICK_Config>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10f      	bne.n	8001f9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b0f      	cmp	r3, #15
 8001f82:	d809      	bhi.n	8001f98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f84:	2200      	movs	r2, #0
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f001 fd67 	bl	8003a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f90:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <HAL_InitTick+0x74>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e007      	b.n	8001fa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
 8001f9c:	e004      	b.n	8001fa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e001      	b.n	8001fa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000008 	.word	0x20000008
 8001fe4:	20000700 	.word	0x20000700

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000700 	.word	0x20000700

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000008 	.word	0x20000008

08002048 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	609a      	str	r2, [r3, #8]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3360      	adds	r3, #96	@ 0x60
 80020c2:	461a      	mov	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <LL_ADC_SetOffset+0x44>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	4313      	orrs	r3, r2
 80020e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020e8:	bf00      	nop
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	03fff000 	.word	0x03fff000

080020f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3360      	adds	r3, #96	@ 0x60
 8002106:	461a      	mov	r2, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3360      	adds	r3, #96	@ 0x60
 8002134:	461a      	mov	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	431a      	orrs	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3330      	adds	r3, #48	@ 0x30
 8002190:	461a      	mov	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	4413      	add	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	211f      	movs	r1, #31
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	401a      	ands	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	f003 011f 	and.w	r1, r3, #31
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	431a      	orrs	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021cc:	bf00      	nop
 80021ce:	371c      	adds	r7, #28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021fe:	b480      	push	{r7}
 8002200:	b087      	sub	sp, #28
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3314      	adds	r3, #20
 800220e:	461a      	mov	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	0e5b      	lsrs	r3, r3, #25
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	4413      	add	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	0d1b      	lsrs	r3, r3, #20
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	2107      	movs	r1, #7
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	401a      	ands	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	0d1b      	lsrs	r3, r3, #20
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	431a      	orrs	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002248:	bf00      	nop
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	43db      	mvns	r3, r3
 800226e:	401a      	ands	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0318 	and.w	r3, r3, #24
 8002276:	4908      	ldr	r1, [pc, #32]	@ (8002298 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002278:	40d9      	lsrs	r1, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	400b      	ands	r3, r1
 800227e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002282:	431a      	orrs	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	0007ffff 	.word	0x0007ffff

0800229c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 031f 	and.w	r3, r3, #31
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80022e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6093      	str	r3, [r2, #8]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002308:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800230c:	d101      	bne.n	8002312 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002330:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002334:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800235c:	d101      	bne.n	8002362 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002380:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002384:	f043 0201 	orr.w	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <LL_ADC_IsEnabled+0x18>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e000      	b.n	80023b2 <LL_ADC_IsEnabled+0x1a>
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023d2:	f043 0204 	orr.w	r2, r3, #4
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d101      	bne.n	80023fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b08      	cmp	r3, #8
 800241e:	d101      	bne.n	8002424 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b089      	sub	sp, #36	@ 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e130      	b.n	80026b0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7fe fceb 	bl	8000e38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff3f 	bl	80022f8 <LL_ADC_IsDeepPowerDownEnabled>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff25 	bl	80022d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff ff5a 	bl	8002348 <LL_ADC_IsInternalRegulatorEnabled>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff3e 	bl	8002320 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024a4:	4b84      	ldr	r3, [pc, #528]	@ (80026b8 <HAL_ADC_Init+0x284>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	099b      	lsrs	r3, r3, #6
 80024aa:	4a84      	ldr	r2, [pc, #528]	@ (80026bc <HAL_ADC_Init+0x288>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	099b      	lsrs	r3, r3, #6
 80024b2:	3301      	adds	r3, #1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024b8:	e002      	b.n	80024c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3b01      	subs	r3, #1
 80024be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f9      	bne.n	80024ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ff3c 	bl	8002348 <LL_ADC_IsInternalRegulatorEnabled>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024da:	f043 0210 	orr.w	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff75 	bl	80023e6 <LL_ADC_REG_IsConversionOngoing>
 80024fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 80c9 	bne.w	800269e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f040 80c5 	bne.w	800269e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002518:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800251c:	f043 0202 	orr.w	r2, r3, #2
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff35 	bl	8002398 <LL_ADC_IsEnabled>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d115      	bne.n	8002560 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002534:	4862      	ldr	r0, [pc, #392]	@ (80026c0 <HAL_ADC_Init+0x28c>)
 8002536:	f7ff ff2f 	bl	8002398 <LL_ADC_IsEnabled>
 800253a:	4604      	mov	r4, r0
 800253c:	4861      	ldr	r0, [pc, #388]	@ (80026c4 <HAL_ADC_Init+0x290>)
 800253e:	f7ff ff2b 	bl	8002398 <LL_ADC_IsEnabled>
 8002542:	4603      	mov	r3, r0
 8002544:	431c      	orrs	r4, r3
 8002546:	4860      	ldr	r0, [pc, #384]	@ (80026c8 <HAL_ADC_Init+0x294>)
 8002548:	f7ff ff26 	bl	8002398 <LL_ADC_IsEnabled>
 800254c:	4603      	mov	r3, r0
 800254e:	4323      	orrs	r3, r4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4619      	mov	r1, r3
 800255a:	485c      	ldr	r0, [pc, #368]	@ (80026cc <HAL_ADC_Init+0x298>)
 800255c:	f7ff fd74 	bl	8002048 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7e5b      	ldrb	r3, [r3, #25]
 8002564:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800256a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002570:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002576:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d106      	bne.n	800259c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	3b01      	subs	r3, #1
 8002594:	045b      	lsls	r3, r3, #17
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	4b44      	ldr	r3, [pc, #272]	@ (80026d0 <HAL_ADC_Init+0x29c>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	69b9      	ldr	r1, [r7, #24]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff1b 	bl	800240c <LL_ADC_INJ_IsConversionOngoing>
 80025d6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d13d      	bne.n	800265a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d13a      	bne.n	800265a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025e8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025f0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002600:	f023 0302 	bic.w	r3, r3, #2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	69b9      	ldr	r1, [r7, #24]
 800260a:	430b      	orrs	r3, r1
 800260c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002614:	2b01      	cmp	r3, #1
 8002616:	d118      	bne.n	800264a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002622:	f023 0304 	bic.w	r3, r3, #4
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800262e:	4311      	orrs	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002634:	4311      	orrs	r1, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800263a:	430a      	orrs	r2, r1
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	611a      	str	r2, [r3, #16]
 8002648:	e007      	b.n	800265a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d10c      	bne.n	800267c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	f023 010f 	bic.w	r1, r3, #15
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	1e5a      	subs	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	631a      	str	r2, [r3, #48]	@ 0x30
 800267a:	e007      	b.n	800268c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 020f 	bic.w	r2, r2, #15
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002690:	f023 0303 	bic.w	r3, r3, #3
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	@ 0x54
 800269c:	e007      	b.n	80026ae <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a2:	f043 0210 	orr.w	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3724      	adds	r7, #36	@ 0x24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd90      	pop	{r4, r7, pc}
 80026b8:	20000000 	.word	0x20000000
 80026bc:	053e2d63 	.word	0x053e2d63
 80026c0:	50040000 	.word	0x50040000
 80026c4:	50040100 	.word	0x50040100
 80026c8:	50040200 	.word	0x50040200
 80026cc:	50040300 	.word	0x50040300
 80026d0:	fff0c007 	.word	0xfff0c007

080026d4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026dc:	4891      	ldr	r0, [pc, #580]	@ (8002924 <HAL_ADC_Start_IT+0x250>)
 80026de:	f7ff fddd 	bl	800229c <LL_ADC_GetMultimode>
 80026e2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fe7c 	bl	80023e6 <LL_ADC_REG_IsConversionOngoing>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f040 8110 	bne.w	8002916 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_ADC_Start_IT+0x30>
 8002700:	2302      	movs	r3, #2
 8002702:	e10b      	b.n	800291c <HAL_ADC_Start_IT+0x248>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 ff3d 	bl	800358c <ADC_Enable>
 8002712:	4603      	mov	r3, r0
 8002714:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	2b00      	cmp	r3, #0
 800271a:	f040 80f7 	bne.w	800290c <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a7c      	ldr	r2, [pc, #496]	@ (8002928 <HAL_ADC_Start_IT+0x254>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d002      	beq.n	8002742 <HAL_ADC_Start_IT+0x6e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	e000      	b.n	8002744 <HAL_ADC_Start_IT+0x70>
 8002742:	4b7a      	ldr	r3, [pc, #488]	@ (800292c <HAL_ADC_Start_IT+0x258>)
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	4293      	cmp	r3, r2
 800274a:	d002      	beq.n	8002752 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002756:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002762:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276e:	f023 0206 	bic.w	r2, r3, #6
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	659a      	str	r2, [r3, #88]	@ 0x58
 8002776:	e002      	b.n	800277e <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	221c      	movs	r2, #28
 8002784:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 021c 	bic.w	r2, r2, #28
 800279c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d108      	bne.n	80027b8 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0208 	orr.w	r2, r2, #8
 80027b4:	605a      	str	r2, [r3, #4]
          break;
 80027b6:	e008      	b.n	80027ca <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0204 	orr.w	r2, r2, #4
 80027c6:	605a      	str	r2, [r3, #4]
          break;
 80027c8:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d107      	bne.n	80027e2 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0210 	orr.w	r2, r2, #16
 80027e0:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a50      	ldr	r2, [pc, #320]	@ (8002928 <HAL_ADC_Start_IT+0x254>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d002      	beq.n	80027f2 <HAL_ADC_Start_IT+0x11e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	e000      	b.n	80027f4 <HAL_ADC_Start_IT+0x120>
 80027f2:	4b4e      	ldr	r3, [pc, #312]	@ (800292c <HAL_ADC_Start_IT+0x258>)
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d008      	beq.n	800280e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b05      	cmp	r3, #5
 8002806:	d002      	beq.n	800280e <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	2b09      	cmp	r3, #9
 800280c:	d13a      	bne.n	8002884 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d02d      	beq.n	8002878 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002820:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002824:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d110      	bne.n	8002856 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0220 	bic.w	r2, r2, #32
 8002842:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002852:	605a      	str	r2, [r3, #4]
              break;
 8002854:	e010      	b.n	8002878 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002864:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0220 	orr.w	r2, r2, #32
 8002874:	605a      	str	r2, [r3, #4]
              break;
 8002876:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fd9e 	bl	80023be <LL_ADC_REG_StartConversion>
 8002882:	e04a      	b.n	800291a <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002888:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a24      	ldr	r2, [pc, #144]	@ (8002928 <HAL_ADC_Start_IT+0x254>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d002      	beq.n	80028a0 <HAL_ADC_Start_IT+0x1cc>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e000      	b.n	80028a2 <HAL_ADC_Start_IT+0x1ce>
 80028a0:	4b22      	ldr	r3, [pc, #136]	@ (800292c <HAL_ADC_Start_IT+0x258>)
 80028a2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d034      	beq.n	800291a <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d110      	bne.n	80028ea <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0220 	bic.w	r2, r2, #32
 80028d6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028e6:	605a      	str	r2, [r3, #4]
              break;
 80028e8:	e017      	b.n	800291a <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028f8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0220 	orr.w	r2, r2, #32
 8002908:	605a      	str	r2, [r3, #4]
              break;
 800290a:	e006      	b.n	800291a <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002914:	e001      	b.n	800291a <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002916:	2302      	movs	r3, #2
 8002918:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800291a:	7dfb      	ldrb	r3, [r7, #23]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	50040300 	.word	0x50040300
 8002928:	50040100 	.word	0x50040100
 800292c:	50040000 	.word	0x50040000

08002930 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	@ 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002968:	4882      	ldr	r0, [pc, #520]	@ (8002b74 <HAL_ADC_IRQHandler+0x228>)
 800296a:	f7ff fc97 	bl	800229c <LL_ADC_GetMultimode>
 800296e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d017      	beq.n	80029aa <HAL_ADC_IRQHandler+0x5e>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d012      	beq.n	80029aa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002994:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fec9 	bl	8003734 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2202      	movs	r2, #2
 80029a8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <HAL_ADC_IRQHandler+0x72>
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8083 	beq.w	8002ad0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d07d      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d105      	bne.n	80029ec <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff fbb2 	bl	800215a <LL_ADC_REG_IsTriggerSourceSWStart>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d062      	beq.n	8002ac2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5d      	ldr	r2, [pc, #372]	@ (8002b78 <HAL_ADC_IRQHandler+0x22c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d002      	beq.n	8002a0c <HAL_ADC_IRQHandler+0xc0>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	e000      	b.n	8002a0e <HAL_ADC_IRQHandler+0xc2>
 8002a0c:	4b5b      	ldr	r3, [pc, #364]	@ (8002b7c <HAL_ADC_IRQHandler+0x230>)
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d008      	beq.n	8002a28 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d002      	beq.n	8002a28 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b09      	cmp	r3, #9
 8002a26:	d104      	bne.n	8002a32 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	623b      	str	r3, [r7, #32]
 8002a30:	e00c      	b.n	8002a4c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a50      	ldr	r2, [pc, #320]	@ (8002b78 <HAL_ADC_IRQHandler+0x22c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d002      	beq.n	8002a42 <HAL_ADC_IRQHandler+0xf6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	e000      	b.n	8002a44 <HAL_ADC_IRQHandler+0xf8>
 8002a42:	4b4e      	ldr	r3, [pc, #312]	@ (8002b7c <HAL_ADC_IRQHandler+0x230>)
 8002a44:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d135      	bne.n	8002ac2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d12e      	bne.n	8002ac2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fcbc 	bl	80023e6 <LL_ADC_REG_IsConversionOngoing>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d11a      	bne.n	8002aaa <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 020c 	bic.w	r2, r2, #12
 8002a82:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d112      	bne.n	8002ac2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa0:	f043 0201 	orr.w	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002aa8:	e00b      	b.n	8002ac2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aae:	f043 0210 	orr.w	r2, r3, #16
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fe fc3c 	bl	8001340 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	220c      	movs	r2, #12
 8002ace:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d004      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x198>
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10b      	bne.n	8002afc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 809f 	beq.w	8002c2e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8099 	beq.w	8002c2e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fb5d 	bl	80021d8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b1e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff fb18 	bl	800215a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b2a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a11      	ldr	r2, [pc, #68]	@ (8002b78 <HAL_ADC_IRQHandler+0x22c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d002      	beq.n	8002b3c <HAL_ADC_IRQHandler+0x1f0>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	e000      	b.n	8002b3e <HAL_ADC_IRQHandler+0x1f2>
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <HAL_ADC_IRQHandler+0x230>)
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d008      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d002      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b07      	cmp	r3, #7
 8002b56:	d104      	bne.n	8002b62 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	623b      	str	r3, [r7, #32]
 8002b60:	e013      	b.n	8002b8a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a04      	ldr	r2, [pc, #16]	@ (8002b78 <HAL_ADC_IRQHandler+0x22c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_ADC_IRQHandler+0x234>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	e007      	b.n	8002b82 <HAL_ADC_IRQHandler+0x236>
 8002b72:	bf00      	nop
 8002b74:	50040300 	.word	0x50040300
 8002b78:	50040100 	.word	0x50040100
 8002b7c:	50040000 	.word	0x50040000
 8002b80:	4b7d      	ldr	r3, [pc, #500]	@ (8002d78 <HAL_ADC_IRQHandler+0x42c>)
 8002b82:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d047      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_ADC_IRQHandler+0x25e>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d03f      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d13a      	bne.n	8002c20 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb4:	2b40      	cmp	r3, #64	@ 0x40
 8002bb6:	d133      	bne.n	8002c20 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d12e      	bne.n	8002c20 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fc20 	bl	800240c <LL_ADC_INJ_IsConversionOngoing>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d11a      	bne.n	8002c08 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002be0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d112      	bne.n	8002c20 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	f043 0201 	orr.w	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c06:	e00b      	b.n	8002c20 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0c:	f043 0210 	orr.w	r2, r3, #16
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fd5f 	bl	80036e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2260      	movs	r2, #96	@ 0x60
 8002c2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d011      	beq.n	8002c5c <HAL_ADC_IRQHandler+0x310>
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00c      	beq.n	8002c5c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c46:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f896 	bl	8002d80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2280      	movs	r2, #128	@ 0x80
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d012      	beq.n	8002c8c <HAL_ADC_IRQHandler+0x340>
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c74:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fd45 	bl	800370c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d012      	beq.n	8002cbc <HAL_ADC_IRQHandler+0x370>
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00d      	beq.n	8002cbc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fd37 	bl	8003720 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d036      	beq.n	8002d34 <HAL_ADC_IRQHandler+0x3e8>
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d031      	beq.n	8002d34 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cdc:	e014      	b.n	8002d08 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ce4:	4825      	ldr	r0, [pc, #148]	@ (8002d7c <HAL_ADC_IRQHandler+0x430>)
 8002ce6:	f7ff fae7 	bl	80022b8 <LL_ADC_GetMultiDMATransfer>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00b      	beq.n	8002d08 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf4:	e008      	b.n	8002d08 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002d04:	2301      	movs	r3, #1
 8002d06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d10e      	bne.n	8002d2c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d12:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1e:	f043 0202 	orr.w	r2, r3, #2
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f834 	bl	8002d94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2210      	movs	r2, #16
 8002d32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d018      	beq.n	8002d70 <HAL_ADC_IRQHandler+0x424>
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d013      	beq.n	8002d70 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d58:	f043 0208 	orr.w	r2, r3, #8
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d68:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fcc4 	bl	80036f8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d70:	bf00      	nop
 8002d72:	3728      	adds	r7, #40	@ 0x28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	50040000 	.word	0x50040000
 8002d7c:	50040300 	.word	0x50040300

08002d80 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b0b6      	sub	sp, #216	@ 0xd8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x22>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e3c9      	b.n	800355e <HAL_ADC_ConfigChannel+0x7b6>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fb05 	bl	80023e6 <LL_ADC_REG_IsConversionOngoing>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f040 83aa 	bne.w	8003538 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	d824      	bhi.n	8002e3e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	3b02      	subs	r3, #2
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d81b      	bhi.n	8002e36 <HAL_ADC_ConfigChannel+0x8e>
 8002dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002e04 <HAL_ADC_ConfigChannel+0x5c>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e15 	.word	0x08002e15
 8002e08:	08002e1d 	.word	0x08002e1d
 8002e0c:	08002e25 	.word	0x08002e25
 8002e10:	08002e2d 	.word	0x08002e2d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002e14:	230c      	movs	r3, #12
 8002e16:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e1a:	e010      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002e1c:	2312      	movs	r3, #18
 8002e1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e22:	e00c      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002e24:	2318      	movs	r3, #24
 8002e26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e2a:	e008      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002e2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e34:	e003      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002e36:	2306      	movs	r3, #6
 8002e38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e3c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002e4c:	f7ff f998 	bl	8002180 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fac6 	bl	80023e6 <LL_ADC_REG_IsConversionOngoing>
 8002e5a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fad2 	bl	800240c <LL_ADC_INJ_IsConversionOngoing>
 8002e68:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 81a4 	bne.w	80031be <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f040 819f 	bne.w	80031be <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6819      	ldr	r1, [r3, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f7ff f9b6 	bl	80021fe <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	08db      	lsrs	r3, r3, #3
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d00a      	beq.n	8002eca <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	6919      	ldr	r1, [r3, #16]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ec4:	f7ff f8f4 	bl	80020b0 <LL_ADC_SetOffset>
 8002ec8:	e179      	b.n	80031be <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff f911 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10a      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x14e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff f906 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002eec:	4603      	mov	r3, r0
 8002eee:	0e9b      	lsrs	r3, r3, #26
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	e01e      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x18c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff f8fb 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e004      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002f28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x1a4>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	0e9b      	lsrs	r3, r3, #26
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	e018      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x1d6>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002f60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002f68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e004      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002f74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d106      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2200      	movs	r2, #0
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff f8ca 	bl	8002124 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff f8ae 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x214>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff f8a3 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	f003 021f 	and.w	r2, r3, #31
 8002fba:	e01e      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x252>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff f898 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002fda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002fea:	2320      	movs	r3, #32
 8002fec:	e004      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002fee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x26a>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	e018      	b.n	8003044 <HAL_ADC_ConfigChannel+0x29c>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003026:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800302a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800302e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003036:	2320      	movs	r3, #32
 8003038:	e004      	b.n	8003044 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800303a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003044:	429a      	cmp	r2, r3
 8003046:	d106      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2200      	movs	r2, #0
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff f867 	bl	8002124 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2102      	movs	r1, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff f84b 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8003062:	4603      	mov	r3, r0
 8003064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x2da>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2102      	movs	r1, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f840 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8003078:	4603      	mov	r3, r0
 800307a:	0e9b      	lsrs	r3, r3, #26
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	e01e      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x318>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2102      	movs	r1, #2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff f835 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80030a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80030a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e004      	b.n	80030be <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80030b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d105      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x330>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	0e9b      	lsrs	r3, r3, #26
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	e014      	b.n	8003102 <HAL_ADC_ConfigChannel+0x35a>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80030e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80030ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80030f4:	2320      	movs	r3, #32
 80030f6:	e004      	b.n	8003102 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80030f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030fc:	fab3 f383 	clz	r3, r3
 8003100:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003102:	429a      	cmp	r2, r3
 8003104:	d106      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2200      	movs	r2, #0
 800310c:	2102      	movs	r1, #2
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff f808 	bl	8002124 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2103      	movs	r1, #3
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe ffec 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10a      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x398>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2103      	movs	r1, #3
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe ffe1 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	0e9b      	lsrs	r3, r3, #26
 800313a:	f003 021f 	and.w	r2, r3, #31
 800313e:	e017      	b.n	8003170 <HAL_ADC_ConfigChannel+0x3c8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2103      	movs	r1, #3
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe ffd6 	bl	80020f8 <LL_ADC_GetOffsetChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800315a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800315c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003162:	2320      	movs	r3, #32
 8003164:	e003      	b.n	800316e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003178:	2b00      	cmp	r3, #0
 800317a:	d105      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x3e0>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	0e9b      	lsrs	r3, r3, #26
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	e011      	b.n	80031ac <HAL_ADC_ConfigChannel+0x404>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003196:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003198:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800319a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e003      	b.n	80031ac <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80031a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d106      	bne.n	80031be <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2200      	movs	r2, #0
 80031b6:	2103      	movs	r1, #3
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe ffb3 	bl	8002124 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f8e8 	bl	8002398 <LL_ADC_IsEnabled>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f040 8140 	bne.w	8003450 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6819      	ldr	r1, [r3, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	461a      	mov	r2, r3
 80031de:	f7ff f839 	bl	8002254 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	4a8f      	ldr	r2, [pc, #572]	@ (8003424 <HAL_ADC_ConfigChannel+0x67c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	f040 8131 	bne.w	8003450 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10b      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x46e>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0e9b      	lsrs	r3, r3, #26
 8003204:	3301      	adds	r3, #1
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	2b09      	cmp	r3, #9
 800320c:	bf94      	ite	ls
 800320e:	2301      	movls	r3, #1
 8003210:	2300      	movhi	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	e019      	b.n	800324a <HAL_ADC_ConfigChannel+0x4a2>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003226:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003228:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800322e:	2320      	movs	r3, #32
 8003230:	e003      	b.n	800323a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3301      	adds	r3, #1
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	2b09      	cmp	r3, #9
 8003242:	bf94      	ite	ls
 8003244:	2301      	movls	r3, #1
 8003246:	2300      	movhi	r3, #0
 8003248:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800324a:	2b00      	cmp	r3, #0
 800324c:	d079      	beq.n	8003342 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003256:	2b00      	cmp	r3, #0
 8003258:	d107      	bne.n	800326a <HAL_ADC_ConfigChannel+0x4c2>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0e9b      	lsrs	r3, r3, #26
 8003260:	3301      	adds	r3, #1
 8003262:	069b      	lsls	r3, r3, #26
 8003264:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003268:	e015      	b.n	8003296 <HAL_ADC_ConfigChannel+0x4ee>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800327a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800327c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003282:	2320      	movs	r3, #32
 8003284:	e003      	b.n	800328e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	3301      	adds	r3, #1
 8003290:	069b      	lsls	r3, r3, #26
 8003292:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x50e>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	0e9b      	lsrs	r3, r3, #26
 80032a8:	3301      	adds	r3, #1
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	2101      	movs	r1, #1
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	e017      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x53e>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80032c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80032c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e003      	b.n	80032da <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80032d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d4:	fab3 f383 	clz	r3, r3
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2101      	movs	r1, #1
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	ea42 0103 	orr.w	r1, r2, r3
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <HAL_ADC_ConfigChannel+0x564>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	0e9b      	lsrs	r3, r3, #26
 80032fc:	3301      	adds	r3, #1
 80032fe:	f003 021f 	and.w	r2, r3, #31
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	051b      	lsls	r3, r3, #20
 800330a:	e018      	b.n	800333e <HAL_ADC_ConfigChannel+0x596>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003314:	fa93 f3a3 	rbit	r3, r3
 8003318:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800331a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003324:	2320      	movs	r3, #32
 8003326:	e003      	b.n	8003330 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f003 021f 	and.w	r2, r3, #31
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800333e:	430b      	orrs	r3, r1
 8003340:	e081      	b.n	8003446 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334a:	2b00      	cmp	r3, #0
 800334c:	d107      	bne.n	800335e <HAL_ADC_ConfigChannel+0x5b6>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	0e9b      	lsrs	r3, r3, #26
 8003354:	3301      	adds	r3, #1
 8003356:	069b      	lsls	r3, r3, #26
 8003358:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800335c:	e015      	b.n	800338a <HAL_ADC_ConfigChannel+0x5e2>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003376:	2320      	movs	r3, #32
 8003378:	e003      	b.n	8003382 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800337a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	b2db      	uxtb	r3, r3
 8003382:	3301      	adds	r3, #1
 8003384:	069b      	lsls	r3, r3, #26
 8003386:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x602>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	0e9b      	lsrs	r3, r3, #26
 800339c:	3301      	adds	r3, #1
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2101      	movs	r1, #1
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	e017      	b.n	80033da <HAL_ADC_ConfigChannel+0x632>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	61bb      	str	r3, [r7, #24]
  return result;
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80033c2:	2320      	movs	r3, #32
 80033c4:	e003      	b.n	80033ce <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	3301      	adds	r3, #1
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	ea42 0103 	orr.w	r1, r2, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10d      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x65e>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	0e9b      	lsrs	r3, r3, #26
 80033f0:	3301      	adds	r3, #1
 80033f2:	f003 021f 	and.w	r2, r3, #31
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	3b1e      	subs	r3, #30
 80033fe:	051b      	lsls	r3, r3, #20
 8003400:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003404:	e01e      	b.n	8003444 <HAL_ADC_ConfigChannel+0x69c>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	60fb      	str	r3, [r7, #12]
  return result;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800341e:	2320      	movs	r3, #32
 8003420:	e006      	b.n	8003430 <HAL_ADC_ConfigChannel+0x688>
 8003422:	bf00      	nop
 8003424:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	3301      	adds	r3, #1
 8003432:	f003 021f 	and.w	r2, r3, #31
 8003436:	4613      	mov	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	3b1e      	subs	r3, #30
 800343e:	051b      	lsls	r3, r3, #20
 8003440:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003444:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800344a:	4619      	mov	r1, r3
 800344c:	f7fe fed7 	bl	80021fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b44      	ldr	r3, [pc, #272]	@ (8003568 <HAL_ADC_ConfigChannel+0x7c0>)
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d07a      	beq.n	8003552 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800345c:	4843      	ldr	r0, [pc, #268]	@ (800356c <HAL_ADC_ConfigChannel+0x7c4>)
 800345e:	f7fe fe19 	bl	8002094 <LL_ADC_GetCommonPathInternalCh>
 8003462:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a41      	ldr	r2, [pc, #260]	@ (8003570 <HAL_ADC_ConfigChannel+0x7c8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d12c      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003470:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003474:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d126      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a3c      	ldr	r2, [pc, #240]	@ (8003574 <HAL_ADC_ConfigChannel+0x7cc>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <HAL_ADC_ConfigChannel+0x6e8>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a3b      	ldr	r2, [pc, #236]	@ (8003578 <HAL_ADC_ConfigChannel+0x7d0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d15d      	bne.n	800354c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003490:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003494:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003498:	4619      	mov	r1, r3
 800349a:	4834      	ldr	r0, [pc, #208]	@ (800356c <HAL_ADC_ConfigChannel+0x7c4>)
 800349c:	f7fe fde7 	bl	800206e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034a0:	4b36      	ldr	r3, [pc, #216]	@ (800357c <HAL_ADC_ConfigChannel+0x7d4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	099b      	lsrs	r3, r3, #6
 80034a6:	4a36      	ldr	r2, [pc, #216]	@ (8003580 <HAL_ADC_ConfigChannel+0x7d8>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	4613      	mov	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034ba:	e002      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	3b01      	subs	r3, #1
 80034c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f9      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034c8:	e040      	b.n	800354c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003584 <HAL_ADC_ConfigChannel+0x7dc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d118      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d112      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a23      	ldr	r2, [pc, #140]	@ (8003574 <HAL_ADC_ConfigChannel+0x7cc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_ADC_ConfigChannel+0x74c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a22      	ldr	r2, [pc, #136]	@ (8003578 <HAL_ADC_ConfigChannel+0x7d0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d12d      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034fc:	4619      	mov	r1, r3
 80034fe:	481b      	ldr	r0, [pc, #108]	@ (800356c <HAL_ADC_ConfigChannel+0x7c4>)
 8003500:	f7fe fdb5 	bl	800206e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003504:	e024      	b.n	8003550 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1f      	ldr	r2, [pc, #124]	@ (8003588 <HAL_ADC_ConfigChannel+0x7e0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d120      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d11a      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a14      	ldr	r2, [pc, #80]	@ (8003574 <HAL_ADC_ConfigChannel+0x7cc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d115      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800352a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800352e:	4619      	mov	r1, r3
 8003530:	480e      	ldr	r0, [pc, #56]	@ (800356c <HAL_ADC_ConfigChannel+0x7c4>)
 8003532:	f7fe fd9c 	bl	800206e <LL_ADC_SetCommonPathInternalCh>
 8003536:	e00c      	b.n	8003552 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800354a:	e002      	b.n	8003552 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003550:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800355a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800355e:	4618      	mov	r0, r3
 8003560:	37d8      	adds	r7, #216	@ 0xd8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	80080000 	.word	0x80080000
 800356c:	50040300 	.word	0x50040300
 8003570:	c7520000 	.word	0xc7520000
 8003574:	50040000 	.word	0x50040000
 8003578:	50040200 	.word	0x50040200
 800357c:	20000000 	.word	0x20000000
 8003580:	053e2d63 	.word	0x053e2d63
 8003584:	cb840000 	.word	0xcb840000
 8003588:	80000001 	.word	0x80000001

0800358c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003594:	2300      	movs	r3, #0
 8003596:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fe fefb 	bl	8002398 <LL_ADC_IsEnabled>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d169      	bne.n	800367c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	4b36      	ldr	r3, [pc, #216]	@ (8003688 <ADC_Enable+0xfc>)
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	f043 0210 	orr.w	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	f043 0201 	orr.w	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e055      	b.n	800367e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe feca 	bl	8002370 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035dc:	482b      	ldr	r0, [pc, #172]	@ (800368c <ADC_Enable+0x100>)
 80035de:	f7fe fd59 	bl	8002094 <LL_ADC_GetCommonPathInternalCh>
 80035e2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ec:	4b28      	ldr	r3, [pc, #160]	@ (8003690 <ADC_Enable+0x104>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	099b      	lsrs	r3, r3, #6
 80035f2:	4a28      	ldr	r2, [pc, #160]	@ (8003694 <ADC_Enable+0x108>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	099b      	lsrs	r3, r3, #6
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	4613      	mov	r3, r2
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003606:	e002      	b.n	800360e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	3b01      	subs	r3, #1
 800360c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f9      	bne.n	8003608 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003614:	f7fe fce8 	bl	8001fe8 <HAL_GetTick>
 8003618:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800361a:	e028      	b.n	800366e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f7fe feb9 	bl	8002398 <LL_ADC_IsEnabled>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d104      	bne.n	8003636 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe fe9d 	bl	8002370 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003636:	f7fe fcd7 	bl	8001fe8 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d914      	bls.n	800366e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d00d      	beq.n	800366e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003656:	f043 0210 	orr.w	r2, r3, #16
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003662:	f043 0201 	orr.w	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e007      	b.n	800367e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b01      	cmp	r3, #1
 800367a:	d1cf      	bne.n	800361c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	8000003f 	.word	0x8000003f
 800368c:	50040300 	.word	0x50040300
 8003690:	20000000 	.word	0x20000000
 8003694:	053e2d63 	.word	0x053e2d63

08003698 <LL_ADC_IsEnabled>:
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <LL_ADC_IsEnabled+0x18>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <LL_ADC_IsEnabled+0x1a>
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <LL_ADC_REG_IsConversionOngoing>:
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d101      	bne.n	80036d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b09f      	sub	sp, #124	@ 0x7c
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003762:	2302      	movs	r3, #2
 8003764:	e093      	b.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800376e:	2300      	movs	r3, #0
 8003770:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003772:	2300      	movs	r3, #0
 8003774:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a47      	ldr	r2, [pc, #284]	@ (8003898 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d102      	bne.n	8003786 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003780:	4b46      	ldr	r3, [pc, #280]	@ (800389c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	e001      	b.n	800378a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e072      	b.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff ff87 	bl	80036be <LL_ADC_REG_IsConversionOngoing>
 80037b0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff ff81 	bl	80036be <LL_ADC_REG_IsConversionOngoing>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d154      	bne.n	800386c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80037c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d151      	bne.n	800386c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037c8:	4b35      	ldr	r3, [pc, #212]	@ (80038a0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80037ca:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d02c      	beq.n	800382e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037e6:	035b      	lsls	r3, r3, #13
 80037e8:	430b      	orrs	r3, r1
 80037ea:	431a      	orrs	r2, r3
 80037ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037f0:	4829      	ldr	r0, [pc, #164]	@ (8003898 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037f2:	f7ff ff51 	bl	8003698 <LL_ADC_IsEnabled>
 80037f6:	4604      	mov	r4, r0
 80037f8:	4828      	ldr	r0, [pc, #160]	@ (800389c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037fa:	f7ff ff4d 	bl	8003698 <LL_ADC_IsEnabled>
 80037fe:	4603      	mov	r3, r0
 8003800:	431c      	orrs	r4, r3
 8003802:	4828      	ldr	r0, [pc, #160]	@ (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003804:	f7ff ff48 	bl	8003698 <LL_ADC_IsEnabled>
 8003808:	4603      	mov	r3, r0
 800380a:	4323      	orrs	r3, r4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d137      	bne.n	8003880 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003810:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003818:	f023 030f 	bic.w	r3, r3, #15
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	6811      	ldr	r1, [r2, #0]
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	6892      	ldr	r2, [r2, #8]
 8003824:	430a      	orrs	r2, r1
 8003826:	431a      	orrs	r2, r3
 8003828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800382a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800382c:	e028      	b.n	8003880 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800382e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003838:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800383a:	4817      	ldr	r0, [pc, #92]	@ (8003898 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800383c:	f7ff ff2c 	bl	8003698 <LL_ADC_IsEnabled>
 8003840:	4604      	mov	r4, r0
 8003842:	4816      	ldr	r0, [pc, #88]	@ (800389c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003844:	f7ff ff28 	bl	8003698 <LL_ADC_IsEnabled>
 8003848:	4603      	mov	r3, r0
 800384a:	431c      	orrs	r4, r3
 800384c:	4815      	ldr	r0, [pc, #84]	@ (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800384e:	f7ff ff23 	bl	8003698 <LL_ADC_IsEnabled>
 8003852:	4603      	mov	r3, r0
 8003854:	4323      	orrs	r3, r4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d112      	bne.n	8003880 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800385a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003862:	f023 030f 	bic.w	r3, r3, #15
 8003866:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003868:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800386a:	e009      	b.n	8003880 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800387e:	e000      	b.n	8003882 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003880:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800388a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800388e:	4618      	mov	r0, r3
 8003890:	377c      	adds	r7, #124	@ 0x7c
 8003892:	46bd      	mov	sp, r7
 8003894:	bd90      	pop	{r4, r7, pc}
 8003896:	bf00      	nop
 8003898:	50040000 	.word	0x50040000
 800389c:	50040100 	.word	0x50040100
 80038a0:	50040300 	.word	0x50040300
 80038a4:	50040200 	.word	0x50040200

080038a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0307 	and.w	r3, r3, #7
 80038b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b8:	4b0c      	ldr	r3, [pc, #48]	@ (80038ec <__NVIC_SetPriorityGrouping+0x44>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038c4:	4013      	ands	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038da:	4a04      	ldr	r2, [pc, #16]	@ (80038ec <__NVIC_SetPriorityGrouping+0x44>)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	60d3      	str	r3, [r2, #12]
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038f4:	4b04      	ldr	r3, [pc, #16]	@ (8003908 <__NVIC_GetPriorityGrouping+0x18>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	0a1b      	lsrs	r3, r3, #8
 80038fa:	f003 0307 	and.w	r3, r3, #7
}
 80038fe:	4618      	mov	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	2b00      	cmp	r3, #0
 800391c:	db0b      	blt.n	8003936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	f003 021f 	and.w	r2, r3, #31
 8003924:	4907      	ldr	r1, [pc, #28]	@ (8003944 <__NVIC_EnableIRQ+0x38>)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	2001      	movs	r0, #1
 800392e:	fa00 f202 	lsl.w	r2, r0, r2
 8003932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	e000e100 	.word	0xe000e100

08003948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	6039      	str	r1, [r7, #0]
 8003952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	2b00      	cmp	r3, #0
 800395a:	db0a      	blt.n	8003972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	490c      	ldr	r1, [pc, #48]	@ (8003994 <__NVIC_SetPriority+0x4c>)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	0112      	lsls	r2, r2, #4
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	440b      	add	r3, r1
 800396c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003970:	e00a      	b.n	8003988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	b2da      	uxtb	r2, r3
 8003976:	4908      	ldr	r1, [pc, #32]	@ (8003998 <__NVIC_SetPriority+0x50>)
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	3b04      	subs	r3, #4
 8003980:	0112      	lsls	r2, r2, #4
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	440b      	add	r3, r1
 8003986:	761a      	strb	r2, [r3, #24]
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000e100 	.word	0xe000e100
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800399c:	b480      	push	{r7}
 800399e:	b089      	sub	sp, #36	@ 0x24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f1c3 0307 	rsb	r3, r3, #7
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	bf28      	it	cs
 80039ba:	2304      	movcs	r3, #4
 80039bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	3304      	adds	r3, #4
 80039c2:	2b06      	cmp	r3, #6
 80039c4:	d902      	bls.n	80039cc <NVIC_EncodePriority+0x30>
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3b03      	subs	r3, #3
 80039ca:	e000      	b.n	80039ce <NVIC_EncodePriority+0x32>
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d0:	f04f 32ff 	mov.w	r2, #4294967295
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43da      	mvns	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	401a      	ands	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e4:	f04f 31ff 	mov.w	r1, #4294967295
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	fa01 f303 	lsl.w	r3, r1, r3
 80039ee:	43d9      	mvns	r1, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f4:	4313      	orrs	r3, r2
         );
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3724      	adds	r7, #36	@ 0x24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a14:	d301      	bcc.n	8003a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a16:	2301      	movs	r3, #1
 8003a18:	e00f      	b.n	8003a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a44 <SysTick_Config+0x40>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a22:	210f      	movs	r1, #15
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	f7ff ff8e 	bl	8003948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a2c:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <SysTick_Config+0x40>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a32:	4b04      	ldr	r3, [pc, #16]	@ (8003a44 <SysTick_Config+0x40>)
 8003a34:	2207      	movs	r2, #7
 8003a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	e000e010 	.word	0xe000e010

08003a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff29 	bl	80038a8 <__NVIC_SetPriorityGrouping>
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b086      	sub	sp, #24
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a70:	f7ff ff3e 	bl	80038f0 <__NVIC_GetPriorityGrouping>
 8003a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	6978      	ldr	r0, [r7, #20]
 8003a7c:	f7ff ff8e 	bl	800399c <NVIC_EncodePriority>
 8003a80:	4602      	mov	r2, r0
 8003a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff ff5d 	bl	8003948 <__NVIC_SetPriority>
}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff31 	bl	800390c <__NVIC_EnableIRQ>
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff ffa2 	bl	8003a04 <SysTick_Config>
 8003ac0:	4603      	mov	r3, r0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d008      	beq.n	8003af4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e022      	b.n	8003b3a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 020e 	bic.w	r2, r2, #14
 8003b02:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b18:	f003 021c 	and.w	r2, r3, #28
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	2101      	movs	r1, #1
 8003b22:	fa01 f202 	lsl.w	r2, r1, r2
 8003b26:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d005      	beq.n	8003b6a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2204      	movs	r2, #4
 8003b62:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	e029      	b.n	8003bbe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 020e 	bic.w	r2, r2, #14
 8003b78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0201 	bic.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8e:	f003 021c 	and.w	r2, r3, #28
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b96:	2101      	movs	r1, #1
 8003b98:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
    }
  }
  return status;
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bd6:	e17f      	b.n	8003ed8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	2101      	movs	r1, #1
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	4013      	ands	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8171 	beq.w	8003ed2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d005      	beq.n	8003c08 <HAL_GPIO_Init+0x40>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d130      	bne.n	8003c6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c3e:	2201      	movs	r2, #1
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f003 0201 	and.w	r2, r3, #1
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d118      	bne.n	8003ca8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	43db      	mvns	r3, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	08db      	lsrs	r3, r3, #3
 8003c92:	f003 0201 	and.w	r2, r3, #1
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d017      	beq.n	8003ce4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d123      	bne.n	8003d38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	08da      	lsrs	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3208      	adds	r2, #8
 8003cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	220f      	movs	r2, #15
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	08da      	lsrs	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3208      	adds	r2, #8
 8003d32:	6939      	ldr	r1, [r7, #16]
 8003d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2203      	movs	r2, #3
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0203 	and.w	r2, r3, #3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80ac 	beq.w	8003ed2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ef8 <HAL_GPIO_Init+0x330>)
 8003d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ef8 <HAL_GPIO_Init+0x330>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d86:	4b5c      	ldr	r3, [pc, #368]	@ (8003ef8 <HAL_GPIO_Init+0x330>)
 8003d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d92:	4a5a      	ldr	r2, [pc, #360]	@ (8003efc <HAL_GPIO_Init+0x334>)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	3302      	adds	r3, #2
 8003d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	220f      	movs	r2, #15
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43db      	mvns	r3, r3
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4013      	ands	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003dbc:	d025      	beq.n	8003e0a <HAL_GPIO_Init+0x242>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8003f00 <HAL_GPIO_Init+0x338>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01f      	beq.n	8003e06 <HAL_GPIO_Init+0x23e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8003f04 <HAL_GPIO_Init+0x33c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d019      	beq.n	8003e02 <HAL_GPIO_Init+0x23a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8003f08 <HAL_GPIO_Init+0x340>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <HAL_GPIO_Init+0x236>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8003f0c <HAL_GPIO_Init+0x344>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00d      	beq.n	8003dfa <HAL_GPIO_Init+0x232>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a4b      	ldr	r2, [pc, #300]	@ (8003f10 <HAL_GPIO_Init+0x348>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d007      	beq.n	8003df6 <HAL_GPIO_Init+0x22e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a4a      	ldr	r2, [pc, #296]	@ (8003f14 <HAL_GPIO_Init+0x34c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d101      	bne.n	8003df2 <HAL_GPIO_Init+0x22a>
 8003dee:	2306      	movs	r3, #6
 8003df0:	e00c      	b.n	8003e0c <HAL_GPIO_Init+0x244>
 8003df2:	2307      	movs	r3, #7
 8003df4:	e00a      	b.n	8003e0c <HAL_GPIO_Init+0x244>
 8003df6:	2305      	movs	r3, #5
 8003df8:	e008      	b.n	8003e0c <HAL_GPIO_Init+0x244>
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	e006      	b.n	8003e0c <HAL_GPIO_Init+0x244>
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e004      	b.n	8003e0c <HAL_GPIO_Init+0x244>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e002      	b.n	8003e0c <HAL_GPIO_Init+0x244>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_GPIO_Init+0x244>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	f002 0203 	and.w	r2, r2, #3
 8003e12:	0092      	lsls	r2, r2, #2
 8003e14:	4093      	lsls	r3, r2
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e1c:	4937      	ldr	r1, [pc, #220]	@ (8003efc <HAL_GPIO_Init+0x334>)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	3302      	adds	r3, #2
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f18 <HAL_GPIO_Init+0x350>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4013      	ands	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e4e:	4a32      	ldr	r2, [pc, #200]	@ (8003f18 <HAL_GPIO_Init+0x350>)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e54:	4b30      	ldr	r3, [pc, #192]	@ (8003f18 <HAL_GPIO_Init+0x350>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e78:	4a27      	ldr	r2, [pc, #156]	@ (8003f18 <HAL_GPIO_Init+0x350>)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e7e:	4b26      	ldr	r3, [pc, #152]	@ (8003f18 <HAL_GPIO_Init+0x350>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f18 <HAL_GPIO_Init+0x350>)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f18 <HAL_GPIO_Init+0x350>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ecc:	4a12      	ldr	r2, [pc, #72]	@ (8003f18 <HAL_GPIO_Init+0x350>)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f47f ae78 	bne.w	8003bd8 <HAL_GPIO_Init+0x10>
  }
}
 8003ee8:	bf00      	nop
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40010000 	.word	0x40010000
 8003f00:	48000400 	.word	0x48000400
 8003f04:	48000800 	.word	0x48000800
 8003f08:	48000c00 	.word	0x48000c00
 8003f0c:	48001000 	.word	0x48001000
 8003f10:	48001400 	.word	0x48001400
 8003f14:	48001800 	.word	0x48001800
 8003f18:	40010400 	.word	0x40010400

08003f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f2c:	787b      	ldrb	r3, [r7, #1]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f32:	887a      	ldrh	r2, [r7, #2]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f38:	e002      	b.n	8003f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f5e:	887a      	ldrh	r2, [r7, #2]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4013      	ands	r3, r2
 8003f64:	041a      	lsls	r2, r3, #16
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	43d9      	mvns	r1, r3
 8003f6a:	887b      	ldrh	r3, [r7, #2]
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	619a      	str	r2, [r3, #24]
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f8a:	4b08      	ldr	r3, [pc, #32]	@ (8003fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d006      	beq.n	8003fa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f96:	4a05      	ldr	r2, [pc, #20]	@ (8003fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd f9b0 	bl	8001304 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40010400 	.word	0x40010400

08003fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e08d      	b.n	80040de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fd f862 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2224      	movs	r2, #36	@ 0x24
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004000:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004010:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	e006      	b.n	8004038 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004036:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d108      	bne.n	8004052 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800404e:	605a      	str	r2, [r3, #4]
 8004050:	e007      	b.n	8004062 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004060:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004070:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004074:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004084:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69d9      	ldr	r1, [r3, #28]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	4608      	mov	r0, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	4603      	mov	r3, r0
 80040f8:	817b      	strh	r3, [r7, #10]
 80040fa:	460b      	mov	r3, r1
 80040fc:	813b      	strh	r3, [r7, #8]
 80040fe:	4613      	mov	r3, r2
 8004100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b20      	cmp	r3, #32
 800410c:	f040 80f9 	bne.w	8004302 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_I2C_Mem_Write+0x34>
 8004116:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004122:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0ed      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_I2C_Mem_Write+0x4e>
 8004132:	2302      	movs	r3, #2
 8004134:	e0e6      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800413e:	f7fd ff53 	bl	8001fe8 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2319      	movs	r3, #25
 800414a:	2201      	movs	r2, #1
 800414c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f955 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0d1      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2221      	movs	r2, #33	@ 0x21
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2240      	movs	r2, #64	@ 0x40
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004180:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004188:	88f8      	ldrh	r0, [r7, #6]
 800418a:	893a      	ldrh	r2, [r7, #8]
 800418c:	8979      	ldrh	r1, [r7, #10]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	4603      	mov	r3, r0
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f8b9 	bl	8004310 <I2C_RequestMemoryWrite>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0a9      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2bff      	cmp	r3, #255	@ 0xff
 80041b8:	d90e      	bls.n	80041d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	22ff      	movs	r2, #255	@ 0xff
 80041be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	8979      	ldrh	r1, [r7, #10]
 80041c8:	2300      	movs	r3, #0
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fad9 	bl	8004788 <I2C_TransferConfig>
 80041d6:	e00f      	b.n	80041f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	8979      	ldrh	r1, [r7, #10]
 80041ea:	2300      	movs	r3, #0
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fac8 	bl	8004788 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f958 	bl	80044b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e07b      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d034      	beq.n	80042b0 <HAL_I2C_Mem_Write+0x1c8>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d130      	bne.n	80042b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	@ 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f8d1 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e04d      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	2bff      	cmp	r3, #255	@ 0xff
 8004270:	d90e      	bls.n	8004290 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	22ff      	movs	r2, #255	@ 0xff
 8004276:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427c:	b2da      	uxtb	r2, r3
 800427e:	8979      	ldrh	r1, [r7, #10]
 8004280:	2300      	movs	r3, #0
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 fa7d 	bl	8004788 <I2C_TransferConfig>
 800428e:	e00f      	b.n	80042b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	8979      	ldrh	r1, [r7, #10]
 80042a2:	2300      	movs	r3, #0
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 fa6c 	bl	8004788 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d19e      	bne.n	80041f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f93e 	bl	8004540 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e01a      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2220      	movs	r2, #32
 80042d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b0a      	ldr	r3, [pc, #40]	@ (800430c <HAL_I2C_Mem_Write+0x224>)
 80042e2:	400b      	ands	r3, r1
 80042e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	fe00e800 	.word	0xfe00e800

08004310 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4603      	mov	r3, r0
 8004320:	817b      	strh	r3, [r7, #10]
 8004322:	460b      	mov	r3, r1
 8004324:	813b      	strh	r3, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	8979      	ldrh	r1, [r7, #10]
 8004330:	4b20      	ldr	r3, [pc, #128]	@ (80043b4 <I2C_RequestMemoryWrite+0xa4>)
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fa25 	bl	8004788 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	69b9      	ldr	r1, [r7, #24]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f8b5 	bl	80044b2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e02c      	b.n	80043ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d105      	bne.n	8004364 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004358:	893b      	ldrh	r3, [r7, #8]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	629a      	str	r2, [r3, #40]	@ 0x28
 8004362:	e015      	b.n	8004390 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004364:	893b      	ldrh	r3, [r7, #8]
 8004366:	0a1b      	lsrs	r3, r3, #8
 8004368:	b29b      	uxth	r3, r3
 800436a:	b2da      	uxtb	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004372:	69fa      	ldr	r2, [r7, #28]
 8004374:	69b9      	ldr	r1, [r7, #24]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f89b 	bl	80044b2 <I2C_WaitOnTXISFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e012      	b.n	80043ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004386:	893b      	ldrh	r3, [r7, #8]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	2200      	movs	r2, #0
 8004398:	2180      	movs	r1, #128	@ 0x80
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f830 	bl	8004400 <I2C_WaitOnFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	80002000 	.word	0x80002000

080043b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d103      	bne.n	80043d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2200      	movs	r2, #0
 80043d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d007      	beq.n	80043f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	619a      	str	r2, [r3, #24]
  }
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004410:	e03b      	b.n	800448a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	6839      	ldr	r1, [r7, #0]
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f8d6 	bl	80045c8 <I2C_IsErrorOccurred>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e041      	b.n	80044aa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442c:	d02d      	beq.n	800448a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442e:	f7fd fddb 	bl	8001fe8 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <I2C_WaitOnFlagUntilTimeout+0x44>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d122      	bne.n	800448a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699a      	ldr	r2, [r3, #24]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4013      	ands	r3, r2
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	429a      	cmp	r2, r3
 8004452:	bf0c      	ite	eq
 8004454:	2301      	moveq	r3, #1
 8004456:	2300      	movne	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	429a      	cmp	r2, r3
 8004460:	d113      	bne.n	800448a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e00f      	b.n	80044aa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699a      	ldr	r2, [r3, #24]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4013      	ands	r3, r2
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	429a      	cmp	r2, r3
 8004498:	bf0c      	ite	eq
 800449a:	2301      	moveq	r3, #1
 800449c:	2300      	movne	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d0b4      	beq.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b084      	sub	sp, #16
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044be:	e033      	b.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f87f 	bl	80045c8 <I2C_IsErrorOccurred>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e031      	b.n	8004538 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d025      	beq.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044dc:	f7fd fd84 	bl	8001fe8 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d302      	bcc.n	80044f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d11a      	bne.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d013      	beq.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e007      	b.n	8004538 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b02      	cmp	r3, #2
 8004534:	d1c4      	bne.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800454c:	e02f      	b.n	80045ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f838 	bl	80045c8 <I2C_IsErrorOccurred>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e02d      	b.n	80045be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004562:	f7fd fd41 	bl	8001fe8 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	429a      	cmp	r2, r3
 8004570:	d302      	bcc.n	8004578 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d11a      	bne.n	80045ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b20      	cmp	r3, #32
 8004584:	d013      	beq.n	80045ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	f043 0220 	orr.w	r2, r3, #32
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e007      	b.n	80045be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d1c8      	bne.n	800454e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	@ 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d068      	beq.n	80046c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2210      	movs	r2, #16
 80045fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045fc:	e049      	b.n	8004692 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d045      	beq.n	8004692 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004606:	f7fd fcef 	bl	8001fe8 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	d302      	bcc.n	800461c <I2C_IsErrorOccurred+0x54>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d13a      	bne.n	8004692 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004626:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800462e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800463a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800463e:	d121      	bne.n	8004684 <I2C_IsErrorOccurred+0xbc>
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004646:	d01d      	beq.n	8004684 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	2b20      	cmp	r3, #32
 800464c:	d01a      	beq.n	8004684 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800465c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800465e:	f7fd fcc3 	bl	8001fe8 <HAL_GetTick>
 8004662:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004664:	e00e      	b.n	8004684 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004666:	f7fd fcbf 	bl	8001fe8 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b19      	cmp	r3, #25
 8004672:	d907      	bls.n	8004684 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	f043 0320 	orr.w	r3, r3, #32
 800467a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004682:	e006      	b.n	8004692 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b20      	cmp	r3, #32
 8004690:	d1e9      	bne.n	8004666 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b20      	cmp	r3, #32
 800469e:	d003      	beq.n	80046a8 <I2C_IsErrorOccurred+0xe0>
 80046a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0aa      	beq.n	80045fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80046a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d103      	bne.n	80046b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2220      	movs	r2, #32
 80046b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	f043 0304 	orr.w	r3, r3, #4
 80046be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00b      	beq.n	80046f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	f043 0308 	orr.w	r3, r3, #8
 8004700:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800470a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	f043 0302 	orr.w	r3, r3, #2
 8004722:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800472c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01c      	beq.n	8004776 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7ff fe3b 	bl	80043b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6859      	ldr	r1, [r3, #4]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <I2C_IsErrorOccurred+0x1bc>)
 800474e:	400b      	ands	r3, r1
 8004750:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	431a      	orrs	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004776:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800477a:	4618      	mov	r0, r3
 800477c:	3728      	adds	r7, #40	@ 0x28
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	fe00e800 	.word	0xfe00e800

08004788 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	460b      	mov	r3, r1
 8004794:	817b      	strh	r3, [r7, #10]
 8004796:	4613      	mov	r3, r2
 8004798:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800479a:	897b      	ldrh	r3, [r7, #10]
 800479c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047a0:	7a7b      	ldrb	r3, [r7, #9]
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	0d5b      	lsrs	r3, r3, #21
 80047c2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80047c6:	4b08      	ldr	r3, [pc, #32]	@ (80047e8 <I2C_TransferConfig+0x60>)
 80047c8:	430b      	orrs	r3, r1
 80047ca:	43db      	mvns	r3, r3
 80047cc:	ea02 0103 	and.w	r1, r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	03ff63ff 	.word	0x03ff63ff

080047ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d138      	bne.n	8004874 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800480c:	2302      	movs	r3, #2
 800480e:	e032      	b.n	8004876 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2224      	movs	r2, #36	@ 0x24
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800483e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004882:	b480      	push	{r7}
 8004884:	b085      	sub	sp, #20
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b20      	cmp	r3, #32
 8004896:	d139      	bne.n	800490c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e033      	b.n	800490e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2224      	movs	r2, #36	@ 0x24
 80048b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80048d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e000      	b.n	800490e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004920:	4b04      	ldr	r3, [pc, #16]	@ (8004934 <HAL_PWREx_GetVoltageRange+0x18>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004928:	4618      	mov	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40007000 	.word	0x40007000

08004938 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004946:	d130      	bne.n	80049aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004948:	4b23      	ldr	r3, [pc, #140]	@ (80049d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004954:	d038      	beq.n	80049c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004956:	4b20      	ldr	r3, [pc, #128]	@ (80049d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800495e:	4a1e      	ldr	r2, [pc, #120]	@ (80049d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004960:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004964:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004966:	4b1d      	ldr	r3, [pc, #116]	@ (80049dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2232      	movs	r2, #50	@ 0x32
 800496c:	fb02 f303 	mul.w	r3, r2, r3
 8004970:	4a1b      	ldr	r2, [pc, #108]	@ (80049e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	0c9b      	lsrs	r3, r3, #18
 8004978:	3301      	adds	r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800497c:	e002      	b.n	8004984 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3b01      	subs	r3, #1
 8004982:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004984:	4b14      	ldr	r3, [pc, #80]	@ (80049d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004990:	d102      	bne.n	8004998 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f2      	bne.n	800497e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004998:	4b0f      	ldr	r3, [pc, #60]	@ (80049d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a4:	d110      	bne.n	80049c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e00f      	b.n	80049ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80049aa:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80049b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049b6:	d007      	beq.n	80049c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049b8:	4b07      	ldr	r3, [pc, #28]	@ (80049d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80049c0:	4a05      	ldr	r2, [pc, #20]	@ (80049d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40007000 	.word	0x40007000
 80049dc:	20000000 	.word	0x20000000
 80049e0:	431bde83 	.word	0x431bde83

080049e4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e3ca      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049f6:	4b97      	ldr	r3, [pc, #604]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 030c 	and.w	r3, r3, #12
 80049fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a00:	4b94      	ldr	r3, [pc, #592]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0310 	and.w	r3, r3, #16
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80e4 	beq.w	8004be0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <HAL_RCC_OscConfig+0x4a>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b0c      	cmp	r3, #12
 8004a22:	f040 808b 	bne.w	8004b3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	f040 8087 	bne.w	8004b3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a2e:	4b89      	ldr	r3, [pc, #548]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_RCC_OscConfig+0x62>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e3a2      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1a      	ldr	r2, [r3, #32]
 8004a4a:	4b82      	ldr	r3, [pc, #520]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <HAL_RCC_OscConfig+0x7c>
 8004a56:	4b7f      	ldr	r3, [pc, #508]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a5e:	e005      	b.n	8004a6c <HAL_RCC_OscConfig+0x88>
 8004a60:	4b7c      	ldr	r3, [pc, #496]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a66:	091b      	lsrs	r3, r3, #4
 8004a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d223      	bcs.n	8004ab8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fd55 	bl	8005524 <RCC_SetFlashLatencyFromMSIRange>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e383      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a84:	4b73      	ldr	r3, [pc, #460]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a72      	ldr	r2, [pc, #456]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004a8a:	f043 0308 	orr.w	r3, r3, #8
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b70      	ldr	r3, [pc, #448]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	496d      	ldr	r1, [pc, #436]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aa2:	4b6c      	ldr	r3, [pc, #432]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	021b      	lsls	r3, r3, #8
 8004ab0:	4968      	ldr	r1, [pc, #416]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
 8004ab6:	e025      	b.n	8004b04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ab8:	4b66      	ldr	r3, [pc, #408]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a65      	ldr	r2, [pc, #404]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004abe:	f043 0308 	orr.w	r3, r3, #8
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	4b63      	ldr	r3, [pc, #396]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	4960      	ldr	r1, [pc, #384]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	495b      	ldr	r1, [pc, #364]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fd15 	bl	8005524 <RCC_SetFlashLatencyFromMSIRange>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e343      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b04:	f000 fc4a 	bl	800539c <HAL_RCC_GetSysClockFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b52      	ldr	r3, [pc, #328]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	4950      	ldr	r1, [pc, #320]	@ (8004c58 <HAL_RCC_OscConfig+0x274>)
 8004b16:	5ccb      	ldrb	r3, [r1, r3]
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b20:	4a4e      	ldr	r2, [pc, #312]	@ (8004c5c <HAL_RCC_OscConfig+0x278>)
 8004b22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b24:	4b4e      	ldr	r3, [pc, #312]	@ (8004c60 <HAL_RCC_OscConfig+0x27c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fd fa0d 	bl	8001f48 <HAL_InitTick>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d052      	beq.n	8004bde <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
 8004b3a:	e327      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d032      	beq.n	8004baa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b44:	4b43      	ldr	r3, [pc, #268]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a42      	ldr	r2, [pc, #264]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b50:	f7fd fa4a 	bl	8001fe8 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b58:	f7fd fa46 	bl	8001fe8 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e310      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b6a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b76:	4b37      	ldr	r3, [pc, #220]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a36      	ldr	r2, [pc, #216]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004b7c:	f043 0308 	orr.w	r3, r3, #8
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	4b34      	ldr	r3, [pc, #208]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	4931      	ldr	r1, [pc, #196]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b94:	4b2f      	ldr	r3, [pc, #188]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	492c      	ldr	r1, [pc, #176]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	604b      	str	r3, [r1, #4]
 8004ba8:	e01a      	b.n	8004be0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004baa:	4b2a      	ldr	r3, [pc, #168]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a29      	ldr	r2, [pc, #164]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bb6:	f7fd fa17 	bl	8001fe8 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bbe:	f7fd fa13 	bl	8001fe8 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e2dd      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bd0:	4b20      	ldr	r3, [pc, #128]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f0      	bne.n	8004bbe <HAL_RCC_OscConfig+0x1da>
 8004bdc:	e000      	b.n	8004be0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bde:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d074      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d005      	beq.n	8004bfe <HAL_RCC_OscConfig+0x21a>
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b0c      	cmp	r3, #12
 8004bf6:	d10e      	bne.n	8004c16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d10b      	bne.n	8004c16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bfe:	4b15      	ldr	r3, [pc, #84]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d064      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x2f0>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d160      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e2ba      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c1e:	d106      	bne.n	8004c2e <HAL_RCC_OscConfig+0x24a>
 8004c20:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a0b      	ldr	r2, [pc, #44]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	e026      	b.n	8004c7c <HAL_RCC_OscConfig+0x298>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c36:	d115      	bne.n	8004c64 <HAL_RCC_OscConfig+0x280>
 8004c38:	4b06      	ldr	r3, [pc, #24]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a05      	ldr	r2, [pc, #20]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004c3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b03      	ldr	r3, [pc, #12]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a02      	ldr	r2, [pc, #8]	@ (8004c54 <HAL_RCC_OscConfig+0x270>)
 8004c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e014      	b.n	8004c7c <HAL_RCC_OscConfig+0x298>
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000
 8004c58:	08008e2c 	.word	0x08008e2c
 8004c5c:	20000000 	.word	0x20000000
 8004c60:	20000004 	.word	0x20000004
 8004c64:	4ba0      	ldr	r3, [pc, #640]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a9f      	ldr	r2, [pc, #636]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	4b9d      	ldr	r3, [pc, #628]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a9c      	ldr	r2, [pc, #624]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d013      	beq.n	8004cac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fd f9b0 	bl	8001fe8 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c8c:	f7fd f9ac 	bl	8001fe8 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b64      	cmp	r3, #100	@ 0x64
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e276      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c9e:	4b92      	ldr	r3, [pc, #584]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCC_OscConfig+0x2a8>
 8004caa:	e014      	b.n	8004cd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cac:	f7fd f99c 	bl	8001fe8 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb4:	f7fd f998 	bl	8001fe8 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	@ 0x64
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e262      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cc6:	4b88      	ldr	r3, [pc, #544]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f0      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x2d0>
 8004cd2:	e000      	b.n	8004cd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d060      	beq.n	8004da4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d005      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x310>
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b0c      	cmp	r3, #12
 8004cec:	d119      	bne.n	8004d22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d116      	bne.n	8004d22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cf4:	4b7c      	ldr	r3, [pc, #496]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_RCC_OscConfig+0x328>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e23f      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0c:	4b76      	ldr	r3, [pc, #472]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	061b      	lsls	r3, r3, #24
 8004d1a:	4973      	ldr	r1, [pc, #460]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d20:	e040      	b.n	8004da4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d023      	beq.n	8004d72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d2a:	4b6f      	ldr	r3, [pc, #444]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d36:	f7fd f957 	bl	8001fe8 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d3e:	f7fd f953 	bl	8001fe8 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e21d      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d50:	4b65      	ldr	r3, [pc, #404]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0f0      	beq.n	8004d3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5c:	4b62      	ldr	r3, [pc, #392]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	495f      	ldr	r1, [pc, #380]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	604b      	str	r3, [r1, #4]
 8004d70:	e018      	b.n	8004da4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d72:	4b5d      	ldr	r3, [pc, #372]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a5c      	ldr	r2, [pc, #368]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7e:	f7fd f933 	bl	8001fe8 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d86:	f7fd f92f 	bl	8001fe8 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e1f9      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d98:	4b53      	ldr	r3, [pc, #332]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f0      	bne.n	8004d86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d03c      	beq.n	8004e2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01c      	beq.n	8004df2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db8:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dbe:	4a4a      	ldr	r2, [pc, #296]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004dc0:	f043 0301 	orr.w	r3, r3, #1
 8004dc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc8:	f7fd f90e 	bl	8001fe8 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd0:	f7fd f90a 	bl	8001fe8 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e1d4      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004de2:	4b41      	ldr	r3, [pc, #260]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ef      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x3ec>
 8004df0:	e01b      	b.n	8004e2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004df2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004df8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fd f8f1 	bl	8001fe8 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e0a:	f7fd f8ed 	bl	8001fe8 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1b7      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e1c:	4b32      	ldr	r3, [pc, #200]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1ef      	bne.n	8004e0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 80a6 	beq.w	8004f84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10d      	bne.n	8004e64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e48:	4b27      	ldr	r3, [pc, #156]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4c:	4a26      	ldr	r2, [pc, #152]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004e4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e54:	4b24      	ldr	r3, [pc, #144]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e60:	2301      	movs	r3, #1
 8004e62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e64:	4b21      	ldr	r3, [pc, #132]	@ (8004eec <HAL_RCC_OscConfig+0x508>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d118      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e70:	4b1e      	ldr	r3, [pc, #120]	@ (8004eec <HAL_RCC_OscConfig+0x508>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1d      	ldr	r2, [pc, #116]	@ (8004eec <HAL_RCC_OscConfig+0x508>)
 8004e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e7c:	f7fd f8b4 	bl	8001fe8 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e84:	f7fd f8b0 	bl	8001fe8 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e17a      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e96:	4b15      	ldr	r3, [pc, #84]	@ (8004eec <HAL_RCC_OscConfig+0x508>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d108      	bne.n	8004ebc <HAL_RCC_OscConfig+0x4d8>
 8004eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004eba:	e029      	b.n	8004f10 <HAL_RCC_OscConfig+0x52c>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	2b05      	cmp	r3, #5
 8004ec2:	d115      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x50c>
 8004ec4:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eca:	4a07      	ldr	r2, [pc, #28]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004ecc:	f043 0304 	orr.w	r3, r3, #4
 8004ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ed4:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eda:	4a03      	ldr	r2, [pc, #12]	@ (8004ee8 <HAL_RCC_OscConfig+0x504>)
 8004edc:	f043 0301 	orr.w	r3, r3, #1
 8004ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ee4:	e014      	b.n	8004f10 <HAL_RCC_OscConfig+0x52c>
 8004ee6:	bf00      	nop
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40007000 	.word	0x40007000
 8004ef0:	4b9c      	ldr	r3, [pc, #624]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef6:	4a9b      	ldr	r2, [pc, #620]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f00:	4b98      	ldr	r3, [pc, #608]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f06:	4a97      	ldr	r2, [pc, #604]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8004f08:	f023 0304 	bic.w	r3, r3, #4
 8004f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d016      	beq.n	8004f46 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fd f866 	bl	8001fe8 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f20:	f7fd f862 	bl	8001fe8 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e12a      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f36:	4b8b      	ldr	r3, [pc, #556]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0ed      	beq.n	8004f20 <HAL_RCC_OscConfig+0x53c>
 8004f44:	e015      	b.n	8004f72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f46:	f7fd f84f 	bl	8001fe8 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f4c:	e00a      	b.n	8004f64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4e:	f7fd f84b 	bl	8001fe8 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e113      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f64:	4b7f      	ldr	r3, [pc, #508]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8004f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1ed      	bne.n	8004f4e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f72:	7ffb      	ldrb	r3, [r7, #31]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d105      	bne.n	8004f84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f78:	4b7a      	ldr	r3, [pc, #488]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7c:	4a79      	ldr	r2, [pc, #484]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8004f7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f82:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80fe 	beq.w	800518a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	f040 80d0 	bne.w	8005138 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f98:	4b72      	ldr	r3, [pc, #456]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 0203 	and.w	r2, r3, #3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d130      	bne.n	800500e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d127      	bne.n	800500e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d11f      	bne.n	800500e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fd8:	2a07      	cmp	r2, #7
 8004fda:	bf14      	ite	ne
 8004fdc:	2201      	movne	r2, #1
 8004fde:	2200      	moveq	r2, #0
 8004fe0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d113      	bne.n	800500e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff0:	085b      	lsrs	r3, r3, #1
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d109      	bne.n	800500e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005004:	085b      	lsrs	r3, r3, #1
 8005006:	3b01      	subs	r3, #1
 8005008:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800500a:	429a      	cmp	r2, r3
 800500c:	d06e      	beq.n	80050ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b0c      	cmp	r3, #12
 8005012:	d069      	beq.n	80050e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005014:	4b53      	ldr	r3, [pc, #332]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d105      	bne.n	800502c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005020:	4b50      	ldr	r3, [pc, #320]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0ad      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005030:	4b4c      	ldr	r3, [pc, #304]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a4b      	ldr	r2, [pc, #300]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8005036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800503a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800503c:	f7fc ffd4 	bl	8001fe8 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005044:	f7fc ffd0 	bl	8001fe8 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e09a      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005056:	4b43      	ldr	r3, [pc, #268]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005062:	4b40      	ldr	r3, [pc, #256]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	4b40      	ldr	r3, [pc, #256]	@ (8005168 <HAL_RCC_OscConfig+0x784>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005072:	3a01      	subs	r2, #1
 8005074:	0112      	lsls	r2, r2, #4
 8005076:	4311      	orrs	r1, r2
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800507c:	0212      	lsls	r2, r2, #8
 800507e:	4311      	orrs	r1, r2
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005084:	0852      	lsrs	r2, r2, #1
 8005086:	3a01      	subs	r2, #1
 8005088:	0552      	lsls	r2, r2, #21
 800508a:	4311      	orrs	r1, r2
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005090:	0852      	lsrs	r2, r2, #1
 8005092:	3a01      	subs	r2, #1
 8005094:	0652      	lsls	r2, r2, #25
 8005096:	4311      	orrs	r1, r2
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800509c:	0912      	lsrs	r2, r2, #4
 800509e:	0452      	lsls	r2, r2, #17
 80050a0:	430a      	orrs	r2, r1
 80050a2:	4930      	ldr	r1, [pc, #192]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80050a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 80050ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 80050ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050c0:	f7fc ff92 	bl	8001fe8 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fc ff8e 	bl	8001fe8 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e058      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050da:	4b22      	ldr	r3, [pc, #136]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050e6:	e050      	b.n	800518a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e04f      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d148      	bne.n	800518a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a19      	ldr	r2, [pc, #100]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 80050fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005102:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005104:	4b17      	ldr	r3, [pc, #92]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4a16      	ldr	r2, [pc, #88]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 800510a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800510e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005110:	f7fc ff6a 	bl	8001fe8 <HAL_GetTick>
 8005114:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005118:	f7fc ff66 	bl	8001fe8 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e030      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800512a:	4b0e      	ldr	r3, [pc, #56]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0f0      	beq.n	8005118 <HAL_RCC_OscConfig+0x734>
 8005136:	e028      	b.n	800518a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d023      	beq.n	8005186 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800513e:	4b09      	ldr	r3, [pc, #36]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a08      	ldr	r2, [pc, #32]	@ (8005164 <HAL_RCC_OscConfig+0x780>)
 8005144:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514a:	f7fc ff4d 	bl	8001fe8 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005150:	e00c      	b.n	800516c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005152:	f7fc ff49 	bl	8001fe8 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d905      	bls.n	800516c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e013      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
 8005164:	40021000 	.word	0x40021000
 8005168:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516c:	4b09      	ldr	r3, [pc, #36]	@ (8005194 <HAL_RCC_OscConfig+0x7b0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1ec      	bne.n	8005152 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005178:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <HAL_RCC_OscConfig+0x7b0>)
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	4905      	ldr	r1, [pc, #20]	@ (8005194 <HAL_RCC_OscConfig+0x7b0>)
 800517e:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <HAL_RCC_OscConfig+0x7b4>)
 8005180:	4013      	ands	r3, r2
 8005182:	60cb      	str	r3, [r1, #12]
 8005184:	e001      	b.n	800518a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3720      	adds	r7, #32
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40021000 	.word	0x40021000
 8005198:	feeefffc 	.word	0xfeeefffc

0800519c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0e7      	b.n	8005380 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051b0:	4b75      	ldr	r3, [pc, #468]	@ (8005388 <HAL_RCC_ClockConfig+0x1ec>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d910      	bls.n	80051e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b72      	ldr	r3, [pc, #456]	@ (8005388 <HAL_RCC_ClockConfig+0x1ec>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 0207 	bic.w	r2, r3, #7
 80051c6:	4970      	ldr	r1, [pc, #448]	@ (8005388 <HAL_RCC_ClockConfig+0x1ec>)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ce:	4b6e      	ldr	r3, [pc, #440]	@ (8005388 <HAL_RCC_ClockConfig+0x1ec>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e0cf      	b.n	8005380 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d010      	beq.n	800520e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	4b66      	ldr	r3, [pc, #408]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d908      	bls.n	800520e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051fc:	4b63      	ldr	r3, [pc, #396]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4960      	ldr	r1, [pc, #384]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 800520a:	4313      	orrs	r3, r2
 800520c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d04c      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b03      	cmp	r3, #3
 8005220:	d107      	bne.n	8005232 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005222:	4b5a      	ldr	r3, [pc, #360]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d121      	bne.n	8005272 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e0a6      	b.n	8005380 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800523a:	4b54      	ldr	r3, [pc, #336]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d115      	bne.n	8005272 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e09a      	b.n	8005380 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d107      	bne.n	8005262 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005252:	4b4e      	ldr	r3, [pc, #312]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e08e      	b.n	8005380 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005262:	4b4a      	ldr	r3, [pc, #296]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e086      	b.n	8005380 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005272:	4b46      	ldr	r3, [pc, #280]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f023 0203 	bic.w	r2, r3, #3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4943      	ldr	r1, [pc, #268]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 8005280:	4313      	orrs	r3, r2
 8005282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005284:	f7fc feb0 	bl	8001fe8 <HAL_GetTick>
 8005288:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528c:	f7fc feac 	bl	8001fe8 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e06e      	b.n	8005380 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a2:	4b3a      	ldr	r3, [pc, #232]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 020c 	and.w	r2, r3, #12
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d1eb      	bne.n	800528c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d010      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	4b31      	ldr	r3, [pc, #196]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d208      	bcs.n	80052e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d0:	4b2e      	ldr	r3, [pc, #184]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	492b      	ldr	r1, [pc, #172]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052e2:	4b29      	ldr	r3, [pc, #164]	@ (8005388 <HAL_RCC_ClockConfig+0x1ec>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d210      	bcs.n	8005312 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f0:	4b25      	ldr	r3, [pc, #148]	@ (8005388 <HAL_RCC_ClockConfig+0x1ec>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f023 0207 	bic.w	r2, r3, #7
 80052f8:	4923      	ldr	r1, [pc, #140]	@ (8005388 <HAL_RCC_ClockConfig+0x1ec>)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005300:	4b21      	ldr	r3, [pc, #132]	@ (8005388 <HAL_RCC_ClockConfig+0x1ec>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d001      	beq.n	8005312 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e036      	b.n	8005380 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d008      	beq.n	8005330 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800531e:	4b1b      	ldr	r3, [pc, #108]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	4918      	ldr	r1, [pc, #96]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 800532c:	4313      	orrs	r3, r2
 800532e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b00      	cmp	r3, #0
 800533a:	d009      	beq.n	8005350 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800533c:	4b13      	ldr	r3, [pc, #76]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	4910      	ldr	r1, [pc, #64]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 800534c:	4313      	orrs	r3, r2
 800534e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005350:	f000 f824 	bl	800539c <HAL_RCC_GetSysClockFreq>
 8005354:	4602      	mov	r2, r0
 8005356:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <HAL_RCC_ClockConfig+0x1f0>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	490b      	ldr	r1, [pc, #44]	@ (8005390 <HAL_RCC_ClockConfig+0x1f4>)
 8005362:	5ccb      	ldrb	r3, [r1, r3]
 8005364:	f003 031f 	and.w	r3, r3, #31
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
 800536c:	4a09      	ldr	r2, [pc, #36]	@ (8005394 <HAL_RCC_ClockConfig+0x1f8>)
 800536e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005370:	4b09      	ldr	r3, [pc, #36]	@ (8005398 <HAL_RCC_ClockConfig+0x1fc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f7fc fde7 	bl	8001f48 <HAL_InitTick>
 800537a:	4603      	mov	r3, r0
 800537c:	72fb      	strb	r3, [r7, #11]

  return status;
 800537e:	7afb      	ldrb	r3, [r7, #11]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40022000 	.word	0x40022000
 800538c:	40021000 	.word	0x40021000
 8005390:	08008e2c 	.word	0x08008e2c
 8005394:	20000000 	.word	0x20000000
 8005398:	20000004 	.word	0x20000004

0800539c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800539c:	b480      	push	{r7}
 800539e:	b089      	sub	sp, #36	@ 0x24
 80053a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	2300      	movs	r3, #0
 80053a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053aa:	4b3e      	ldr	r3, [pc, #248]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b4:	4b3b      	ldr	r3, [pc, #236]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq+0x34>
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	2b0c      	cmp	r3, #12
 80053c8:	d121      	bne.n	800540e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d11e      	bne.n	800540e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80053d0:	4b34      	ldr	r3, [pc, #208]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d107      	bne.n	80053ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80053dc:	4b31      	ldr	r3, [pc, #196]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e2:	0a1b      	lsrs	r3, r3, #8
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	61fb      	str	r3, [r7, #28]
 80053ea:	e005      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80053ec:	4b2d      	ldr	r3, [pc, #180]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80053f8:	4a2b      	ldr	r2, [pc, #172]	@ (80054a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005400:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10d      	bne.n	8005424 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800540c:	e00a      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b04      	cmp	r3, #4
 8005412:	d102      	bne.n	800541a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005414:	4b25      	ldr	r3, [pc, #148]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	e004      	b.n	8005424 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b08      	cmp	r3, #8
 800541e:	d101      	bne.n	8005424 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005420:	4b23      	ldr	r3, [pc, #140]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005422:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b0c      	cmp	r3, #12
 8005428:	d134      	bne.n	8005494 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800542a:	4b1e      	ldr	r3, [pc, #120]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d003      	beq.n	8005442 <HAL_RCC_GetSysClockFreq+0xa6>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b03      	cmp	r3, #3
 800543e:	d003      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0xac>
 8005440:	e005      	b.n	800544e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005442:	4b1a      	ldr	r3, [pc, #104]	@ (80054ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005444:	617b      	str	r3, [r7, #20]
      break;
 8005446:	e005      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005448:	4b19      	ldr	r3, [pc, #100]	@ (80054b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800544a:	617b      	str	r3, [r7, #20]
      break;
 800544c:	e002      	b.n	8005454 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	617b      	str	r3, [r7, #20]
      break;
 8005452:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005454:	4b13      	ldr	r3, [pc, #76]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	091b      	lsrs	r3, r3, #4
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	3301      	adds	r3, #1
 8005460:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005462:	4b10      	ldr	r3, [pc, #64]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	0a1b      	lsrs	r3, r3, #8
 8005468:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	fb03 f202 	mul.w	r2, r3, r2
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	fbb2 f3f3 	udiv	r3, r2, r3
 8005478:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800547a:	4b0a      	ldr	r3, [pc, #40]	@ (80054a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	0e5b      	lsrs	r3, r3, #25
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	3301      	adds	r3, #1
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005492:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005494:	69bb      	ldr	r3, [r7, #24]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3724      	adds	r7, #36	@ 0x24
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40021000 	.word	0x40021000
 80054a8:	08008e44 	.word	0x08008e44
 80054ac:	00f42400 	.word	0x00f42400
 80054b0:	007a1200 	.word	0x007a1200

080054b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054b8:	4b03      	ldr	r3, [pc, #12]	@ (80054c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ba:	681b      	ldr	r3, [r3, #0]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20000000 	.word	0x20000000

080054cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80054d0:	f7ff fff0 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4904      	ldr	r1, [pc, #16]	@ (80054f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054e2:	5ccb      	ldrb	r3, [r1, r3]
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40021000 	.word	0x40021000
 80054f4:	08008e3c 	.word	0x08008e3c

080054f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80054fc:	f7ff ffda 	bl	80054b4 <HAL_RCC_GetHCLKFreq>
 8005500:	4602      	mov	r2, r0
 8005502:	4b06      	ldr	r3, [pc, #24]	@ (800551c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	0adb      	lsrs	r3, r3, #11
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	4904      	ldr	r1, [pc, #16]	@ (8005520 <HAL_RCC_GetPCLK2Freq+0x28>)
 800550e:	5ccb      	ldrb	r3, [r1, r3]
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40021000 	.word	0x40021000
 8005520:	08008e3c 	.word	0x08008e3c

08005524 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800552c:	2300      	movs	r3, #0
 800552e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005530:	4b2a      	ldr	r3, [pc, #168]	@ (80055dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800553c:	f7ff f9ee 	bl	800491c <HAL_PWREx_GetVoltageRange>
 8005540:	6178      	str	r0, [r7, #20]
 8005542:	e014      	b.n	800556e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005544:	4b25      	ldr	r3, [pc, #148]	@ (80055dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005548:	4a24      	ldr	r2, [pc, #144]	@ (80055dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800554a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800554e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005550:	4b22      	ldr	r3, [pc, #136]	@ (80055dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800555c:	f7ff f9de 	bl	800491c <HAL_PWREx_GetVoltageRange>
 8005560:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005562:	4b1e      	ldr	r3, [pc, #120]	@ (80055dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005566:	4a1d      	ldr	r2, [pc, #116]	@ (80055dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800556c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005574:	d10b      	bne.n	800558e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b80      	cmp	r3, #128	@ 0x80
 800557a:	d919      	bls.n	80055b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005580:	d902      	bls.n	8005588 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005582:	2302      	movs	r3, #2
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	e013      	b.n	80055b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005588:	2301      	movs	r3, #1
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	e010      	b.n	80055b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b80      	cmp	r3, #128	@ 0x80
 8005592:	d902      	bls.n	800559a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005594:	2303      	movs	r3, #3
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	e00a      	b.n	80055b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b80      	cmp	r3, #128	@ 0x80
 800559e:	d102      	bne.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80055a0:	2302      	movs	r3, #2
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	e004      	b.n	80055b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b70      	cmp	r3, #112	@ 0x70
 80055aa:	d101      	bne.n	80055b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80055ac:	2301      	movs	r3, #1
 80055ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055b0:	4b0b      	ldr	r3, [pc, #44]	@ (80055e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f023 0207 	bic.w	r2, r3, #7
 80055b8:	4909      	ldr	r1, [pc, #36]	@ (80055e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80055c0:	4b07      	ldr	r3, [pc, #28]	@ (80055e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d001      	beq.n	80055d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40021000 	.word	0x40021000
 80055e0:	40022000 	.word	0x40022000

080055e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055ec:	2300      	movs	r3, #0
 80055ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055f0:	2300      	movs	r3, #0
 80055f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d041      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005604:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005608:	d02a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800560a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800560e:	d824      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005610:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005614:	d008      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005616:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800561a:	d81e      	bhi.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005620:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005624:	d010      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005626:	e018      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005628:	4b86      	ldr	r3, [pc, #536]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a85      	ldr	r2, [pc, #532]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800562e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005632:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005634:	e015      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	3304      	adds	r3, #4
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fabb 	bl	8005bb8 <RCCEx_PLLSAI1_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005646:	e00c      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3320      	adds	r3, #32
 800564c:	2100      	movs	r1, #0
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fba6 	bl	8005da0 <RCCEx_PLLSAI2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005658:	e003      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	74fb      	strb	r3, [r7, #19]
      break;
 800565e:	e000      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005668:	4b76      	ldr	r3, [pc, #472]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005676:	4973      	ldr	r1, [pc, #460]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800567e:	e001      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d041      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005694:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005698:	d02a      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800569a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800569e:	d824      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80056a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056a4:	d008      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80056a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80056aa:	d81e      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80056b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056b4:	d010      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056b6:	e018      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056b8:	4b62      	ldr	r3, [pc, #392]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4a61      	ldr	r2, [pc, #388]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056c4:	e015      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3304      	adds	r3, #4
 80056ca:	2100      	movs	r1, #0
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 fa73 	bl	8005bb8 <RCCEx_PLLSAI1_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056d6:	e00c      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3320      	adds	r3, #32
 80056dc:	2100      	movs	r1, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fb5e 	bl	8005da0 <RCCEx_PLLSAI2_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056e8:	e003      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	74fb      	strb	r3, [r7, #19]
      break;
 80056ee:	e000      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80056f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f2:	7cfb      	ldrb	r3, [r7, #19]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056f8:	4b52      	ldr	r3, [pc, #328]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005706:	494f      	ldr	r1, [pc, #316]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800570e:	e001      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	7cfb      	ldrb	r3, [r7, #19]
 8005712:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 80a0 	beq.w	8005862 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005722:	2300      	movs	r3, #0
 8005724:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005726:	4b47      	ldr	r3, [pc, #284]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00d      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573c:	4b41      	ldr	r3, [pc, #260]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800573e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005740:	4a40      	ldr	r2, [pc, #256]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005746:	6593      	str	r3, [r2, #88]	@ 0x58
 8005748:	4b3e      	ldr	r3, [pc, #248]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005754:	2301      	movs	r3, #1
 8005756:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005758:	4b3b      	ldr	r3, [pc, #236]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a3a      	ldr	r2, [pc, #232]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800575e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005762:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005764:	f7fc fc40 	bl	8001fe8 <HAL_GetTick>
 8005768:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800576a:	e009      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576c:	f7fc fc3c 	bl	8001fe8 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d902      	bls.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	74fb      	strb	r3, [r7, #19]
        break;
 800577e:	e005      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005780:	4b31      	ldr	r3, [pc, #196]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0ef      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800578c:	7cfb      	ldrb	r3, [r7, #19]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d15c      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005792:	4b2c      	ldr	r3, [pc, #176]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005798:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01f      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d019      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057b0:	4b24      	ldr	r3, [pc, #144]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057bc:	4b21      	ldr	r3, [pc, #132]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c2:	4a20      	ldr	r2, [pc, #128]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057dc:	4a19      	ldr	r2, [pc, #100]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d016      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ee:	f7fc fbfb 	bl	8001fe8 <HAL_GetTick>
 80057f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f4:	e00b      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f6:	f7fc fbf7 	bl	8001fe8 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005804:	4293      	cmp	r3, r2
 8005806:	d902      	bls.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	74fb      	strb	r3, [r7, #19]
            break;
 800580c:	e006      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800580e:	4b0d      	ldr	r3, [pc, #52]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0ec      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800581c:	7cfb      	ldrb	r3, [r7, #19]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10c      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005822:	4b08      	ldr	r3, [pc, #32]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005832:	4904      	ldr	r1, [pc, #16]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800583a:	e009      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800583c:	7cfb      	ldrb	r3, [r7, #19]
 800583e:	74bb      	strb	r3, [r7, #18]
 8005840:	e006      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005842:	bf00      	nop
 8005844:	40021000 	.word	0x40021000
 8005848:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584c:	7cfb      	ldrb	r3, [r7, #19]
 800584e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005850:	7c7b      	ldrb	r3, [r7, #17]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d105      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005856:	4b9e      	ldr	r3, [pc, #632]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800585a:	4a9d      	ldr	r2, [pc, #628]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800585c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005860:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800586e:	4b98      	ldr	r3, [pc, #608]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005874:	f023 0203 	bic.w	r2, r3, #3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587c:	4994      	ldr	r1, [pc, #592]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005890:	4b8f      	ldr	r3, [pc, #572]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005896:	f023 020c 	bic.w	r2, r3, #12
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589e:	498c      	ldr	r1, [pc, #560]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058b2:	4b87      	ldr	r3, [pc, #540]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c0:	4983      	ldr	r1, [pc, #524]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058d4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	497b      	ldr	r1, [pc, #492]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058f6:	4b76      	ldr	r3, [pc, #472]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005904:	4972      	ldr	r1, [pc, #456]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005918:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005926:	496a      	ldr	r1, [pc, #424]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800593a:	4b65      	ldr	r3, [pc, #404]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800593c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005940:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005948:	4961      	ldr	r1, [pc, #388]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800595c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005962:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800596a:	4959      	ldr	r1, [pc, #356]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800597e:	4b54      	ldr	r3, [pc, #336]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005984:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598c:	4950      	ldr	r1, [pc, #320]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059a0:	4b4b      	ldr	r3, [pc, #300]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ae:	4948      	ldr	r1, [pc, #288]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059c2:	4b43      	ldr	r3, [pc, #268]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d0:	493f      	ldr	r1, [pc, #252]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d028      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059e4:	4b3a      	ldr	r3, [pc, #232]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059f2:	4937      	ldr	r1, [pc, #220]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a02:	d106      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a04:	4b32      	ldr	r3, [pc, #200]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	4a31      	ldr	r2, [pc, #196]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a0e:	60d3      	str	r3, [r2, #12]
 8005a10:	e011      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a1a:	d10c      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	2101      	movs	r1, #1
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 f8c8 	bl	8005bb8 <RCCEx_PLLSAI1_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a2c:	7cfb      	ldrb	r3, [r7, #19]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005a32:	7cfb      	ldrb	r3, [r7, #19]
 8005a34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d028      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a42:	4b23      	ldr	r3, [pc, #140]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a50:	491f      	ldr	r1, [pc, #124]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a60:	d106      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a62:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a6c:	60d3      	str	r3, [r2, #12]
 8005a6e:	e011      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	2101      	movs	r1, #1
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 f899 	bl	8005bb8 <RCCEx_PLLSAI1_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a8a:	7cfb      	ldrb	r3, [r7, #19]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005a90:	7cfb      	ldrb	r3, [r7, #19]
 8005a92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d02b      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aae:	4908      	ldr	r1, [pc, #32]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005abe:	d109      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ac0:	4b03      	ldr	r3, [pc, #12]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	4a02      	ldr	r2, [pc, #8]	@ (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aca:	60d3      	str	r3, [r2, #12]
 8005acc:	e014      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005ace:	bf00      	nop
 8005ad0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ad8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 f867 	bl	8005bb8 <RCCEx_PLLSAI1_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aee:	7cfb      	ldrb	r3, [r7, #19]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005af4:	7cfb      	ldrb	r3, [r7, #19]
 8005af6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d02f      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b04:	4b2b      	ldr	r3, [pc, #172]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b12:	4928      	ldr	r1, [pc, #160]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b22:	d10d      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3304      	adds	r3, #4
 8005b28:	2102      	movs	r1, #2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f844 	bl	8005bb8 <RCCEx_PLLSAI1_Config>
 8005b30:	4603      	mov	r3, r0
 8005b32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b34:	7cfb      	ldrb	r3, [r7, #19]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d014      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b3a:	7cfb      	ldrb	r3, [r7, #19]
 8005b3c:	74bb      	strb	r3, [r7, #18]
 8005b3e:	e011      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b48:	d10c      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3320      	adds	r3, #32
 8005b4e:	2102      	movs	r1, #2
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 f925 	bl	8005da0 <RCCEx_PLLSAI2_Config>
 8005b56:	4603      	mov	r3, r0
 8005b58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b5a:	7cfb      	ldrb	r3, [r7, #19]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b60:	7cfb      	ldrb	r3, [r7, #19]
 8005b62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b70:	4b10      	ldr	r3, [pc, #64]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b76:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b7e:	490d      	ldr	r1, [pc, #52]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00b      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b92:	4b08      	ldr	r3, [pc, #32]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba2:	4904      	ldr	r1, [pc, #16]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005baa:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40021000 	.word	0x40021000

08005bb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bc6:	4b75      	ldr	r3, [pc, #468]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d018      	beq.n	8005c04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005bd2:	4b72      	ldr	r3, [pc, #456]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f003 0203 	and.w	r2, r3, #3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d10d      	bne.n	8005bfe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
       ||
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005bea:	4b6c      	ldr	r3, [pc, #432]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	091b      	lsrs	r3, r3, #4
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
       ||
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d047      	beq.n	8005c8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	73fb      	strb	r3, [r7, #15]
 8005c02:	e044      	b.n	8005c8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d018      	beq.n	8005c3e <RCCEx_PLLSAI1_Config+0x86>
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d825      	bhi.n	8005c5c <RCCEx_PLLSAI1_Config+0xa4>
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d002      	beq.n	8005c1a <RCCEx_PLLSAI1_Config+0x62>
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d009      	beq.n	8005c2c <RCCEx_PLLSAI1_Config+0x74>
 8005c18:	e020      	b.n	8005c5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c1a:	4b60      	ldr	r3, [pc, #384]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d11d      	bne.n	8005c62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c2a:	e01a      	b.n	8005c62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c2c:	4b5b      	ldr	r3, [pc, #364]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d116      	bne.n	8005c66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c3c:	e013      	b.n	8005c66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c3e:	4b57      	ldr	r3, [pc, #348]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10f      	bne.n	8005c6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c4a:	4b54      	ldr	r3, [pc, #336]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c5a:	e006      	b.n	8005c6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c60:	e004      	b.n	8005c6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10d      	bne.n	8005c8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c72:	4b4a      	ldr	r3, [pc, #296]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6819      	ldr	r1, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	430b      	orrs	r3, r1
 8005c88:	4944      	ldr	r1, [pc, #272]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d17d      	bne.n	8005d90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c94:	4b41      	ldr	r3, [pc, #260]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a40      	ldr	r2, [pc, #256]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca0:	f7fc f9a2 	bl	8001fe8 <HAL_GetTick>
 8005ca4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ca6:	e009      	b.n	8005cbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ca8:	f7fc f99e 	bl	8001fe8 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d902      	bls.n	8005cbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	73fb      	strb	r3, [r7, #15]
        break;
 8005cba:	e005      	b.n	8005cc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cbc:	4b37      	ldr	r3, [pc, #220]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1ef      	bne.n	8005ca8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d160      	bne.n	8005d90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d111      	bne.n	8005cf8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cd4:	4b31      	ldr	r3, [pc, #196]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005cdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6892      	ldr	r2, [r2, #8]
 8005ce4:	0211      	lsls	r1, r2, #8
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	68d2      	ldr	r2, [r2, #12]
 8005cea:	0912      	lsrs	r2, r2, #4
 8005cec:	0452      	lsls	r2, r2, #17
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	492a      	ldr	r1, [pc, #168]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	610b      	str	r3, [r1, #16]
 8005cf6:	e027      	b.n	8005d48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d112      	bne.n	8005d24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cfe:	4b27      	ldr	r3, [pc, #156]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005d06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6892      	ldr	r2, [r2, #8]
 8005d0e:	0211      	lsls	r1, r2, #8
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6912      	ldr	r2, [r2, #16]
 8005d14:	0852      	lsrs	r2, r2, #1
 8005d16:	3a01      	subs	r2, #1
 8005d18:	0552      	lsls	r2, r2, #21
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	491f      	ldr	r1, [pc, #124]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	610b      	str	r3, [r1, #16]
 8005d22:	e011      	b.n	8005d48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d24:	4b1d      	ldr	r3, [pc, #116]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005d2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6892      	ldr	r2, [r2, #8]
 8005d34:	0211      	lsls	r1, r2, #8
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6952      	ldr	r2, [r2, #20]
 8005d3a:	0852      	lsrs	r2, r2, #1
 8005d3c:	3a01      	subs	r2, #1
 8005d3e:	0652      	lsls	r2, r2, #25
 8005d40:	430a      	orrs	r2, r1
 8005d42:	4916      	ldr	r1, [pc, #88]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d48:	4b14      	ldr	r3, [pc, #80]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a13      	ldr	r2, [pc, #76]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d54:	f7fc f948 	bl	8001fe8 <HAL_GetTick>
 8005d58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d5a:	e009      	b.n	8005d70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d5c:	f7fc f944 	bl	8001fe8 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d902      	bls.n	8005d70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	73fb      	strb	r3, [r7, #15]
          break;
 8005d6e:	e005      	b.n	8005d7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d70:	4b0a      	ldr	r3, [pc, #40]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0ef      	beq.n	8005d5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d82:	4b06      	ldr	r3, [pc, #24]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	4904      	ldr	r1, [pc, #16]	@ (8005d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40021000 	.word	0x40021000

08005da0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005dae:	4b6a      	ldr	r3, [pc, #424]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d018      	beq.n	8005dec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005dba:	4b67      	ldr	r3, [pc, #412]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f003 0203 	and.w	r2, r3, #3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d10d      	bne.n	8005de6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
       ||
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d009      	beq.n	8005de6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005dd2:	4b61      	ldr	r3, [pc, #388]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	091b      	lsrs	r3, r3, #4
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
       ||
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d047      	beq.n	8005e76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	73fb      	strb	r3, [r7, #15]
 8005dea:	e044      	b.n	8005e76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d018      	beq.n	8005e26 <RCCEx_PLLSAI2_Config+0x86>
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d825      	bhi.n	8005e44 <RCCEx_PLLSAI2_Config+0xa4>
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d002      	beq.n	8005e02 <RCCEx_PLLSAI2_Config+0x62>
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d009      	beq.n	8005e14 <RCCEx_PLLSAI2_Config+0x74>
 8005e00:	e020      	b.n	8005e44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e02:	4b55      	ldr	r3, [pc, #340]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d11d      	bne.n	8005e4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e12:	e01a      	b.n	8005e4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e14:	4b50      	ldr	r3, [pc, #320]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d116      	bne.n	8005e4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e24:	e013      	b.n	8005e4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e26:	4b4c      	ldr	r3, [pc, #304]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10f      	bne.n	8005e52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e32:	4b49      	ldr	r3, [pc, #292]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d109      	bne.n	8005e52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e42:	e006      	b.n	8005e52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	73fb      	strb	r3, [r7, #15]
      break;
 8005e48:	e004      	b.n	8005e54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e4a:	bf00      	nop
 8005e4c:	e002      	b.n	8005e54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e4e:	bf00      	nop
 8005e50:	e000      	b.n	8005e54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e52:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10d      	bne.n	8005e76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6819      	ldr	r1, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	430b      	orrs	r3, r1
 8005e70:	4939      	ldr	r1, [pc, #228]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d167      	bne.n	8005f4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e7c:	4b36      	ldr	r3, [pc, #216]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a35      	ldr	r2, [pc, #212]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e88:	f7fc f8ae 	bl	8001fe8 <HAL_GetTick>
 8005e8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e8e:	e009      	b.n	8005ea4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e90:	f7fc f8aa 	bl	8001fe8 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d902      	bls.n	8005ea4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ea2:	e005      	b.n	8005eb0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1ef      	bne.n	8005e90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d14a      	bne.n	8005f4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d111      	bne.n	8005ee0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ebc:	4b26      	ldr	r3, [pc, #152]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6892      	ldr	r2, [r2, #8]
 8005ecc:	0211      	lsls	r1, r2, #8
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	68d2      	ldr	r2, [r2, #12]
 8005ed2:	0912      	lsrs	r2, r2, #4
 8005ed4:	0452      	lsls	r2, r2, #17
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	491f      	ldr	r1, [pc, #124]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	614b      	str	r3, [r1, #20]
 8005ede:	e011      	b.n	8005f04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005ee8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6892      	ldr	r2, [r2, #8]
 8005ef0:	0211      	lsls	r1, r2, #8
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6912      	ldr	r2, [r2, #16]
 8005ef6:	0852      	lsrs	r2, r2, #1
 8005ef8:	3a01      	subs	r2, #1
 8005efa:	0652      	lsls	r2, r2, #25
 8005efc:	430a      	orrs	r2, r1
 8005efe:	4916      	ldr	r1, [pc, #88]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005f04:	4b14      	ldr	r3, [pc, #80]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a13      	ldr	r2, [pc, #76]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f10:	f7fc f86a 	bl	8001fe8 <HAL_GetTick>
 8005f14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f16:	e009      	b.n	8005f2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f18:	f7fc f866 	bl	8001fe8 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d902      	bls.n	8005f2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	73fb      	strb	r3, [r7, #15]
          break;
 8005f2a:	e005      	b.n	8005f38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0ef      	beq.n	8005f18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005f3e:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f40:	695a      	ldr	r2, [r3, #20]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	4904      	ldr	r1, [pc, #16]	@ (8005f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40021000 	.word	0x40021000

08005f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e040      	b.n	8005ff0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fb fea2 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2224      	movs	r2, #36	@ 0x24
 8005f88:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0201 	bic.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 ffbc 	bl	8006f20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fd01 	bl	80069b0 <UART_SetConfig>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e01b      	b.n	8005ff0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 f83b 	bl	8007064 <UART_CheckIdleState>
 8005fee:	4603      	mov	r3, r0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	@ 0x28
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800600c:	2b20      	cmp	r3, #32
 800600e:	d177      	bne.n	8006100 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <HAL_UART_Transmit+0x24>
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e070      	b.n	8006102 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2221      	movs	r2, #33	@ 0x21
 800602c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800602e:	f7fb ffdb 	bl	8001fe8 <HAL_GetTick>
 8006032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	88fa      	ldrh	r2, [r7, #6]
 8006038:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	88fa      	ldrh	r2, [r7, #6]
 8006040:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800604c:	d108      	bne.n	8006060 <HAL_UART_Transmit+0x68>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d104      	bne.n	8006060 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	61bb      	str	r3, [r7, #24]
 800605e:	e003      	b.n	8006068 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006064:	2300      	movs	r3, #0
 8006066:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006068:	e02f      	b.n	80060ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2200      	movs	r2, #0
 8006072:	2180      	movs	r1, #128	@ 0x80
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f001 f89d 	bl	80071b4 <UART_WaitOnFlagUntilTimeout>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2220      	movs	r2, #32
 8006084:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e03b      	b.n	8006102 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10b      	bne.n	80060a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	881a      	ldrh	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800609c:	b292      	uxth	r2, r2
 800609e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	3302      	adds	r3, #2
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	e007      	b.n	80060b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	781a      	ldrb	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	3301      	adds	r3, #1
 80060b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1c9      	bne.n	800606a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2200      	movs	r2, #0
 80060de:	2140      	movs	r1, #64	@ 0x40
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f001 f867 	bl	80071b4 <UART_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d004      	beq.n	80060f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e005      	b.n	8006102 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e000      	b.n	8006102 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006100:	2302      	movs	r3, #2
  }
}
 8006102:	4618      	mov	r0, r3
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800610c:	b480      	push	{r7}
 800610e:	b08b      	sub	sp, #44	@ 0x2c
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	4613      	mov	r3, r2
 8006118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800611e:	2b20      	cmp	r3, #32
 8006120:	d147      	bne.n	80061b2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <HAL_UART_Transmit_IT+0x22>
 8006128:	88fb      	ldrh	r3, [r7, #6]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e040      	b.n	80061b4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	88fa      	ldrh	r2, [r7, #6]
 800613c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2221      	movs	r2, #33	@ 0x21
 800615a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006164:	d107      	bne.n	8006176 <HAL_UART_Transmit_IT+0x6a>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d103      	bne.n	8006176 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a13      	ldr	r2, [pc, #76]	@ (80061c0 <HAL_UART_Transmit_IT+0xb4>)
 8006172:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006174:	e002      	b.n	800617c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a12      	ldr	r2, [pc, #72]	@ (80061c4 <HAL_UART_Transmit_IT+0xb8>)
 800617a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	613b      	str	r3, [r7, #16]
   return(result);
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006190:	627b      	str	r3, [r7, #36]	@ 0x24
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	623b      	str	r3, [r7, #32]
 800619c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619e:	69f9      	ldr	r1, [r7, #28]
 80061a0:	6a3a      	ldr	r2, [r7, #32]
 80061a2:	e841 2300 	strex	r3, r2, [r1]
 80061a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1e6      	bne.n	800617c <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e000      	b.n	80061b4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80061b2:	2302      	movs	r3, #2
  }
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	372c      	adds	r7, #44	@ 0x2c
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	080075f1 	.word	0x080075f1
 80061c4:	0800753b 	.word	0x0800753b

080061c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b08a      	sub	sp, #40	@ 0x28
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d137      	bne.n	8006250 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <HAL_UART_Receive_IT+0x24>
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e030      	b.n	8006252 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a18      	ldr	r2, [pc, #96]	@ (800625c <HAL_UART_Receive_IT+0x94>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d01f      	beq.n	8006240 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d018      	beq.n	8006240 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	613b      	str	r3, [r7, #16]
   return(result);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	623b      	str	r3, [r7, #32]
 800622e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	69f9      	ldr	r1, [r7, #28]
 8006232:	6a3a      	ldr	r2, [r7, #32]
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	61bb      	str	r3, [r7, #24]
   return(result);
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e6      	bne.n	800620e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006240:	88fb      	ldrh	r3, [r7, #6]
 8006242:	461a      	mov	r2, r3
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f001 f822 	bl	8007290 <UART_Start_Receive_IT>
 800624c:	4603      	mov	r3, r0
 800624e:	e000      	b.n	8006252 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006250:	2302      	movs	r3, #2
  }
}
 8006252:	4618      	mov	r0, r3
 8006254:	3728      	adds	r7, #40	@ 0x28
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	40008000 	.word	0x40008000

08006260 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08e      	sub	sp, #56	@ 0x38
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Disable interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	61fb      	str	r3, [r7, #28]
   return(result);
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800627c:	637b      	str	r3, [r7, #52]	@ 0x34
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006286:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006288:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800628c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e6      	bne.n	8006268 <HAL_UART_AbortTransmit_IT+0x8>
#endif /* USART_CR1_FIFOEN */

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a4:	2b80      	cmp	r3, #128	@ 0x80
 80062a6:	d13f      	bne.n	8006328 <HAL_UART_AbortTransmit_IT+0xc8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3308      	adds	r3, #8
 80062ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	e853 3f00 	ldrex	r3, [r3]
 80062b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062be:	633b      	str	r3, [r7, #48]	@ 0x30
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3308      	adds	r3, #8
 80062c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c8:	61ba      	str	r2, [r7, #24]
 80062ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	6979      	ldr	r1, [r7, #20]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	e841 2300 	strex	r3, r2, [r1]
 80062d4:	613b      	str	r3, [r7, #16]
   return(result);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d1e5      	bne.n	80062a8 <HAL_UART_AbortTransmit_IT+0x48>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d013      	beq.n	800630c <HAL_UART_AbortTransmit_IT+0xac>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e8:	4a18      	ldr	r2, [pc, #96]	@ (800634c <HAL_UART_AbortTransmit_IT+0xec>)
 80062ea:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fd fc28 	bl	8003b46 <HAL_DMA_Abort_IT>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d022      	beq.n	8006342 <HAL_UART_AbortTransmit_IT+0xe2>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 8006306:	4610      	mov	r0, r2
 8006308:	4798      	blx	r3
 800630a:	e01a      	b.n	8006342 <HAL_UART_AbortTransmit_IT+0xe2>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

      /* Clear TxISR function pointers */
      huart->TxISR = NULL;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	67da      	str	r2, [r3, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fb2f 	bl	8006984 <HAL_UART_AbortTransmitCpltCallback>
 8006326:	e00c      	b.n	8006342 <HAL_UART_AbortTransmit_IT+0xe2>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Clear TxISR function pointers */
    huart->TxISR = NULL;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	66da      	str	r2, [r3, #108]	@ 0x6c
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR1_FIFOEN */

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2220      	movs	r2, #32
 800633a:	67da      	str	r2, [r3, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fb21 	bl	8006984 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3738      	adds	r7, #56	@ 0x38
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	08007511 	.word	0x08007511

08006350 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b0ba      	sub	sp, #232	@ 0xe8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006376:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800637a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800637e:	4013      	ands	r3, r2
 8006380:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006388:	2b00      	cmp	r3, #0
 800638a:	d115      	bne.n	80063b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800638c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00f      	beq.n	80063b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d009      	beq.n	80063b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 82ca 	beq.w	8006942 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
      }
      return;
 80063b6:	e2c4      	b.n	8006942 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80063b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8117 	beq.w	80065f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80063c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80063ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80063d2:	4b85      	ldr	r3, [pc, #532]	@ (80065e8 <HAL_UART_IRQHandler+0x298>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 810a 	beq.w	80065f0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d011      	beq.n	800640c <HAL_UART_IRQHandler+0xbc>
 80063e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2201      	movs	r2, #1
 80063fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006402:	f043 0201 	orr.w	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d011      	beq.n	800643c <HAL_UART_IRQHandler+0xec>
 8006418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2202      	movs	r2, #2
 800642a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006432:	f043 0204 	orr.w	r2, r3, #4
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800643c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d011      	beq.n	800646c <HAL_UART_IRQHandler+0x11c>
 8006448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2204      	movs	r2, #4
 800645a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006462:	f043 0202 	orr.w	r2, r3, #2
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800646c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d017      	beq.n	80064a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006488:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00b      	beq.n	80064a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2208      	movs	r2, #8
 8006496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800649e:	f043 0208 	orr.w	r2, r3, #8
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80064a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d012      	beq.n	80064da <HAL_UART_IRQHandler+0x18a>
 80064b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00c      	beq.n	80064da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064d0:	f043 0220 	orr.w	r2, r3, #32
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8230 	beq.w	8006946 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00d      	beq.n	800650e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d007      	beq.n	800650e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006514:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006522:	2b40      	cmp	r3, #64	@ 0x40
 8006524:	d005      	beq.n	8006532 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800652a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800652e:	2b00      	cmp	r3, #0
 8006530:	d04f      	beq.n	80065d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 ff72 	bl	800741c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006542:	2b40      	cmp	r3, #64	@ 0x40
 8006544:	d141      	bne.n	80065ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3308      	adds	r3, #8
 800654c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800655c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006560:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3308      	adds	r3, #8
 800656e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006572:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800657e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800658a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1d9      	bne.n	8006546 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006596:	2b00      	cmp	r3, #0
 8006598:	d013      	beq.n	80065c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800659e:	4a13      	ldr	r2, [pc, #76]	@ (80065ec <HAL_UART_IRQHandler+0x29c>)
 80065a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fd facd 	bl	8003b46 <HAL_DMA_Abort_IT>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d017      	beq.n	80065e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80065bc:	4610      	mov	r0, r2
 80065be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c0:	e00f      	b.n	80065e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f9d4 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c8:	e00b      	b.n	80065e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f9d0 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d0:	e007      	b.n	80065e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f9cc 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80065e0:	e1b1      	b.n	8006946 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e2:	bf00      	nop
    return;
 80065e4:	e1af      	b.n	8006946 <HAL_UART_IRQHandler+0x5f6>
 80065e6:	bf00      	nop
 80065e8:	04000120 	.word	0x04000120
 80065ec:	080074e5 	.word	0x080074e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	f040 816a 	bne.w	80068ce <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065fe:	f003 0310 	and.w	r3, r3, #16
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 8163 	beq.w	80068ce <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800660c:	f003 0310 	and.w	r3, r3, #16
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 815c 	beq.w	80068ce <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2210      	movs	r2, #16
 800661c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006628:	2b40      	cmp	r3, #64	@ 0x40
 800662a:	f040 80d4 	bne.w	80067d6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800663a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 80ad 	beq.w	800679e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800664a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800664e:	429a      	cmp	r2, r3
 8006650:	f080 80a5 	bcs.w	800679e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800665a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	f040 8086 	bne.w	800677c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800668c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800669a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800669e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80066a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80066b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1da      	bne.n	8006670 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3308      	adds	r3, #8
 80066c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066cc:	f023 0301 	bic.w	r3, r3, #1
 80066d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3308      	adds	r3, #8
 80066da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e1      	bne.n	80066ba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3308      	adds	r3, #8
 80066fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006700:	e853 3f00 	ldrex	r3, [r3]
 8006704:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006706:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800670c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3308      	adds	r3, #8
 8006716:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800671a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800671c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006720:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e3      	bne.n	80066f6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800674a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800674c:	f023 0310 	bic.w	r3, r3, #16
 8006750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800675e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006760:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006764:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006766:	e841 2300 	strex	r3, r2, [r1]
 800676a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800676c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1e4      	bne.n	800673c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006776:	4618      	mov	r0, r3
 8006778:	f7fd f9a7 	bl	8003aca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800678e:	b29b      	uxth	r3, r3
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	b29b      	uxth	r3, r3
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f8fe 	bl	8006998 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800679c:	e0d5      	b.n	800694a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80067a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067a8:	429a      	cmp	r2, r3
 80067aa:	f040 80ce 	bne.w	800694a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0320 	and.w	r3, r3, #32
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	f040 80c5 	bne.w	800694a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f8e2 	bl	8006998 <HAL_UARTEx_RxEventCallback>
      return;
 80067d4:	e0b9      	b.n	800694a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 80ab 	beq.w	800694e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80067f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80a6 	beq.w	800694e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680a:	e853 3f00 	ldrex	r3, [r3]
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006812:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006816:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006824:	647b      	str	r3, [r7, #68]	@ 0x44
 8006826:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800682a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e4      	bne.n	8006802 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3308      	adds	r3, #8
 800683e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	e853 3f00 	ldrex	r3, [r3]
 8006846:	623b      	str	r3, [r7, #32]
   return(result);
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800685c:	633a      	str	r2, [r7, #48]	@ 0x30
 800685e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006864:	e841 2300 	strex	r3, r2, [r1]
 8006868:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800686a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1e3      	bne.n	8006838 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2220      	movs	r2, #32
 8006874:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	60fb      	str	r3, [r7, #12]
   return(result);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f023 0310 	bic.w	r3, r3, #16
 8006898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068a6:	61fb      	str	r3, [r7, #28]
 80068a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	69b9      	ldr	r1, [r7, #24]
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	617b      	str	r3, [r7, #20]
   return(result);
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e4      	bne.n	8006884 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2202      	movs	r2, #2
 80068be:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f866 	bl	8006998 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068cc:	e03f      	b.n	800694e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00e      	beq.n	80068f8 <HAL_UART_IRQHandler+0x5a8>
 80068da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d008      	beq.n	80068f8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f001 f8c3 	bl	8007a7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068f6:	e02d      	b.n	8006954 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80068f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00e      	beq.n	8006922 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01c      	beq.n	8006952 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
    }
    return;
 8006920:	e017      	b.n	8006952 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d012      	beq.n	8006954 <HAL_UART_IRQHandler+0x604>
 800692e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00c      	beq.n	8006954 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 feb8 	bl	80076b0 <UART_EndTransmit_IT>
    return;
 8006940:	e008      	b.n	8006954 <HAL_UART_IRQHandler+0x604>
      return;
 8006942:	bf00      	nop
 8006944:	e006      	b.n	8006954 <HAL_UART_IRQHandler+0x604>
    return;
 8006946:	bf00      	nop
 8006948:	e004      	b.n	8006954 <HAL_UART_IRQHandler+0x604>
      return;
 800694a:	bf00      	nop
 800694c:	e002      	b.n	8006954 <HAL_UART_IRQHandler+0x604>
      return;
 800694e:	bf00      	nop
 8006950:	e000      	b.n	8006954 <HAL_UART_IRQHandler+0x604>
    return;
 8006952:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006954:	37e8      	adds	r7, #232	@ 0xe8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop

0800695c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b4:	b08a      	sub	sp, #40	@ 0x28
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	431a      	orrs	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	4ba4      	ldr	r3, [pc, #656]	@ (8006c70 <UART_SetConfig+0x2c0>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	6812      	ldr	r2, [r2, #0]
 80069e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a99      	ldr	r2, [pc, #612]	@ (8006c74 <UART_SetConfig+0x2c4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a90      	ldr	r2, [pc, #576]	@ (8006c78 <UART_SetConfig+0x2c8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d126      	bne.n	8006a88 <UART_SetConfig+0xd8>
 8006a3a:	4b90      	ldr	r3, [pc, #576]	@ (8006c7c <UART_SetConfig+0x2cc>)
 8006a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d81b      	bhi.n	8006a80 <UART_SetConfig+0xd0>
 8006a48:	a201      	add	r2, pc, #4	@ (adr r2, 8006a50 <UART_SetConfig+0xa0>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a61 	.word	0x08006a61
 8006a54:	08006a71 	.word	0x08006a71
 8006a58:	08006a69 	.word	0x08006a69
 8006a5c:	08006a79 	.word	0x08006a79
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a66:	e116      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006a68:	2302      	movs	r3, #2
 8006a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a6e:	e112      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006a70:	2304      	movs	r3, #4
 8006a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a76:	e10e      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006a78:	2308      	movs	r3, #8
 8006a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a7e:	e10a      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006a80:	2310      	movs	r3, #16
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a86:	e106      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a7c      	ldr	r2, [pc, #496]	@ (8006c80 <UART_SetConfig+0x2d0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d138      	bne.n	8006b04 <UART_SetConfig+0x154>
 8006a92:	4b7a      	ldr	r3, [pc, #488]	@ (8006c7c <UART_SetConfig+0x2cc>)
 8006a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a98:	f003 030c 	and.w	r3, r3, #12
 8006a9c:	2b0c      	cmp	r3, #12
 8006a9e:	d82d      	bhi.n	8006afc <UART_SetConfig+0x14c>
 8006aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa8 <UART_SetConfig+0xf8>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006add 	.word	0x08006add
 8006aac:	08006afd 	.word	0x08006afd
 8006ab0:	08006afd 	.word	0x08006afd
 8006ab4:	08006afd 	.word	0x08006afd
 8006ab8:	08006aed 	.word	0x08006aed
 8006abc:	08006afd 	.word	0x08006afd
 8006ac0:	08006afd 	.word	0x08006afd
 8006ac4:	08006afd 	.word	0x08006afd
 8006ac8:	08006ae5 	.word	0x08006ae5
 8006acc:	08006afd 	.word	0x08006afd
 8006ad0:	08006afd 	.word	0x08006afd
 8006ad4:	08006afd 	.word	0x08006afd
 8006ad8:	08006af5 	.word	0x08006af5
 8006adc:	2300      	movs	r3, #0
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ae2:	e0d8      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aea:	e0d4      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006aec:	2304      	movs	r3, #4
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006af2:	e0d0      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006af4:	2308      	movs	r3, #8
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006afa:	e0cc      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006afc:	2310      	movs	r3, #16
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b02:	e0c8      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a5e      	ldr	r2, [pc, #376]	@ (8006c84 <UART_SetConfig+0x2d4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d125      	bne.n	8006b5a <UART_SetConfig+0x1aa>
 8006b0e:	4b5b      	ldr	r3, [pc, #364]	@ (8006c7c <UART_SetConfig+0x2cc>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b14:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b18:	2b30      	cmp	r3, #48	@ 0x30
 8006b1a:	d016      	beq.n	8006b4a <UART_SetConfig+0x19a>
 8006b1c:	2b30      	cmp	r3, #48	@ 0x30
 8006b1e:	d818      	bhi.n	8006b52 <UART_SetConfig+0x1a2>
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d00a      	beq.n	8006b3a <UART_SetConfig+0x18a>
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d814      	bhi.n	8006b52 <UART_SetConfig+0x1a2>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <UART_SetConfig+0x182>
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d008      	beq.n	8006b42 <UART_SetConfig+0x192>
 8006b30:	e00f      	b.n	8006b52 <UART_SetConfig+0x1a2>
 8006b32:	2300      	movs	r3, #0
 8006b34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b38:	e0ad      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b40:	e0a9      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006b42:	2304      	movs	r3, #4
 8006b44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b48:	e0a5      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006b4a:	2308      	movs	r3, #8
 8006b4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b50:	e0a1      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006b52:	2310      	movs	r3, #16
 8006b54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b58:	e09d      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c88 <UART_SetConfig+0x2d8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d125      	bne.n	8006bb0 <UART_SetConfig+0x200>
 8006b64:	4b45      	ldr	r3, [pc, #276]	@ (8006c7c <UART_SetConfig+0x2cc>)
 8006b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b70:	d016      	beq.n	8006ba0 <UART_SetConfig+0x1f0>
 8006b72:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b74:	d818      	bhi.n	8006ba8 <UART_SetConfig+0x1f8>
 8006b76:	2b80      	cmp	r3, #128	@ 0x80
 8006b78:	d00a      	beq.n	8006b90 <UART_SetConfig+0x1e0>
 8006b7a:	2b80      	cmp	r3, #128	@ 0x80
 8006b7c:	d814      	bhi.n	8006ba8 <UART_SetConfig+0x1f8>
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d002      	beq.n	8006b88 <UART_SetConfig+0x1d8>
 8006b82:	2b40      	cmp	r3, #64	@ 0x40
 8006b84:	d008      	beq.n	8006b98 <UART_SetConfig+0x1e8>
 8006b86:	e00f      	b.n	8006ba8 <UART_SetConfig+0x1f8>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b8e:	e082      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006b90:	2302      	movs	r3, #2
 8006b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b96:	e07e      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006b98:	2304      	movs	r3, #4
 8006b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b9e:	e07a      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ba6:	e076      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006ba8:	2310      	movs	r3, #16
 8006baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bae:	e072      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a35      	ldr	r2, [pc, #212]	@ (8006c8c <UART_SetConfig+0x2dc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d12a      	bne.n	8006c10 <UART_SetConfig+0x260>
 8006bba:	4b30      	ldr	r3, [pc, #192]	@ (8006c7c <UART_SetConfig+0x2cc>)
 8006bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bc8:	d01a      	beq.n	8006c00 <UART_SetConfig+0x250>
 8006bca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bce:	d81b      	bhi.n	8006c08 <UART_SetConfig+0x258>
 8006bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bd4:	d00c      	beq.n	8006bf0 <UART_SetConfig+0x240>
 8006bd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bda:	d815      	bhi.n	8006c08 <UART_SetConfig+0x258>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <UART_SetConfig+0x238>
 8006be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006be4:	d008      	beq.n	8006bf8 <UART_SetConfig+0x248>
 8006be6:	e00f      	b.n	8006c08 <UART_SetConfig+0x258>
 8006be8:	2300      	movs	r3, #0
 8006bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bee:	e052      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bf6:	e04e      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006bf8:	2304      	movs	r3, #4
 8006bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bfe:	e04a      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006c00:	2308      	movs	r3, #8
 8006c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c06:	e046      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006c08:	2310      	movs	r3, #16
 8006c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c0e:	e042      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a17      	ldr	r2, [pc, #92]	@ (8006c74 <UART_SetConfig+0x2c4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d13a      	bne.n	8006c90 <UART_SetConfig+0x2e0>
 8006c1a:	4b18      	ldr	r3, [pc, #96]	@ (8006c7c <UART_SetConfig+0x2cc>)
 8006c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c28:	d01a      	beq.n	8006c60 <UART_SetConfig+0x2b0>
 8006c2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c2e:	d81b      	bhi.n	8006c68 <UART_SetConfig+0x2b8>
 8006c30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c34:	d00c      	beq.n	8006c50 <UART_SetConfig+0x2a0>
 8006c36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c3a:	d815      	bhi.n	8006c68 <UART_SetConfig+0x2b8>
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <UART_SetConfig+0x298>
 8006c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c44:	d008      	beq.n	8006c58 <UART_SetConfig+0x2a8>
 8006c46:	e00f      	b.n	8006c68 <UART_SetConfig+0x2b8>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c4e:	e022      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006c50:	2302      	movs	r3, #2
 8006c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c56:	e01e      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c5e:	e01a      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006c60:	2308      	movs	r3, #8
 8006c62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c66:	e016      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006c68:	2310      	movs	r3, #16
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c6e:	e012      	b.n	8006c96 <UART_SetConfig+0x2e6>
 8006c70:	efff69f3 	.word	0xefff69f3
 8006c74:	40008000 	.word	0x40008000
 8006c78:	40013800 	.word	0x40013800
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	40004400 	.word	0x40004400
 8006c84:	40004800 	.word	0x40004800
 8006c88:	40004c00 	.word	0x40004c00
 8006c8c:	40005000 	.word	0x40005000
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a9f      	ldr	r2, [pc, #636]	@ (8006f18 <UART_SetConfig+0x568>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d17a      	bne.n	8006d96 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ca4:	2b08      	cmp	r3, #8
 8006ca6:	d824      	bhi.n	8006cf2 <UART_SetConfig+0x342>
 8006ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb0 <UART_SetConfig+0x300>)
 8006caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cae:	bf00      	nop
 8006cb0:	08006cd5 	.word	0x08006cd5
 8006cb4:	08006cf3 	.word	0x08006cf3
 8006cb8:	08006cdd 	.word	0x08006cdd
 8006cbc:	08006cf3 	.word	0x08006cf3
 8006cc0:	08006ce3 	.word	0x08006ce3
 8006cc4:	08006cf3 	.word	0x08006cf3
 8006cc8:	08006cf3 	.word	0x08006cf3
 8006ccc:	08006cf3 	.word	0x08006cf3
 8006cd0:	08006ceb 	.word	0x08006ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cd4:	f7fe fbfa 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 8006cd8:	61f8      	str	r0, [r7, #28]
        break;
 8006cda:	e010      	b.n	8006cfe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cdc:	4b8f      	ldr	r3, [pc, #572]	@ (8006f1c <UART_SetConfig+0x56c>)
 8006cde:	61fb      	str	r3, [r7, #28]
        break;
 8006ce0:	e00d      	b.n	8006cfe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ce2:	f7fe fb5b 	bl	800539c <HAL_RCC_GetSysClockFreq>
 8006ce6:	61f8      	str	r0, [r7, #28]
        break;
 8006ce8:	e009      	b.n	8006cfe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cee:	61fb      	str	r3, [r7, #28]
        break;
 8006cf0:	e005      	b.n	8006cfe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006cfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 80fb 	beq.w	8006efc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	4413      	add	r3, r2
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d305      	bcc.n	8006d22 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d1c:	69fa      	ldr	r2, [r7, #28]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d903      	bls.n	8006d2a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d28:	e0e8      	b.n	8006efc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	461c      	mov	r4, r3
 8006d30:	4615      	mov	r5, r2
 8006d32:	f04f 0200 	mov.w	r2, #0
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	022b      	lsls	r3, r5, #8
 8006d3c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006d40:	0222      	lsls	r2, r4, #8
 8006d42:	68f9      	ldr	r1, [r7, #12]
 8006d44:	6849      	ldr	r1, [r1, #4]
 8006d46:	0849      	lsrs	r1, r1, #1
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4688      	mov	r8, r1
 8006d4c:	4681      	mov	r9, r0
 8006d4e:	eb12 0a08 	adds.w	sl, r2, r8
 8006d52:	eb43 0b09 	adc.w	fp, r3, r9
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	603b      	str	r3, [r7, #0]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d64:	4650      	mov	r0, sl
 8006d66:	4659      	mov	r1, fp
 8006d68:	f7f9 fe78 	bl	8000a5c <__aeabi_uldivmod>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4613      	mov	r3, r2
 8006d72:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d7a:	d308      	bcc.n	8006d8e <UART_SetConfig+0x3de>
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d82:	d204      	bcs.n	8006d8e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	60da      	str	r2, [r3, #12]
 8006d8c:	e0b6      	b.n	8006efc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d94:	e0b2      	b.n	8006efc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d9e:	d15e      	bne.n	8006e5e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006da0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d828      	bhi.n	8006dfa <UART_SetConfig+0x44a>
 8006da8:	a201      	add	r2, pc, #4	@ (adr r2, 8006db0 <UART_SetConfig+0x400>)
 8006daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dae:	bf00      	nop
 8006db0:	08006dd5 	.word	0x08006dd5
 8006db4:	08006ddd 	.word	0x08006ddd
 8006db8:	08006de5 	.word	0x08006de5
 8006dbc:	08006dfb 	.word	0x08006dfb
 8006dc0:	08006deb 	.word	0x08006deb
 8006dc4:	08006dfb 	.word	0x08006dfb
 8006dc8:	08006dfb 	.word	0x08006dfb
 8006dcc:	08006dfb 	.word	0x08006dfb
 8006dd0:	08006df3 	.word	0x08006df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd4:	f7fe fb7a 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 8006dd8:	61f8      	str	r0, [r7, #28]
        break;
 8006dda:	e014      	b.n	8006e06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ddc:	f7fe fb8c 	bl	80054f8 <HAL_RCC_GetPCLK2Freq>
 8006de0:	61f8      	str	r0, [r7, #28]
        break;
 8006de2:	e010      	b.n	8006e06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006de4:	4b4d      	ldr	r3, [pc, #308]	@ (8006f1c <UART_SetConfig+0x56c>)
 8006de6:	61fb      	str	r3, [r7, #28]
        break;
 8006de8:	e00d      	b.n	8006e06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dea:	f7fe fad7 	bl	800539c <HAL_RCC_GetSysClockFreq>
 8006dee:	61f8      	str	r0, [r7, #28]
        break;
 8006df0:	e009      	b.n	8006e06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006df6:	61fb      	str	r3, [r7, #28]
        break;
 8006df8:	e005      	b.n	8006e06 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d077      	beq.n	8006efc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	005a      	lsls	r2, r3, #1
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	085b      	lsrs	r3, r3, #1
 8006e16:	441a      	add	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	2b0f      	cmp	r3, #15
 8006e26:	d916      	bls.n	8006e56 <UART_SetConfig+0x4a6>
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e2e:	d212      	bcs.n	8006e56 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f023 030f 	bic.w	r3, r3, #15
 8006e38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	085b      	lsrs	r3, r3, #1
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	8afb      	ldrh	r3, [r7, #22]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	8afa      	ldrh	r2, [r7, #22]
 8006e52:	60da      	str	r2, [r3, #12]
 8006e54:	e052      	b.n	8006efc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e5c:	e04e      	b.n	8006efc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d827      	bhi.n	8006eb6 <UART_SetConfig+0x506>
 8006e66:	a201      	add	r2, pc, #4	@ (adr r2, 8006e6c <UART_SetConfig+0x4bc>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006e91 	.word	0x08006e91
 8006e70:	08006e99 	.word	0x08006e99
 8006e74:	08006ea1 	.word	0x08006ea1
 8006e78:	08006eb7 	.word	0x08006eb7
 8006e7c:	08006ea7 	.word	0x08006ea7
 8006e80:	08006eb7 	.word	0x08006eb7
 8006e84:	08006eb7 	.word	0x08006eb7
 8006e88:	08006eb7 	.word	0x08006eb7
 8006e8c:	08006eaf 	.word	0x08006eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e90:	f7fe fb1c 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 8006e94:	61f8      	str	r0, [r7, #28]
        break;
 8006e96:	e014      	b.n	8006ec2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e98:	f7fe fb2e 	bl	80054f8 <HAL_RCC_GetPCLK2Freq>
 8006e9c:	61f8      	str	r0, [r7, #28]
        break;
 8006e9e:	e010      	b.n	8006ec2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8006f1c <UART_SetConfig+0x56c>)
 8006ea2:	61fb      	str	r3, [r7, #28]
        break;
 8006ea4:	e00d      	b.n	8006ec2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ea6:	f7fe fa79 	bl	800539c <HAL_RCC_GetSysClockFreq>
 8006eaa:	61f8      	str	r0, [r7, #28]
        break;
 8006eac:	e009      	b.n	8006ec2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eb2:	61fb      	str	r3, [r7, #28]
        break;
 8006eb4:	e005      	b.n	8006ec2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ec0:	bf00      	nop
    }

    if (pclk != 0U)
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d019      	beq.n	8006efc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	085a      	lsrs	r2, r3, #1
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	441a      	add	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b0f      	cmp	r3, #15
 8006ee0:	d909      	bls.n	8006ef6 <UART_SetConfig+0x546>
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ee8:	d205      	bcs.n	8006ef6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60da      	str	r2, [r3, #12]
 8006ef4:	e002      	b.n	8006efc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006f08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3728      	adds	r7, #40	@ 0x28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f16:	bf00      	nop
 8006f18:	40008000 	.word	0x40008000
 8006f1c:	00f42400 	.word	0x00f42400

08006f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00a      	beq.n	8006f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00a      	beq.n	8006f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	f003 0320 	and.w	r3, r3, #32
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01a      	beq.n	8007036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800701e:	d10a      	bne.n	8007036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	605a      	str	r2, [r3, #4]
  }
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b098      	sub	sp, #96	@ 0x60
 8007068:	af02      	add	r7, sp, #8
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007074:	f7fa ffb8 	bl	8001fe8 <HAL_GetTick>
 8007078:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	2b08      	cmp	r3, #8
 8007086:	d12e      	bne.n	80070e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007090:	2200      	movs	r2, #0
 8007092:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f88c 	bl	80071b4 <UART_WaitOnFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d021      	beq.n	80070e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e6      	bne.n	80070a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e062      	b.n	80071ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d149      	bne.n	8007188 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070f8:	9300      	str	r3, [sp, #0]
 80070fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070fc:	2200      	movs	r2, #0
 80070fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f856 	bl	80071b4 <UART_WaitOnFlagUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d03c      	beq.n	8007188 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	623b      	str	r3, [r7, #32]
   return(result);
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
 800712a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800712c:	633b      	str	r3, [r7, #48]	@ 0x30
 800712e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800713a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e6      	bne.n	800710e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	3308      	adds	r3, #8
 8007146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	e853 3f00 	ldrex	r3, [r3]
 800714e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3308      	adds	r3, #8
 800715e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007160:	61fa      	str	r2, [r7, #28]
 8007162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007164:	69b9      	ldr	r1, [r7, #24]
 8007166:	69fa      	ldr	r2, [r7, #28]
 8007168:	e841 2300 	strex	r3, r2, [r1]
 800716c:	617b      	str	r3, [r7, #20]
   return(result);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d1e5      	bne.n	8007140 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2220      	movs	r2, #32
 8007178:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e011      	b.n	80071ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3758      	adds	r7, #88	@ 0x58
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	4613      	mov	r3, r2
 80071c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c4:	e04f      	b.n	8007266 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071cc:	d04b      	beq.n	8007266 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ce:	f7fa ff0b 	bl	8001fe8 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d302      	bcc.n	80071e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e04e      	b.n	8007286 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d037      	beq.n	8007266 <UART_WaitOnFlagUntilTimeout+0xb2>
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b80      	cmp	r3, #128	@ 0x80
 80071fa:	d034      	beq.n	8007266 <UART_WaitOnFlagUntilTimeout+0xb2>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b40      	cmp	r3, #64	@ 0x40
 8007200:	d031      	beq.n	8007266 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	2b08      	cmp	r3, #8
 800720e:	d110      	bne.n	8007232 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2208      	movs	r2, #8
 8007216:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f8ff 	bl	800741c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2208      	movs	r2, #8
 8007222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e029      	b.n	8007286 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800723c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007240:	d111      	bne.n	8007266 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800724a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 f8e5 	bl	800741c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2220      	movs	r2, #32
 8007256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e00f      	b.n	8007286 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69da      	ldr	r2, [r3, #28]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	4013      	ands	r3, r2
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	429a      	cmp	r2, r3
 8007274:	bf0c      	ite	eq
 8007276:	2301      	moveq	r3, #1
 8007278:	2300      	movne	r3, #0
 800727a:	b2db      	uxtb	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	429a      	cmp	r2, r3
 8007282:	d0a0      	beq.n	80071c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
	...

08007290 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007290:	b480      	push	{r7}
 8007292:	b097      	sub	sp, #92	@ 0x5c
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	88fa      	ldrh	r2, [r7, #6]
 80072a8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	88fa      	ldrh	r2, [r7, #6]
 80072b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c2:	d10e      	bne.n	80072e2 <UART_Start_Receive_IT+0x52>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d105      	bne.n	80072d8 <UART_Start_Receive_IT+0x48>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80072d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072d6:	e02d      	b.n	8007334 <UART_Start_Receive_IT+0xa4>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	22ff      	movs	r2, #255	@ 0xff
 80072dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072e0:	e028      	b.n	8007334 <UART_Start_Receive_IT+0xa4>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10d      	bne.n	8007306 <UART_Start_Receive_IT+0x76>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d104      	bne.n	80072fc <UART_Start_Receive_IT+0x6c>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	22ff      	movs	r2, #255	@ 0xff
 80072f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072fa:	e01b      	b.n	8007334 <UART_Start_Receive_IT+0xa4>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	227f      	movs	r2, #127	@ 0x7f
 8007300:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007304:	e016      	b.n	8007334 <UART_Start_Receive_IT+0xa4>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800730e:	d10d      	bne.n	800732c <UART_Start_Receive_IT+0x9c>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d104      	bne.n	8007322 <UART_Start_Receive_IT+0x92>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	227f      	movs	r2, #127	@ 0x7f
 800731c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007320:	e008      	b.n	8007334 <UART_Start_Receive_IT+0xa4>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	223f      	movs	r2, #63	@ 0x3f
 8007326:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800732a:	e003      	b.n	8007334 <UART_Start_Receive_IT+0xa4>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2222      	movs	r2, #34	@ 0x22
 8007340:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3308      	adds	r3, #8
 800734a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007356:	f043 0301 	orr.w	r3, r3, #1
 800735a:	657b      	str	r3, [r7, #84]	@ 0x54
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3308      	adds	r3, #8
 8007362:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007364:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007366:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800736a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e5      	bne.n	8007344 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007380:	d107      	bne.n	8007392 <UART_Start_Receive_IT+0x102>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4a21      	ldr	r2, [pc, #132]	@ (8007414 <UART_Start_Receive_IT+0x184>)
 800738e:	669a      	str	r2, [r3, #104]	@ 0x68
 8007390:	e002      	b.n	8007398 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4a20      	ldr	r2, [pc, #128]	@ (8007418 <UART_Start_Receive_IT+0x188>)
 8007396:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d019      	beq.n	80073d4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80073b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073be:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80073c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073c6:	e841 2300 	strex	r3, r2, [r1]
 80073ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80073cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1e6      	bne.n	80073a0 <UART_Start_Receive_IT+0x110>
 80073d2:	e018      	b.n	8007406 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	613b      	str	r3, [r7, #16]
   return(result);
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f043 0320 	orr.w	r3, r3, #32
 80073e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073f2:	623b      	str	r3, [r7, #32]
 80073f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f6:	69f9      	ldr	r1, [r7, #28]
 80073f8:	6a3a      	ldr	r2, [r7, #32]
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e6      	bne.n	80073d4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	375c      	adds	r7, #92	@ 0x5c
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	080078c1 	.word	0x080078c1
 8007418:	08007705 	.word	0x08007705

0800741c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800741c:	b480      	push	{r7}
 800741e:	b095      	sub	sp, #84	@ 0x54
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007442:	643b      	str	r3, [r7, #64]	@ 0x40
 8007444:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007448:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e6      	bne.n	8007424 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3308      	adds	r3, #8
 800745c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	61fb      	str	r3, [r7, #28]
   return(result);
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3308      	adds	r3, #8
 8007474:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007476:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007478:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800747c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e5      	bne.n	8007456 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800748e:	2b01      	cmp	r3, #1
 8007490:	d118      	bne.n	80074c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	60bb      	str	r3, [r7, #8]
   return(result);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	f023 0310 	bic.w	r3, r3, #16
 80074a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6979      	ldr	r1, [r7, #20]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	613b      	str	r3, [r7, #16]
   return(result);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e6      	bne.n	8007492 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80074d8:	bf00      	nop
 80074da:	3754      	adds	r7, #84	@ 0x54
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f7ff fa34 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <UART_DMATxOnlyAbortCallback>:
  *         and leads to user Tx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751c:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2220      	movs	r2, #32
 800752a:	67da      	str	r2, [r3, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f7ff fa29 	bl	8006984 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800753a:	b480      	push	{r7}
 800753c:	b08f      	sub	sp, #60	@ 0x3c
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007546:	2b21      	cmp	r3, #33	@ 0x21
 8007548:	d14c      	bne.n	80075e4 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d132      	bne.n	80075bc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	e853 3f00 	ldrex	r3, [r3]
 8007562:	61fb      	str	r3, [r7, #28]
   return(result);
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800756a:	637b      	str	r3, [r7, #52]	@ 0x34
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	461a      	mov	r2, r3
 8007572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007576:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800757a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e6      	bne.n	8007556 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	60bb      	str	r3, [r7, #8]
   return(result);
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800759c:	633b      	str	r3, [r7, #48]	@ 0x30
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a6:	61bb      	str	r3, [r7, #24]
 80075a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6979      	ldr	r1, [r7, #20]
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	613b      	str	r3, [r7, #16]
   return(result);
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e6      	bne.n	8007588 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80075ba:	e013      	b.n	80075e4 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075c0:	781a      	ldrb	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80075d8:	b29b      	uxth	r3, r3
 80075da:	3b01      	subs	r3, #1
 80075dc:	b29a      	uxth	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80075e4:	bf00      	nop
 80075e6:	373c      	adds	r7, #60	@ 0x3c
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b091      	sub	sp, #68	@ 0x44
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075fc:	2b21      	cmp	r3, #33	@ 0x21
 80075fe:	d151      	bne.n	80076a4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007606:	b29b      	uxth	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	d132      	bne.n	8007672 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	623b      	str	r3, [r7, #32]
   return(result);
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007620:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800762a:	633b      	str	r3, [r7, #48]	@ 0x30
 800762c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e6      	bne.n	800760c <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	60fb      	str	r3, [r7, #12]
   return(result);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007652:	637b      	str	r3, [r7, #52]	@ 0x34
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	69b9      	ldr	r1, [r7, #24]
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	e841 2300 	strex	r3, r2, [r1]
 8007668:	617b      	str	r3, [r7, #20]
   return(result);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e6      	bne.n	800763e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007670:	e018      	b.n	80076a4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007676:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800767a:	881a      	ldrh	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007684:	b292      	uxth	r2, r2
 8007686:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800768c:	1c9a      	adds	r2, r3, #2
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	b29a      	uxth	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80076a4:	bf00      	nop
 80076a6:	3744      	adds	r7, #68	@ 0x44
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076cc:	61fb      	str	r3, [r7, #28]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	61bb      	str	r3, [r7, #24]
 80076d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	6979      	ldr	r1, [r7, #20]
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	613b      	str	r3, [r7, #16]
   return(result);
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e6      	bne.n	80076b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2220      	movs	r2, #32
 80076ee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7ff f930 	bl	800695c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076fc:	bf00      	nop
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b09c      	sub	sp, #112	@ 0x70
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007712:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800771c:	2b22      	cmp	r3, #34	@ 0x22
 800771e:	f040 80be 	bne.w	800789e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007728:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800772c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007730:	b2d9      	uxtb	r1, r3
 8007732:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007736:	b2da      	uxtb	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773c:	400a      	ands	r2, r1
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007752:	b29b      	uxth	r3, r3
 8007754:	3b01      	subs	r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	f040 80a3 	bne.w	80078b2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800777a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800777c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007780:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800778a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800778c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007790:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007792:	e841 2300 	strex	r3, r2, [r1]
 8007796:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e6      	bne.n	800776c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3308      	adds	r3, #8
 80077a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b0:	f023 0301 	bic.w	r3, r3, #1
 80077b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3308      	adds	r3, #8
 80077bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80077be:	647a      	str	r2, [r7, #68]	@ 0x44
 80077c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e5      	bne.n	800779e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a34      	ldr	r2, [pc, #208]	@ (80078bc <UART_RxISR_8BIT+0x1b8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d01f      	beq.n	8007830 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d018      	beq.n	8007830 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	623b      	str	r3, [r7, #32]
   return(result);
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007812:	663b      	str	r3, [r7, #96]	@ 0x60
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800781c:	633b      	str	r3, [r7, #48]	@ 0x30
 800781e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800782a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e6      	bne.n	80077fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007834:	2b01      	cmp	r3, #1
 8007836:	d12e      	bne.n	8007896 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	e853 3f00 	ldrex	r3, [r3]
 800784a:	60fb      	str	r3, [r7, #12]
   return(result);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0310 	bic.w	r3, r3, #16
 8007852:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800785c:	61fb      	str	r3, [r7, #28]
 800785e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	69b9      	ldr	r1, [r7, #24]
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	617b      	str	r3, [r7, #20]
   return(result);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e6      	bne.n	800783e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	f003 0310 	and.w	r3, r3, #16
 800787a:	2b10      	cmp	r3, #16
 800787c:	d103      	bne.n	8007886 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2210      	movs	r2, #16
 8007884:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff f882 	bl	8006998 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007894:	e00d      	b.n	80078b2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7f9 fde8 	bl	800146c <HAL_UART_RxCpltCallback>
}
 800789c:	e009      	b.n	80078b2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	8b1b      	ldrh	r3, [r3, #24]
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f042 0208 	orr.w	r2, r2, #8
 80078ae:	b292      	uxth	r2, r2
 80078b0:	831a      	strh	r2, [r3, #24]
}
 80078b2:	bf00      	nop
 80078b4:	3770      	adds	r7, #112	@ 0x70
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	40008000 	.word	0x40008000

080078c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b09c      	sub	sp, #112	@ 0x70
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078d8:	2b22      	cmp	r3, #34	@ 0x22
 80078da:	f040 80be 	bne.w	8007a5a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80078e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80078ee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80078f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80078f6:	4013      	ands	r3, r2
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80078fc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007902:	1c9a      	adds	r2, r3, #2
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	f040 80a3 	bne.w	8007a6e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800793c:	667b      	str	r3, [r7, #100]	@ 0x64
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007946:	657b      	str	r3, [r7, #84]	@ 0x54
 8007948:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800794c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e6      	bne.n	8007928 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3308      	adds	r3, #8
 8007960:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800796a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	663b      	str	r3, [r7, #96]	@ 0x60
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3308      	adds	r3, #8
 8007978:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800797a:	643a      	str	r2, [r7, #64]	@ 0x40
 800797c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007980:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e5      	bne.n	800795a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2220      	movs	r2, #32
 8007992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a34      	ldr	r2, [pc, #208]	@ (8007a78 <UART_RxISR_16BIT+0x1b8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d01f      	beq.n	80079ec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d018      	beq.n	80079ec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	461a      	mov	r2, r3
 80079d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079da:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079e0:	e841 2300 	strex	r3, r2, [r1]
 80079e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1e6      	bne.n	80079ba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d12e      	bne.n	8007a52 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f023 0310 	bic.w	r3, r3, #16
 8007a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a18:	61bb      	str	r3, [r7, #24]
 8007a1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1c:	6979      	ldr	r1, [r7, #20]
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	e841 2300 	strex	r3, r2, [r1]
 8007a24:	613b      	str	r3, [r7, #16]
   return(result);
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1e6      	bne.n	80079fa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	f003 0310 	and.w	r3, r3, #16
 8007a36:	2b10      	cmp	r3, #16
 8007a38:	d103      	bne.n	8007a42 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2210      	movs	r2, #16
 8007a40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7fe ffa4 	bl	8006998 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a50:	e00d      	b.n	8007a6e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7f9 fd0a 	bl	800146c <HAL_UART_RxCpltCallback>
}
 8007a58:	e009      	b.n	8007a6e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	8b1b      	ldrh	r3, [r3, #24]
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f042 0208 	orr.w	r2, r2, #8
 8007a6a:	b292      	uxth	r2, r2
 8007a6c:	831a      	strh	r2, [r3, #24]
}
 8007a6e:	bf00      	nop
 8007a70:	3770      	adds	r7, #112	@ 0x70
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	40008000 	.word	0x40008000

08007a7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <siprintf>:
 8007a90:	b40e      	push	{r1, r2, r3}
 8007a92:	b500      	push	{lr}
 8007a94:	b09c      	sub	sp, #112	@ 0x70
 8007a96:	ab1d      	add	r3, sp, #116	@ 0x74
 8007a98:	9002      	str	r0, [sp, #8]
 8007a9a:	9006      	str	r0, [sp, #24]
 8007a9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007aa0:	4809      	ldr	r0, [pc, #36]	@ (8007ac8 <siprintf+0x38>)
 8007aa2:	9107      	str	r1, [sp, #28]
 8007aa4:	9104      	str	r1, [sp, #16]
 8007aa6:	4909      	ldr	r1, [pc, #36]	@ (8007acc <siprintf+0x3c>)
 8007aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007aac:	9105      	str	r1, [sp, #20]
 8007aae:	6800      	ldr	r0, [r0, #0]
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	a902      	add	r1, sp, #8
 8007ab4:	f000 f9bc 	bl	8007e30 <_svfiprintf_r>
 8007ab8:	9b02      	ldr	r3, [sp, #8]
 8007aba:	2200      	movs	r2, #0
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	b01c      	add	sp, #112	@ 0x70
 8007ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ac4:	b003      	add	sp, #12
 8007ac6:	4770      	bx	lr
 8007ac8:	2000000c 	.word	0x2000000c
 8007acc:	ffff0208 	.word	0xffff0208

08007ad0 <memmove>:
 8007ad0:	4288      	cmp	r0, r1
 8007ad2:	b510      	push	{r4, lr}
 8007ad4:	eb01 0402 	add.w	r4, r1, r2
 8007ad8:	d902      	bls.n	8007ae0 <memmove+0x10>
 8007ada:	4284      	cmp	r4, r0
 8007adc:	4623      	mov	r3, r4
 8007ade:	d807      	bhi.n	8007af0 <memmove+0x20>
 8007ae0:	1e43      	subs	r3, r0, #1
 8007ae2:	42a1      	cmp	r1, r4
 8007ae4:	d008      	beq.n	8007af8 <memmove+0x28>
 8007ae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007aee:	e7f8      	b.n	8007ae2 <memmove+0x12>
 8007af0:	4402      	add	r2, r0
 8007af2:	4601      	mov	r1, r0
 8007af4:	428a      	cmp	r2, r1
 8007af6:	d100      	bne.n	8007afa <memmove+0x2a>
 8007af8:	bd10      	pop	{r4, pc}
 8007afa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007afe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b02:	e7f7      	b.n	8007af4 <memmove+0x24>

08007b04 <memset>:
 8007b04:	4402      	add	r2, r0
 8007b06:	4603      	mov	r3, r0
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d100      	bne.n	8007b0e <memset+0xa>
 8007b0c:	4770      	bx	lr
 8007b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b12:	e7f9      	b.n	8007b08 <memset+0x4>

08007b14 <__errno>:
 8007b14:	4b01      	ldr	r3, [pc, #4]	@ (8007b1c <__errno+0x8>)
 8007b16:	6818      	ldr	r0, [r3, #0]
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	2000000c 	.word	0x2000000c

08007b20 <__libc_init_array>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	4d0d      	ldr	r5, [pc, #52]	@ (8007b58 <__libc_init_array+0x38>)
 8007b24:	4c0d      	ldr	r4, [pc, #52]	@ (8007b5c <__libc_init_array+0x3c>)
 8007b26:	1b64      	subs	r4, r4, r5
 8007b28:	10a4      	asrs	r4, r4, #2
 8007b2a:	2600      	movs	r6, #0
 8007b2c:	42a6      	cmp	r6, r4
 8007b2e:	d109      	bne.n	8007b44 <__libc_init_array+0x24>
 8007b30:	4d0b      	ldr	r5, [pc, #44]	@ (8007b60 <__libc_init_array+0x40>)
 8007b32:	4c0c      	ldr	r4, [pc, #48]	@ (8007b64 <__libc_init_array+0x44>)
 8007b34:	f000 fc4c 	bl	80083d0 <_init>
 8007b38:	1b64      	subs	r4, r4, r5
 8007b3a:	10a4      	asrs	r4, r4, #2
 8007b3c:	2600      	movs	r6, #0
 8007b3e:	42a6      	cmp	r6, r4
 8007b40:	d105      	bne.n	8007b4e <__libc_init_array+0x2e>
 8007b42:	bd70      	pop	{r4, r5, r6, pc}
 8007b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b48:	4798      	blx	r3
 8007b4a:	3601      	adds	r6, #1
 8007b4c:	e7ee      	b.n	8007b2c <__libc_init_array+0xc>
 8007b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b52:	4798      	blx	r3
 8007b54:	3601      	adds	r6, #1
 8007b56:	e7f2      	b.n	8007b3e <__libc_init_array+0x1e>
 8007b58:	08008eb0 	.word	0x08008eb0
 8007b5c:	08008eb0 	.word	0x08008eb0
 8007b60:	08008eb0 	.word	0x08008eb0
 8007b64:	08008eb4 	.word	0x08008eb4

08007b68 <__retarget_lock_acquire_recursive>:
 8007b68:	4770      	bx	lr

08007b6a <__retarget_lock_release_recursive>:
 8007b6a:	4770      	bx	lr

08007b6c <memcpy>:
 8007b6c:	440a      	add	r2, r1
 8007b6e:	4291      	cmp	r1, r2
 8007b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b74:	d100      	bne.n	8007b78 <memcpy+0xc>
 8007b76:	4770      	bx	lr
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b82:	4291      	cmp	r1, r2
 8007b84:	d1f9      	bne.n	8007b7a <memcpy+0xe>
 8007b86:	bd10      	pop	{r4, pc}

08007b88 <_free_r>:
 8007b88:	b538      	push	{r3, r4, r5, lr}
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	2900      	cmp	r1, #0
 8007b8e:	d041      	beq.n	8007c14 <_free_r+0x8c>
 8007b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b94:	1f0c      	subs	r4, r1, #4
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfb8      	it	lt
 8007b9a:	18e4      	addlt	r4, r4, r3
 8007b9c:	f000 f8e0 	bl	8007d60 <__malloc_lock>
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c18 <_free_r+0x90>)
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	b933      	cbnz	r3, 8007bb4 <_free_r+0x2c>
 8007ba6:	6063      	str	r3, [r4, #4]
 8007ba8:	6014      	str	r4, [r2, #0]
 8007baa:	4628      	mov	r0, r5
 8007bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bb0:	f000 b8dc 	b.w	8007d6c <__malloc_unlock>
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	d908      	bls.n	8007bca <_free_r+0x42>
 8007bb8:	6820      	ldr	r0, [r4, #0]
 8007bba:	1821      	adds	r1, r4, r0
 8007bbc:	428b      	cmp	r3, r1
 8007bbe:	bf01      	itttt	eq
 8007bc0:	6819      	ldreq	r1, [r3, #0]
 8007bc2:	685b      	ldreq	r3, [r3, #4]
 8007bc4:	1809      	addeq	r1, r1, r0
 8007bc6:	6021      	streq	r1, [r4, #0]
 8007bc8:	e7ed      	b.n	8007ba6 <_free_r+0x1e>
 8007bca:	461a      	mov	r2, r3
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	b10b      	cbz	r3, 8007bd4 <_free_r+0x4c>
 8007bd0:	42a3      	cmp	r3, r4
 8007bd2:	d9fa      	bls.n	8007bca <_free_r+0x42>
 8007bd4:	6811      	ldr	r1, [r2, #0]
 8007bd6:	1850      	adds	r0, r2, r1
 8007bd8:	42a0      	cmp	r0, r4
 8007bda:	d10b      	bne.n	8007bf4 <_free_r+0x6c>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	4401      	add	r1, r0
 8007be0:	1850      	adds	r0, r2, r1
 8007be2:	4283      	cmp	r3, r0
 8007be4:	6011      	str	r1, [r2, #0]
 8007be6:	d1e0      	bne.n	8007baa <_free_r+0x22>
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	6053      	str	r3, [r2, #4]
 8007bee:	4408      	add	r0, r1
 8007bf0:	6010      	str	r0, [r2, #0]
 8007bf2:	e7da      	b.n	8007baa <_free_r+0x22>
 8007bf4:	d902      	bls.n	8007bfc <_free_r+0x74>
 8007bf6:	230c      	movs	r3, #12
 8007bf8:	602b      	str	r3, [r5, #0]
 8007bfa:	e7d6      	b.n	8007baa <_free_r+0x22>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	1821      	adds	r1, r4, r0
 8007c00:	428b      	cmp	r3, r1
 8007c02:	bf04      	itt	eq
 8007c04:	6819      	ldreq	r1, [r3, #0]
 8007c06:	685b      	ldreq	r3, [r3, #4]
 8007c08:	6063      	str	r3, [r4, #4]
 8007c0a:	bf04      	itt	eq
 8007c0c:	1809      	addeq	r1, r1, r0
 8007c0e:	6021      	streq	r1, [r4, #0]
 8007c10:	6054      	str	r4, [r2, #4]
 8007c12:	e7ca      	b.n	8007baa <_free_r+0x22>
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	bf00      	nop
 8007c18:	20000848 	.word	0x20000848

08007c1c <sbrk_aligned>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	4e0f      	ldr	r6, [pc, #60]	@ (8007c5c <sbrk_aligned+0x40>)
 8007c20:	460c      	mov	r4, r1
 8007c22:	6831      	ldr	r1, [r6, #0]
 8007c24:	4605      	mov	r5, r0
 8007c26:	b911      	cbnz	r1, 8007c2e <sbrk_aligned+0x12>
 8007c28:	f000 fb8c 	bl	8008344 <_sbrk_r>
 8007c2c:	6030      	str	r0, [r6, #0]
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	f000 fb87 	bl	8008344 <_sbrk_r>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	d103      	bne.n	8007c42 <sbrk_aligned+0x26>
 8007c3a:	f04f 34ff 	mov.w	r4, #4294967295
 8007c3e:	4620      	mov	r0, r4
 8007c40:	bd70      	pop	{r4, r5, r6, pc}
 8007c42:	1cc4      	adds	r4, r0, #3
 8007c44:	f024 0403 	bic.w	r4, r4, #3
 8007c48:	42a0      	cmp	r0, r4
 8007c4a:	d0f8      	beq.n	8007c3e <sbrk_aligned+0x22>
 8007c4c:	1a21      	subs	r1, r4, r0
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f000 fb78 	bl	8008344 <_sbrk_r>
 8007c54:	3001      	adds	r0, #1
 8007c56:	d1f2      	bne.n	8007c3e <sbrk_aligned+0x22>
 8007c58:	e7ef      	b.n	8007c3a <sbrk_aligned+0x1e>
 8007c5a:	bf00      	nop
 8007c5c:	20000844 	.word	0x20000844

08007c60 <_malloc_r>:
 8007c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c64:	1ccd      	adds	r5, r1, #3
 8007c66:	f025 0503 	bic.w	r5, r5, #3
 8007c6a:	3508      	adds	r5, #8
 8007c6c:	2d0c      	cmp	r5, #12
 8007c6e:	bf38      	it	cc
 8007c70:	250c      	movcc	r5, #12
 8007c72:	2d00      	cmp	r5, #0
 8007c74:	4606      	mov	r6, r0
 8007c76:	db01      	blt.n	8007c7c <_malloc_r+0x1c>
 8007c78:	42a9      	cmp	r1, r5
 8007c7a:	d904      	bls.n	8007c86 <_malloc_r+0x26>
 8007c7c:	230c      	movs	r3, #12
 8007c7e:	6033      	str	r3, [r6, #0]
 8007c80:	2000      	movs	r0, #0
 8007c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d5c <_malloc_r+0xfc>
 8007c8a:	f000 f869 	bl	8007d60 <__malloc_lock>
 8007c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c92:	461c      	mov	r4, r3
 8007c94:	bb44      	cbnz	r4, 8007ce8 <_malloc_r+0x88>
 8007c96:	4629      	mov	r1, r5
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f7ff ffbf 	bl	8007c1c <sbrk_aligned>
 8007c9e:	1c43      	adds	r3, r0, #1
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	d158      	bne.n	8007d56 <_malloc_r+0xf6>
 8007ca4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ca8:	4627      	mov	r7, r4
 8007caa:	2f00      	cmp	r7, #0
 8007cac:	d143      	bne.n	8007d36 <_malloc_r+0xd6>
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	d04b      	beq.n	8007d4a <_malloc_r+0xea>
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	eb04 0903 	add.w	r9, r4, r3
 8007cbc:	f000 fb42 	bl	8008344 <_sbrk_r>
 8007cc0:	4581      	cmp	r9, r0
 8007cc2:	d142      	bne.n	8007d4a <_malloc_r+0xea>
 8007cc4:	6821      	ldr	r1, [r4, #0]
 8007cc6:	1a6d      	subs	r5, r5, r1
 8007cc8:	4629      	mov	r1, r5
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7ff ffa6 	bl	8007c1c <sbrk_aligned>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d03a      	beq.n	8007d4a <_malloc_r+0xea>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	442b      	add	r3, r5
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	f8d8 3000 	ldr.w	r3, [r8]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	bb62      	cbnz	r2, 8007d3c <_malloc_r+0xdc>
 8007ce2:	f8c8 7000 	str.w	r7, [r8]
 8007ce6:	e00f      	b.n	8007d08 <_malloc_r+0xa8>
 8007ce8:	6822      	ldr	r2, [r4, #0]
 8007cea:	1b52      	subs	r2, r2, r5
 8007cec:	d420      	bmi.n	8007d30 <_malloc_r+0xd0>
 8007cee:	2a0b      	cmp	r2, #11
 8007cf0:	d917      	bls.n	8007d22 <_malloc_r+0xc2>
 8007cf2:	1961      	adds	r1, r4, r5
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	6025      	str	r5, [r4, #0]
 8007cf8:	bf18      	it	ne
 8007cfa:	6059      	strne	r1, [r3, #4]
 8007cfc:	6863      	ldr	r3, [r4, #4]
 8007cfe:	bf08      	it	eq
 8007d00:	f8c8 1000 	streq.w	r1, [r8]
 8007d04:	5162      	str	r2, [r4, r5]
 8007d06:	604b      	str	r3, [r1, #4]
 8007d08:	4630      	mov	r0, r6
 8007d0a:	f000 f82f 	bl	8007d6c <__malloc_unlock>
 8007d0e:	f104 000b 	add.w	r0, r4, #11
 8007d12:	1d23      	adds	r3, r4, #4
 8007d14:	f020 0007 	bic.w	r0, r0, #7
 8007d18:	1ac2      	subs	r2, r0, r3
 8007d1a:	bf1c      	itt	ne
 8007d1c:	1a1b      	subne	r3, r3, r0
 8007d1e:	50a3      	strne	r3, [r4, r2]
 8007d20:	e7af      	b.n	8007c82 <_malloc_r+0x22>
 8007d22:	6862      	ldr	r2, [r4, #4]
 8007d24:	42a3      	cmp	r3, r4
 8007d26:	bf0c      	ite	eq
 8007d28:	f8c8 2000 	streq.w	r2, [r8]
 8007d2c:	605a      	strne	r2, [r3, #4]
 8007d2e:	e7eb      	b.n	8007d08 <_malloc_r+0xa8>
 8007d30:	4623      	mov	r3, r4
 8007d32:	6864      	ldr	r4, [r4, #4]
 8007d34:	e7ae      	b.n	8007c94 <_malloc_r+0x34>
 8007d36:	463c      	mov	r4, r7
 8007d38:	687f      	ldr	r7, [r7, #4]
 8007d3a:	e7b6      	b.n	8007caa <_malloc_r+0x4a>
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	d1fb      	bne.n	8007d3c <_malloc_r+0xdc>
 8007d44:	2300      	movs	r3, #0
 8007d46:	6053      	str	r3, [r2, #4]
 8007d48:	e7de      	b.n	8007d08 <_malloc_r+0xa8>
 8007d4a:	230c      	movs	r3, #12
 8007d4c:	6033      	str	r3, [r6, #0]
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f000 f80c 	bl	8007d6c <__malloc_unlock>
 8007d54:	e794      	b.n	8007c80 <_malloc_r+0x20>
 8007d56:	6005      	str	r5, [r0, #0]
 8007d58:	e7d6      	b.n	8007d08 <_malloc_r+0xa8>
 8007d5a:	bf00      	nop
 8007d5c:	20000848 	.word	0x20000848

08007d60 <__malloc_lock>:
 8007d60:	4801      	ldr	r0, [pc, #4]	@ (8007d68 <__malloc_lock+0x8>)
 8007d62:	f7ff bf01 	b.w	8007b68 <__retarget_lock_acquire_recursive>
 8007d66:	bf00      	nop
 8007d68:	20000840 	.word	0x20000840

08007d6c <__malloc_unlock>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	@ (8007d74 <__malloc_unlock+0x8>)
 8007d6e:	f7ff befc 	b.w	8007b6a <__retarget_lock_release_recursive>
 8007d72:	bf00      	nop
 8007d74:	20000840 	.word	0x20000840

08007d78 <__ssputs_r>:
 8007d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	688e      	ldr	r6, [r1, #8]
 8007d7e:	461f      	mov	r7, r3
 8007d80:	42be      	cmp	r6, r7
 8007d82:	680b      	ldr	r3, [r1, #0]
 8007d84:	4682      	mov	sl, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	4690      	mov	r8, r2
 8007d8a:	d82d      	bhi.n	8007de8 <__ssputs_r+0x70>
 8007d8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d94:	d026      	beq.n	8007de4 <__ssputs_r+0x6c>
 8007d96:	6965      	ldr	r5, [r4, #20]
 8007d98:	6909      	ldr	r1, [r1, #16]
 8007d9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d9e:	eba3 0901 	sub.w	r9, r3, r1
 8007da2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007da6:	1c7b      	adds	r3, r7, #1
 8007da8:	444b      	add	r3, r9
 8007daa:	106d      	asrs	r5, r5, #1
 8007dac:	429d      	cmp	r5, r3
 8007dae:	bf38      	it	cc
 8007db0:	461d      	movcc	r5, r3
 8007db2:	0553      	lsls	r3, r2, #21
 8007db4:	d527      	bpl.n	8007e06 <__ssputs_r+0x8e>
 8007db6:	4629      	mov	r1, r5
 8007db8:	f7ff ff52 	bl	8007c60 <_malloc_r>
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	b360      	cbz	r0, 8007e1a <__ssputs_r+0xa2>
 8007dc0:	6921      	ldr	r1, [r4, #16]
 8007dc2:	464a      	mov	r2, r9
 8007dc4:	f7ff fed2 	bl	8007b6c <memcpy>
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd2:	81a3      	strh	r3, [r4, #12]
 8007dd4:	6126      	str	r6, [r4, #16]
 8007dd6:	6165      	str	r5, [r4, #20]
 8007dd8:	444e      	add	r6, r9
 8007dda:	eba5 0509 	sub.w	r5, r5, r9
 8007dde:	6026      	str	r6, [r4, #0]
 8007de0:	60a5      	str	r5, [r4, #8]
 8007de2:	463e      	mov	r6, r7
 8007de4:	42be      	cmp	r6, r7
 8007de6:	d900      	bls.n	8007dea <__ssputs_r+0x72>
 8007de8:	463e      	mov	r6, r7
 8007dea:	6820      	ldr	r0, [r4, #0]
 8007dec:	4632      	mov	r2, r6
 8007dee:	4641      	mov	r1, r8
 8007df0:	f7ff fe6e 	bl	8007ad0 <memmove>
 8007df4:	68a3      	ldr	r3, [r4, #8]
 8007df6:	1b9b      	subs	r3, r3, r6
 8007df8:	60a3      	str	r3, [r4, #8]
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	4433      	add	r3, r6
 8007dfe:	6023      	str	r3, [r4, #0]
 8007e00:	2000      	movs	r0, #0
 8007e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e06:	462a      	mov	r2, r5
 8007e08:	f000 faac 	bl	8008364 <_realloc_r>
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d1e0      	bne.n	8007dd4 <__ssputs_r+0x5c>
 8007e12:	6921      	ldr	r1, [r4, #16]
 8007e14:	4650      	mov	r0, sl
 8007e16:	f7ff feb7 	bl	8007b88 <_free_r>
 8007e1a:	230c      	movs	r3, #12
 8007e1c:	f8ca 3000 	str.w	r3, [sl]
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e26:	81a3      	strh	r3, [r4, #12]
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	e7e9      	b.n	8007e02 <__ssputs_r+0x8a>
	...

08007e30 <_svfiprintf_r>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	4698      	mov	r8, r3
 8007e36:	898b      	ldrh	r3, [r1, #12]
 8007e38:	061b      	lsls	r3, r3, #24
 8007e3a:	b09d      	sub	sp, #116	@ 0x74
 8007e3c:	4607      	mov	r7, r0
 8007e3e:	460d      	mov	r5, r1
 8007e40:	4614      	mov	r4, r2
 8007e42:	d510      	bpl.n	8007e66 <_svfiprintf_r+0x36>
 8007e44:	690b      	ldr	r3, [r1, #16]
 8007e46:	b973      	cbnz	r3, 8007e66 <_svfiprintf_r+0x36>
 8007e48:	2140      	movs	r1, #64	@ 0x40
 8007e4a:	f7ff ff09 	bl	8007c60 <_malloc_r>
 8007e4e:	6028      	str	r0, [r5, #0]
 8007e50:	6128      	str	r0, [r5, #16]
 8007e52:	b930      	cbnz	r0, 8007e62 <_svfiprintf_r+0x32>
 8007e54:	230c      	movs	r3, #12
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5c:	b01d      	add	sp, #116	@ 0x74
 8007e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e62:	2340      	movs	r3, #64	@ 0x40
 8007e64:	616b      	str	r3, [r5, #20]
 8007e66:	2300      	movs	r3, #0
 8007e68:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e6a:	2320      	movs	r3, #32
 8007e6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e74:	2330      	movs	r3, #48	@ 0x30
 8007e76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008014 <_svfiprintf_r+0x1e4>
 8007e7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e7e:	f04f 0901 	mov.w	r9, #1
 8007e82:	4623      	mov	r3, r4
 8007e84:	469a      	mov	sl, r3
 8007e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e8a:	b10a      	cbz	r2, 8007e90 <_svfiprintf_r+0x60>
 8007e8c:	2a25      	cmp	r2, #37	@ 0x25
 8007e8e:	d1f9      	bne.n	8007e84 <_svfiprintf_r+0x54>
 8007e90:	ebba 0b04 	subs.w	fp, sl, r4
 8007e94:	d00b      	beq.n	8007eae <_svfiprintf_r+0x7e>
 8007e96:	465b      	mov	r3, fp
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	f7ff ff6b 	bl	8007d78 <__ssputs_r>
 8007ea2:	3001      	adds	r0, #1
 8007ea4:	f000 80a7 	beq.w	8007ff6 <_svfiprintf_r+0x1c6>
 8007ea8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eaa:	445a      	add	r2, fp
 8007eac:	9209      	str	r2, [sp, #36]	@ 0x24
 8007eae:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 809f 	beq.w	8007ff6 <_svfiprintf_r+0x1c6>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f04f 32ff 	mov.w	r2, #4294967295
 8007ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ec2:	f10a 0a01 	add.w	sl, sl, #1
 8007ec6:	9304      	str	r3, [sp, #16]
 8007ec8:	9307      	str	r3, [sp, #28]
 8007eca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ece:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ed0:	4654      	mov	r4, sl
 8007ed2:	2205      	movs	r2, #5
 8007ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed8:	484e      	ldr	r0, [pc, #312]	@ (8008014 <_svfiprintf_r+0x1e4>)
 8007eda:	f7f8 f981 	bl	80001e0 <memchr>
 8007ede:	9a04      	ldr	r2, [sp, #16]
 8007ee0:	b9d8      	cbnz	r0, 8007f1a <_svfiprintf_r+0xea>
 8007ee2:	06d0      	lsls	r0, r2, #27
 8007ee4:	bf44      	itt	mi
 8007ee6:	2320      	movmi	r3, #32
 8007ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eec:	0711      	lsls	r1, r2, #28
 8007eee:	bf44      	itt	mi
 8007ef0:	232b      	movmi	r3, #43	@ 0x2b
 8007ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8007efa:	2b2a      	cmp	r3, #42	@ 0x2a
 8007efc:	d015      	beq.n	8007f2a <_svfiprintf_r+0xfa>
 8007efe:	9a07      	ldr	r2, [sp, #28]
 8007f00:	4654      	mov	r4, sl
 8007f02:	2000      	movs	r0, #0
 8007f04:	f04f 0c0a 	mov.w	ip, #10
 8007f08:	4621      	mov	r1, r4
 8007f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f0e:	3b30      	subs	r3, #48	@ 0x30
 8007f10:	2b09      	cmp	r3, #9
 8007f12:	d94b      	bls.n	8007fac <_svfiprintf_r+0x17c>
 8007f14:	b1b0      	cbz	r0, 8007f44 <_svfiprintf_r+0x114>
 8007f16:	9207      	str	r2, [sp, #28]
 8007f18:	e014      	b.n	8007f44 <_svfiprintf_r+0x114>
 8007f1a:	eba0 0308 	sub.w	r3, r0, r8
 8007f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8007f22:	4313      	orrs	r3, r2
 8007f24:	9304      	str	r3, [sp, #16]
 8007f26:	46a2      	mov	sl, r4
 8007f28:	e7d2      	b.n	8007ed0 <_svfiprintf_r+0xa0>
 8007f2a:	9b03      	ldr	r3, [sp, #12]
 8007f2c:	1d19      	adds	r1, r3, #4
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	9103      	str	r1, [sp, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	bfbb      	ittet	lt
 8007f36:	425b      	neglt	r3, r3
 8007f38:	f042 0202 	orrlt.w	r2, r2, #2
 8007f3c:	9307      	strge	r3, [sp, #28]
 8007f3e:	9307      	strlt	r3, [sp, #28]
 8007f40:	bfb8      	it	lt
 8007f42:	9204      	strlt	r2, [sp, #16]
 8007f44:	7823      	ldrb	r3, [r4, #0]
 8007f46:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f48:	d10a      	bne.n	8007f60 <_svfiprintf_r+0x130>
 8007f4a:	7863      	ldrb	r3, [r4, #1]
 8007f4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f4e:	d132      	bne.n	8007fb6 <_svfiprintf_r+0x186>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	1d1a      	adds	r2, r3, #4
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	9203      	str	r2, [sp, #12]
 8007f58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f5c:	3402      	adds	r4, #2
 8007f5e:	9305      	str	r3, [sp, #20]
 8007f60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008024 <_svfiprintf_r+0x1f4>
 8007f64:	7821      	ldrb	r1, [r4, #0]
 8007f66:	2203      	movs	r2, #3
 8007f68:	4650      	mov	r0, sl
 8007f6a:	f7f8 f939 	bl	80001e0 <memchr>
 8007f6e:	b138      	cbz	r0, 8007f80 <_svfiprintf_r+0x150>
 8007f70:	9b04      	ldr	r3, [sp, #16]
 8007f72:	eba0 000a 	sub.w	r0, r0, sl
 8007f76:	2240      	movs	r2, #64	@ 0x40
 8007f78:	4082      	lsls	r2, r0
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	3401      	adds	r4, #1
 8007f7e:	9304      	str	r3, [sp, #16]
 8007f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f84:	4824      	ldr	r0, [pc, #144]	@ (8008018 <_svfiprintf_r+0x1e8>)
 8007f86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f8a:	2206      	movs	r2, #6
 8007f8c:	f7f8 f928 	bl	80001e0 <memchr>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d036      	beq.n	8008002 <_svfiprintf_r+0x1d2>
 8007f94:	4b21      	ldr	r3, [pc, #132]	@ (800801c <_svfiprintf_r+0x1ec>)
 8007f96:	bb1b      	cbnz	r3, 8007fe0 <_svfiprintf_r+0x1b0>
 8007f98:	9b03      	ldr	r3, [sp, #12]
 8007f9a:	3307      	adds	r3, #7
 8007f9c:	f023 0307 	bic.w	r3, r3, #7
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	9303      	str	r3, [sp, #12]
 8007fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa6:	4433      	add	r3, r6
 8007fa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007faa:	e76a      	b.n	8007e82 <_svfiprintf_r+0x52>
 8007fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	2001      	movs	r0, #1
 8007fb4:	e7a8      	b.n	8007f08 <_svfiprintf_r+0xd8>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	3401      	adds	r4, #1
 8007fba:	9305      	str	r3, [sp, #20]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	f04f 0c0a 	mov.w	ip, #10
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fc8:	3a30      	subs	r2, #48	@ 0x30
 8007fca:	2a09      	cmp	r2, #9
 8007fcc:	d903      	bls.n	8007fd6 <_svfiprintf_r+0x1a6>
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0c6      	beq.n	8007f60 <_svfiprintf_r+0x130>
 8007fd2:	9105      	str	r1, [sp, #20]
 8007fd4:	e7c4      	b.n	8007f60 <_svfiprintf_r+0x130>
 8007fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fda:	4604      	mov	r4, r0
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e7f0      	b.n	8007fc2 <_svfiprintf_r+0x192>
 8007fe0:	ab03      	add	r3, sp, #12
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	462a      	mov	r2, r5
 8007fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8008020 <_svfiprintf_r+0x1f0>)
 8007fe8:	a904      	add	r1, sp, #16
 8007fea:	4638      	mov	r0, r7
 8007fec:	f3af 8000 	nop.w
 8007ff0:	1c42      	adds	r2, r0, #1
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	d1d6      	bne.n	8007fa4 <_svfiprintf_r+0x174>
 8007ff6:	89ab      	ldrh	r3, [r5, #12]
 8007ff8:	065b      	lsls	r3, r3, #25
 8007ffa:	f53f af2d 	bmi.w	8007e58 <_svfiprintf_r+0x28>
 8007ffe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008000:	e72c      	b.n	8007e5c <_svfiprintf_r+0x2c>
 8008002:	ab03      	add	r3, sp, #12
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	462a      	mov	r2, r5
 8008008:	4b05      	ldr	r3, [pc, #20]	@ (8008020 <_svfiprintf_r+0x1f0>)
 800800a:	a904      	add	r1, sp, #16
 800800c:	4638      	mov	r0, r7
 800800e:	f000 f879 	bl	8008104 <_printf_i>
 8008012:	e7ed      	b.n	8007ff0 <_svfiprintf_r+0x1c0>
 8008014:	08008e74 	.word	0x08008e74
 8008018:	08008e7e 	.word	0x08008e7e
 800801c:	00000000 	.word	0x00000000
 8008020:	08007d79 	.word	0x08007d79
 8008024:	08008e7a 	.word	0x08008e7a

08008028 <_printf_common>:
 8008028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800802c:	4616      	mov	r6, r2
 800802e:	4698      	mov	r8, r3
 8008030:	688a      	ldr	r2, [r1, #8]
 8008032:	690b      	ldr	r3, [r1, #16]
 8008034:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008038:	4293      	cmp	r3, r2
 800803a:	bfb8      	it	lt
 800803c:	4613      	movlt	r3, r2
 800803e:	6033      	str	r3, [r6, #0]
 8008040:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008044:	4607      	mov	r7, r0
 8008046:	460c      	mov	r4, r1
 8008048:	b10a      	cbz	r2, 800804e <_printf_common+0x26>
 800804a:	3301      	adds	r3, #1
 800804c:	6033      	str	r3, [r6, #0]
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	0699      	lsls	r1, r3, #26
 8008052:	bf42      	ittt	mi
 8008054:	6833      	ldrmi	r3, [r6, #0]
 8008056:	3302      	addmi	r3, #2
 8008058:	6033      	strmi	r3, [r6, #0]
 800805a:	6825      	ldr	r5, [r4, #0]
 800805c:	f015 0506 	ands.w	r5, r5, #6
 8008060:	d106      	bne.n	8008070 <_printf_common+0x48>
 8008062:	f104 0a19 	add.w	sl, r4, #25
 8008066:	68e3      	ldr	r3, [r4, #12]
 8008068:	6832      	ldr	r2, [r6, #0]
 800806a:	1a9b      	subs	r3, r3, r2
 800806c:	42ab      	cmp	r3, r5
 800806e:	dc26      	bgt.n	80080be <_printf_common+0x96>
 8008070:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008074:	6822      	ldr	r2, [r4, #0]
 8008076:	3b00      	subs	r3, #0
 8008078:	bf18      	it	ne
 800807a:	2301      	movne	r3, #1
 800807c:	0692      	lsls	r2, r2, #26
 800807e:	d42b      	bmi.n	80080d8 <_printf_common+0xb0>
 8008080:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008084:	4641      	mov	r1, r8
 8008086:	4638      	mov	r0, r7
 8008088:	47c8      	blx	r9
 800808a:	3001      	adds	r0, #1
 800808c:	d01e      	beq.n	80080cc <_printf_common+0xa4>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	6922      	ldr	r2, [r4, #16]
 8008092:	f003 0306 	and.w	r3, r3, #6
 8008096:	2b04      	cmp	r3, #4
 8008098:	bf02      	ittt	eq
 800809a:	68e5      	ldreq	r5, [r4, #12]
 800809c:	6833      	ldreq	r3, [r6, #0]
 800809e:	1aed      	subeq	r5, r5, r3
 80080a0:	68a3      	ldr	r3, [r4, #8]
 80080a2:	bf0c      	ite	eq
 80080a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080a8:	2500      	movne	r5, #0
 80080aa:	4293      	cmp	r3, r2
 80080ac:	bfc4      	itt	gt
 80080ae:	1a9b      	subgt	r3, r3, r2
 80080b0:	18ed      	addgt	r5, r5, r3
 80080b2:	2600      	movs	r6, #0
 80080b4:	341a      	adds	r4, #26
 80080b6:	42b5      	cmp	r5, r6
 80080b8:	d11a      	bne.n	80080f0 <_printf_common+0xc8>
 80080ba:	2000      	movs	r0, #0
 80080bc:	e008      	b.n	80080d0 <_printf_common+0xa8>
 80080be:	2301      	movs	r3, #1
 80080c0:	4652      	mov	r2, sl
 80080c2:	4641      	mov	r1, r8
 80080c4:	4638      	mov	r0, r7
 80080c6:	47c8      	blx	r9
 80080c8:	3001      	adds	r0, #1
 80080ca:	d103      	bne.n	80080d4 <_printf_common+0xac>
 80080cc:	f04f 30ff 	mov.w	r0, #4294967295
 80080d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d4:	3501      	adds	r5, #1
 80080d6:	e7c6      	b.n	8008066 <_printf_common+0x3e>
 80080d8:	18e1      	adds	r1, r4, r3
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	2030      	movs	r0, #48	@ 0x30
 80080de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080e2:	4422      	add	r2, r4
 80080e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080ec:	3302      	adds	r3, #2
 80080ee:	e7c7      	b.n	8008080 <_printf_common+0x58>
 80080f0:	2301      	movs	r3, #1
 80080f2:	4622      	mov	r2, r4
 80080f4:	4641      	mov	r1, r8
 80080f6:	4638      	mov	r0, r7
 80080f8:	47c8      	blx	r9
 80080fa:	3001      	adds	r0, #1
 80080fc:	d0e6      	beq.n	80080cc <_printf_common+0xa4>
 80080fe:	3601      	adds	r6, #1
 8008100:	e7d9      	b.n	80080b6 <_printf_common+0x8e>
	...

08008104 <_printf_i>:
 8008104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008108:	7e0f      	ldrb	r7, [r1, #24]
 800810a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800810c:	2f78      	cmp	r7, #120	@ 0x78
 800810e:	4691      	mov	r9, r2
 8008110:	4680      	mov	r8, r0
 8008112:	460c      	mov	r4, r1
 8008114:	469a      	mov	sl, r3
 8008116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800811a:	d807      	bhi.n	800812c <_printf_i+0x28>
 800811c:	2f62      	cmp	r7, #98	@ 0x62
 800811e:	d80a      	bhi.n	8008136 <_printf_i+0x32>
 8008120:	2f00      	cmp	r7, #0
 8008122:	f000 80d2 	beq.w	80082ca <_printf_i+0x1c6>
 8008126:	2f58      	cmp	r7, #88	@ 0x58
 8008128:	f000 80b9 	beq.w	800829e <_printf_i+0x19a>
 800812c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008134:	e03a      	b.n	80081ac <_printf_i+0xa8>
 8008136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800813a:	2b15      	cmp	r3, #21
 800813c:	d8f6      	bhi.n	800812c <_printf_i+0x28>
 800813e:	a101      	add	r1, pc, #4	@ (adr r1, 8008144 <_printf_i+0x40>)
 8008140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008144:	0800819d 	.word	0x0800819d
 8008148:	080081b1 	.word	0x080081b1
 800814c:	0800812d 	.word	0x0800812d
 8008150:	0800812d 	.word	0x0800812d
 8008154:	0800812d 	.word	0x0800812d
 8008158:	0800812d 	.word	0x0800812d
 800815c:	080081b1 	.word	0x080081b1
 8008160:	0800812d 	.word	0x0800812d
 8008164:	0800812d 	.word	0x0800812d
 8008168:	0800812d 	.word	0x0800812d
 800816c:	0800812d 	.word	0x0800812d
 8008170:	080082b1 	.word	0x080082b1
 8008174:	080081db 	.word	0x080081db
 8008178:	0800826b 	.word	0x0800826b
 800817c:	0800812d 	.word	0x0800812d
 8008180:	0800812d 	.word	0x0800812d
 8008184:	080082d3 	.word	0x080082d3
 8008188:	0800812d 	.word	0x0800812d
 800818c:	080081db 	.word	0x080081db
 8008190:	0800812d 	.word	0x0800812d
 8008194:	0800812d 	.word	0x0800812d
 8008198:	08008273 	.word	0x08008273
 800819c:	6833      	ldr	r3, [r6, #0]
 800819e:	1d1a      	adds	r2, r3, #4
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6032      	str	r2, [r6, #0]
 80081a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081ac:	2301      	movs	r3, #1
 80081ae:	e09d      	b.n	80082ec <_printf_i+0x1e8>
 80081b0:	6833      	ldr	r3, [r6, #0]
 80081b2:	6820      	ldr	r0, [r4, #0]
 80081b4:	1d19      	adds	r1, r3, #4
 80081b6:	6031      	str	r1, [r6, #0]
 80081b8:	0606      	lsls	r6, r0, #24
 80081ba:	d501      	bpl.n	80081c0 <_printf_i+0xbc>
 80081bc:	681d      	ldr	r5, [r3, #0]
 80081be:	e003      	b.n	80081c8 <_printf_i+0xc4>
 80081c0:	0645      	lsls	r5, r0, #25
 80081c2:	d5fb      	bpl.n	80081bc <_printf_i+0xb8>
 80081c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	da03      	bge.n	80081d4 <_printf_i+0xd0>
 80081cc:	232d      	movs	r3, #45	@ 0x2d
 80081ce:	426d      	negs	r5, r5
 80081d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081d4:	4859      	ldr	r0, [pc, #356]	@ (800833c <_printf_i+0x238>)
 80081d6:	230a      	movs	r3, #10
 80081d8:	e011      	b.n	80081fe <_printf_i+0xfa>
 80081da:	6821      	ldr	r1, [r4, #0]
 80081dc:	6833      	ldr	r3, [r6, #0]
 80081de:	0608      	lsls	r0, r1, #24
 80081e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80081e4:	d402      	bmi.n	80081ec <_printf_i+0xe8>
 80081e6:	0649      	lsls	r1, r1, #25
 80081e8:	bf48      	it	mi
 80081ea:	b2ad      	uxthmi	r5, r5
 80081ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80081ee:	4853      	ldr	r0, [pc, #332]	@ (800833c <_printf_i+0x238>)
 80081f0:	6033      	str	r3, [r6, #0]
 80081f2:	bf14      	ite	ne
 80081f4:	230a      	movne	r3, #10
 80081f6:	2308      	moveq	r3, #8
 80081f8:	2100      	movs	r1, #0
 80081fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081fe:	6866      	ldr	r6, [r4, #4]
 8008200:	60a6      	str	r6, [r4, #8]
 8008202:	2e00      	cmp	r6, #0
 8008204:	bfa2      	ittt	ge
 8008206:	6821      	ldrge	r1, [r4, #0]
 8008208:	f021 0104 	bicge.w	r1, r1, #4
 800820c:	6021      	strge	r1, [r4, #0]
 800820e:	b90d      	cbnz	r5, 8008214 <_printf_i+0x110>
 8008210:	2e00      	cmp	r6, #0
 8008212:	d04b      	beq.n	80082ac <_printf_i+0x1a8>
 8008214:	4616      	mov	r6, r2
 8008216:	fbb5 f1f3 	udiv	r1, r5, r3
 800821a:	fb03 5711 	mls	r7, r3, r1, r5
 800821e:	5dc7      	ldrb	r7, [r0, r7]
 8008220:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008224:	462f      	mov	r7, r5
 8008226:	42bb      	cmp	r3, r7
 8008228:	460d      	mov	r5, r1
 800822a:	d9f4      	bls.n	8008216 <_printf_i+0x112>
 800822c:	2b08      	cmp	r3, #8
 800822e:	d10b      	bne.n	8008248 <_printf_i+0x144>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	07df      	lsls	r7, r3, #31
 8008234:	d508      	bpl.n	8008248 <_printf_i+0x144>
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	6861      	ldr	r1, [r4, #4]
 800823a:	4299      	cmp	r1, r3
 800823c:	bfde      	ittt	le
 800823e:	2330      	movle	r3, #48	@ 0x30
 8008240:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008244:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008248:	1b92      	subs	r2, r2, r6
 800824a:	6122      	str	r2, [r4, #16]
 800824c:	f8cd a000 	str.w	sl, [sp]
 8008250:	464b      	mov	r3, r9
 8008252:	aa03      	add	r2, sp, #12
 8008254:	4621      	mov	r1, r4
 8008256:	4640      	mov	r0, r8
 8008258:	f7ff fee6 	bl	8008028 <_printf_common>
 800825c:	3001      	adds	r0, #1
 800825e:	d14a      	bne.n	80082f6 <_printf_i+0x1f2>
 8008260:	f04f 30ff 	mov.w	r0, #4294967295
 8008264:	b004      	add	sp, #16
 8008266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	f043 0320 	orr.w	r3, r3, #32
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	4833      	ldr	r0, [pc, #204]	@ (8008340 <_printf_i+0x23c>)
 8008274:	2778      	movs	r7, #120	@ 0x78
 8008276:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	6831      	ldr	r1, [r6, #0]
 800827e:	061f      	lsls	r7, r3, #24
 8008280:	f851 5b04 	ldr.w	r5, [r1], #4
 8008284:	d402      	bmi.n	800828c <_printf_i+0x188>
 8008286:	065f      	lsls	r7, r3, #25
 8008288:	bf48      	it	mi
 800828a:	b2ad      	uxthmi	r5, r5
 800828c:	6031      	str	r1, [r6, #0]
 800828e:	07d9      	lsls	r1, r3, #31
 8008290:	bf44      	itt	mi
 8008292:	f043 0320 	orrmi.w	r3, r3, #32
 8008296:	6023      	strmi	r3, [r4, #0]
 8008298:	b11d      	cbz	r5, 80082a2 <_printf_i+0x19e>
 800829a:	2310      	movs	r3, #16
 800829c:	e7ac      	b.n	80081f8 <_printf_i+0xf4>
 800829e:	4827      	ldr	r0, [pc, #156]	@ (800833c <_printf_i+0x238>)
 80082a0:	e7e9      	b.n	8008276 <_printf_i+0x172>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	f023 0320 	bic.w	r3, r3, #32
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	e7f6      	b.n	800829a <_printf_i+0x196>
 80082ac:	4616      	mov	r6, r2
 80082ae:	e7bd      	b.n	800822c <_printf_i+0x128>
 80082b0:	6833      	ldr	r3, [r6, #0]
 80082b2:	6825      	ldr	r5, [r4, #0]
 80082b4:	6961      	ldr	r1, [r4, #20]
 80082b6:	1d18      	adds	r0, r3, #4
 80082b8:	6030      	str	r0, [r6, #0]
 80082ba:	062e      	lsls	r6, r5, #24
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	d501      	bpl.n	80082c4 <_printf_i+0x1c0>
 80082c0:	6019      	str	r1, [r3, #0]
 80082c2:	e002      	b.n	80082ca <_printf_i+0x1c6>
 80082c4:	0668      	lsls	r0, r5, #25
 80082c6:	d5fb      	bpl.n	80082c0 <_printf_i+0x1bc>
 80082c8:	8019      	strh	r1, [r3, #0]
 80082ca:	2300      	movs	r3, #0
 80082cc:	6123      	str	r3, [r4, #16]
 80082ce:	4616      	mov	r6, r2
 80082d0:	e7bc      	b.n	800824c <_printf_i+0x148>
 80082d2:	6833      	ldr	r3, [r6, #0]
 80082d4:	1d1a      	adds	r2, r3, #4
 80082d6:	6032      	str	r2, [r6, #0]
 80082d8:	681e      	ldr	r6, [r3, #0]
 80082da:	6862      	ldr	r2, [r4, #4]
 80082dc:	2100      	movs	r1, #0
 80082de:	4630      	mov	r0, r6
 80082e0:	f7f7 ff7e 	bl	80001e0 <memchr>
 80082e4:	b108      	cbz	r0, 80082ea <_printf_i+0x1e6>
 80082e6:	1b80      	subs	r0, r0, r6
 80082e8:	6060      	str	r0, [r4, #4]
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	6123      	str	r3, [r4, #16]
 80082ee:	2300      	movs	r3, #0
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082f4:	e7aa      	b.n	800824c <_printf_i+0x148>
 80082f6:	6923      	ldr	r3, [r4, #16]
 80082f8:	4632      	mov	r2, r6
 80082fa:	4649      	mov	r1, r9
 80082fc:	4640      	mov	r0, r8
 80082fe:	47d0      	blx	sl
 8008300:	3001      	adds	r0, #1
 8008302:	d0ad      	beq.n	8008260 <_printf_i+0x15c>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	079b      	lsls	r3, r3, #30
 8008308:	d413      	bmi.n	8008332 <_printf_i+0x22e>
 800830a:	68e0      	ldr	r0, [r4, #12]
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	4298      	cmp	r0, r3
 8008310:	bfb8      	it	lt
 8008312:	4618      	movlt	r0, r3
 8008314:	e7a6      	b.n	8008264 <_printf_i+0x160>
 8008316:	2301      	movs	r3, #1
 8008318:	4632      	mov	r2, r6
 800831a:	4649      	mov	r1, r9
 800831c:	4640      	mov	r0, r8
 800831e:	47d0      	blx	sl
 8008320:	3001      	adds	r0, #1
 8008322:	d09d      	beq.n	8008260 <_printf_i+0x15c>
 8008324:	3501      	adds	r5, #1
 8008326:	68e3      	ldr	r3, [r4, #12]
 8008328:	9903      	ldr	r1, [sp, #12]
 800832a:	1a5b      	subs	r3, r3, r1
 800832c:	42ab      	cmp	r3, r5
 800832e:	dcf2      	bgt.n	8008316 <_printf_i+0x212>
 8008330:	e7eb      	b.n	800830a <_printf_i+0x206>
 8008332:	2500      	movs	r5, #0
 8008334:	f104 0619 	add.w	r6, r4, #25
 8008338:	e7f5      	b.n	8008326 <_printf_i+0x222>
 800833a:	bf00      	nop
 800833c:	08008e85 	.word	0x08008e85
 8008340:	08008e96 	.word	0x08008e96

08008344 <_sbrk_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d06      	ldr	r5, [pc, #24]	@ (8008360 <_sbrk_r+0x1c>)
 8008348:	2300      	movs	r3, #0
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	602b      	str	r3, [r5, #0]
 8008350:	f7f9 fbe2 	bl	8001b18 <_sbrk>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_sbrk_r+0x1a>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_sbrk_r+0x1a>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	2000083c 	.word	0x2000083c

08008364 <_realloc_r>:
 8008364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008368:	4680      	mov	r8, r0
 800836a:	4615      	mov	r5, r2
 800836c:	460c      	mov	r4, r1
 800836e:	b921      	cbnz	r1, 800837a <_realloc_r+0x16>
 8008370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008374:	4611      	mov	r1, r2
 8008376:	f7ff bc73 	b.w	8007c60 <_malloc_r>
 800837a:	b92a      	cbnz	r2, 8008388 <_realloc_r+0x24>
 800837c:	f7ff fc04 	bl	8007b88 <_free_r>
 8008380:	2400      	movs	r4, #0
 8008382:	4620      	mov	r0, r4
 8008384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008388:	f000 f81a 	bl	80083c0 <_malloc_usable_size_r>
 800838c:	4285      	cmp	r5, r0
 800838e:	4606      	mov	r6, r0
 8008390:	d802      	bhi.n	8008398 <_realloc_r+0x34>
 8008392:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008396:	d8f4      	bhi.n	8008382 <_realloc_r+0x1e>
 8008398:	4629      	mov	r1, r5
 800839a:	4640      	mov	r0, r8
 800839c:	f7ff fc60 	bl	8007c60 <_malloc_r>
 80083a0:	4607      	mov	r7, r0
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d0ec      	beq.n	8008380 <_realloc_r+0x1c>
 80083a6:	42b5      	cmp	r5, r6
 80083a8:	462a      	mov	r2, r5
 80083aa:	4621      	mov	r1, r4
 80083ac:	bf28      	it	cs
 80083ae:	4632      	movcs	r2, r6
 80083b0:	f7ff fbdc 	bl	8007b6c <memcpy>
 80083b4:	4621      	mov	r1, r4
 80083b6:	4640      	mov	r0, r8
 80083b8:	f7ff fbe6 	bl	8007b88 <_free_r>
 80083bc:	463c      	mov	r4, r7
 80083be:	e7e0      	b.n	8008382 <_realloc_r+0x1e>

080083c0 <_malloc_usable_size_r>:
 80083c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083c4:	1f18      	subs	r0, r3, #4
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	bfbc      	itt	lt
 80083ca:	580b      	ldrlt	r3, [r1, r0]
 80083cc:	18c0      	addlt	r0, r0, r3
 80083ce:	4770      	bx	lr

080083d0 <_init>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	bf00      	nop
 80083d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d6:	bc08      	pop	{r3}
 80083d8:	469e      	mov	lr, r3
 80083da:	4770      	bx	lr

080083dc <_fini>:
 80083dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083de:	bf00      	nop
 80083e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083e2:	bc08      	pop	{r3}
 80083e4:	469e      	mov	lr, r3
 80083e6:	4770      	bx	lr
